(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-fun U_2_bool (Int) Bool)
(declare-fun MapSelect (Int Int) Int)
(declare-fun |Map@sharp@Elements| (Int) Int)
(declare-fun |Map@sharp@Domain| (Int) Int)
(declare-fun |Set@sharp@Card| (Int) Int)
(declare-fun |Set@sharp@UnionOne| (Int Int) Int)
(declare-fun |Map@sharp@Card| (Int) Int)
(declare-fun |Map@sharp@Values| (Int) Int)
(declare-fun |Map@sharp@Empty| () Int)
(declare-fun |Map@sharp@Build| (Int Int Int) Int)
(declare-fun u@@5!0 (Int Int) Int)
(declare-fun x@@39!1 (Int) Int)

(assert (! (forall ((m@@9py0 Int)) (! (= (Set@sharp@Card (Map@sharp@Values m@@9py0)) (Map@sharp@Card m@@9py0)) :pattern ((Set@sharp@Card (Map@sharp@Values m@@9py0))) )) :named A4))
(assert (! (forall ((m@@10py0 Int)(v@@36py0 Int)) (! (and (or (not (U_2_bool (MapSelect (Map@sharp@Values m@@10py0) v@@36py0))) (and (U_2_bool (MapSelect (Map@sharp@Domain m@@10py0) (u@@5!0 v@@36py0 m@@10py0))) (= v@@36py0 (MapSelect (Map@sharp@Elements m@@10py0) (u@@5!0 v@@36py0 m@@10py0))))) (or (U_2_bool (MapSelect (Map@sharp@Values m@@10py0) v@@36py0)) (forall ((u@@6py0 Int)) (! (or (not (U_2_bool (MapSelect (Map@sharp@Domain m@@10py0) u@@6py0))) (not (= v@@36py0 (MapSelect (Map@sharp@Elements m@@10py0) u@@6py0)))) :pattern ((MapSelect (Map@sharp@Domain m@@10py0) u@@6py0)) :pattern ((MapSelect (Map@sharp@Elements m@@10py0) u@@6py0)) )))) :pattern ((MapSelect (Map@sharp@Values m@@10py0) v@@36py0)) )) :named A5))
(assert (! (forall ((u@@7py0 Int)) (! (not (U_2_bool (MapSelect (Map@sharp@Domain Map@sharp@Empty) u@@7py0))) :pattern ((MapSelect (Map@sharp@Domain Map@sharp@Empty) u@@7py0)) )) :named A7))
(assert (! (forall ((m@@13py0 Int)) (! (and (or (not (= (Map@sharp@Card m@@13py0) 0)) (= m@@13py0 Map@sharp@Empty)) (or (not (= m@@13py0 Map@sharp@Empty)) (= (Map@sharp@Card m@@13py0) 0)) (or (= (Map@sharp@Card m@@13py0) 0) (U_2_bool (MapSelect (Map@sharp@Domain m@@13py0) (x@@39!1 m@@13py0))))) :pattern ((Map@sharp@Card m@@13py0)) )) :named A8))
(assert (! (forall ((m@@14py0 Int)(u@@8py0 Int)(upy0 Int)(v@@37py0 Int)) (! (and (or (not (= upy0 u@@8py0)) (and (U_2_bool (MapSelect (Map@sharp@Domain (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0)) (= (MapSelect (Map@sharp@Elements (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0) v@@37py0))) (or (= upy0 u@@8py0) (and (or (U_2_bool (MapSelect (Map@sharp@Domain m@@14py0) upy0)) (not (U_2_bool (MapSelect (Map@sharp@Domain (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0)))) (or (U_2_bool (MapSelect (Map@sharp@Domain (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0)) (not (U_2_bool (MapSelect (Map@sharp@Domain m@@14py0) upy0)))) (= (MapSelect (Map@sharp@Elements (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0) (MapSelect (Map@sharp@Elements m@@14py0) upy0))))) :pattern ((MapSelect (Map@sharp@Domain (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0)) :pattern ((MapSelect (Map@sharp@Elements (Map@sharp@Build m@@14py0 u@@8py0 v@@37py0)) upy0)) )) :named A10))
(assert (! (forall ((m@@16py0 Int)(u@@10py0 Int)(v@@39py0 Int)) (! (or (U_2_bool (MapSelect (Map@sharp@Domain m@@16py0) u@@10py0)) (= (Map@sharp@Card (Map@sharp@Build m@@16py0 u@@10py0 v@@39py0)) (+ 1 (Map@sharp@Card m@@16py0)))) :pattern ((Map@sharp@Card (Map@sharp@Build m@@16py0 u@@10py0 v@@39py0))) )) :named A11))
(assert (! (forall ((m@@17py0 Int)(u@@11py0 Int)(v@@40py0 Int)) (! (= (Map@sharp@Values (Map@sharp@Build m@@17py0 u@@11py0 v@@40py0)) (Set@sharp@UnionOne (Map@sharp@Values m@@17py0) v@@40py0)) :pattern ((Map@sharp@Values (Map@sharp@Build m@@17py0 u@@11py0 v@@40py0))) )) :named A12))
(assert (! (forall ((a@@4py0 Int)(x@@20py0 Int)) (! (or (= (Set@sharp@Card (Set@sharp@UnionOne a@@4py0 x@@20py0)) (Set@sharp@Card a@@4py0)) (not (U_2_bool (MapSelect a@@4py0 x@@20py0)))) :pattern ((Set@sharp@Card (Set@sharp@UnionOne a@@4py0 x@@20py0))) )) :named A14))

;(declare-fun __dummy__ (Int) Bool)

;(assert (! (__dummy__ (Set@sharp@Card (Map@sharp@Values (Map@sharp@Build (Map@sharp@Build Map@sharp@Empty 1 1) 2 1)))) :named Repro1))

(check-sat)

