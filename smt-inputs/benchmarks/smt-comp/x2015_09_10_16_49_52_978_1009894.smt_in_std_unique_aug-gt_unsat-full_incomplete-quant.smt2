(set-info :smt-lib-version 2.6)
(set-info :source | Generated by: Andrew Reynolds Generated on: 2017-04-28 Generator: Sledgehammer, converted to v2.6 by CVC4 Application: Verfication goals in Isabelle Target solver: CVC4, Z3 Publications: "A Decision Procedure for (Co)Datatypes" by Andrew Reynolds and Jasmin Blanchette, CADE 2015. |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-logic UFDT)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-sort A$ 0)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-sort B$ 0)
(declare-sort A_set$ 0)
(declare-sort B_set$ 0)
(declare-sort A_a_fun$ 0)
(declare-sort A_b_fun$ 0)
(declare-sort B_a_fun$ 0)
(declare-sort B_b_fun$ 0)
(declare-sort A_bool_fun$ 0)
(declare-sort B_bool_fun$ 0)
(declare-sort A_b_fun_set$ 0)
(declare-sort A_a_tree_fun$ 0)
(declare-sort A_b_tree_fun$ 0)
(declare-sort A_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_fun$ 0)
(declare-sort A_b_fun_b_fun$ 0)
(declare-sort B_a_b_fun_fun$ 0)
(declare-sort A_tree_bool_fun$ 0)
(declare-sort B_tree_bool_fun$ 0)
(declare-sort A_a_bool_fun_fun$ 0)
(declare-sort A_b_bool_fun_fun$ 0)
(declare-sort A_b_fun_bool_fun$ 0)
(declare-sort B_a_bool_fun_fun$ 0)
(declare-sort B_b_bool_fun_fun$ 0)
(declare-sort A_tree_a_tree_fun$ 0)
(declare-sort A_tree_b_tree_fun$ 0)
(declare-sort B_tree_b_tree_fun$ 0)
(declare-sort A_a_fun_a_a_fun_fun$ 0)
(declare-sort A_a_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_fun$ 0)
(declare-sort A_b_fun_b_fun_a_fun$ 0)
(declare-sort A_b_fun_b_fun_b_fun$ 0)
(declare-sort B_a_fun_b_b_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_fun$ 0)
(declare-sort A_a_tree_bool_fun_fun$ 0)
(declare-sort A_b_fun_tree_bool_fun$ 0)
(declare-sort B_b_tree_bool_fun_fun$ 0)
(declare-sort A_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_bool_fun_fun$ 0)
(declare-sort A_b_fun_b_bool_fun_fun$ 0)
(declare-sort B_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_b_tree_fun_fun$ 0)
(declare-sort A_a_b_fun_fun_a_b_fun_fun$ 0)
(declare-sort B_a_b_fun_fun_b_b_fun_fun$ 0)
(declare-sort A_tree_a_tree_bool_fun_fun$ 0)
(declare-sort A_tree_b_tree_bool_fun_fun$ 0)
(declare-sort B_tree_a_tree_bool_fun_fun$ 0)
(declare-sort B_tree_b_tree_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_bool_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_b_tree_fun_fun$ 0)
(declare-sort A_b_tree_fun_a_b_tree_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_a_fun_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_fun_a_b_fun_b_fun_fun$ 0)
(declare-sort A_b_fun_b_a_fun_b_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_fun_a_b_fun_b_fun_fun$ 0)
(declare-sort B_a_fun_a_b_fun_a_a_fun_fun_fun$ 0)
(declare-sort B_b_fun_a_b_fun_a_b_fun_fun_fun$ 0)
(declare-sort B_b_fun_b_b_fun_b_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_tree_a_tree_bool_fun_fun$ 0)
(declare-sort A_b_fun_tree_b_tree_bool_fun_fun$ 0)
(declare-sort A_tree_a_b_fun_tree_bool_fun_fun$ 0)
(declare-sort B_tree_a_b_fun_tree_bool_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0)
(declare-sort A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ 0)
(declare-sort A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ 0)
(declare-sort A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun$ 0)
(declare-sort A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun$ 0)
(declare-sort B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ 0)
(declare-sort A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ 0)
(declare-sort A_b_fun_tree$ 0)
(declare-sort A_tree$ 0)
(declare-sort B_tree$ 0)
(declare-sort A_a_fun_a_b_fun_fun_tree$ 0)
(declare-sort A_a_fun_tree$ 0)
(declare-sort A_b_fun_a_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_tree$ 0)
(declare-sort B_b_fun_tree$ 0)
(declare-sort B_a_fun_tree$ 0)
(declare-sort A_b_fun_a_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_tree$ 0)
(declare-sort A_a_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_b_fun_tree$ 0)
(declare-sort A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ 0)
(declare-sort B_a_fun_b_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_fun_tree$ 0)
(declare-sort B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_a_fun_fun_tree$ 0)
(declare-sort B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_fun_tree$ 0)
(declare-sort A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ 0)
(declare-sort A_a_b_fun_fun_a_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$ 0)
(declare-sort B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$ 0)
(declare-sort B_a_b_fun_fun_b_b_fun_fun_tree$ 0)
(declare-sort A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$ 0)
(declare-fun select$ (A_b_fun_tree$) A_b_fun$)
(declare-fun selecta$ (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun selectb$ (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun node$ (A_b_fun$ A_b_fun_tree$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun root$ (A_tree$) A$)
(declare-fun left$ (A_tree$) A_tree$)
(declare-fun right$ (A_tree$) A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$) A_tree$)
(declare-fun root$a (B_tree$) B$)
(declare-fun left$a (B_tree$) B_tree$)
(declare-fun right$a (B_tree$) B_tree$)
(declare-fun node$b (B$ B_tree$ B_tree$) B_tree$)
(declare-fun selectc$ (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun$)
(declare-fun selectd$ (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun selecte$ (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun node$c (A_a_fun_a_b_fun_fun$ A_a_fun_a_b_fun_fun_tree$ A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun selectf$ (A_a_fun_tree$) A_a_fun$)
(declare-fun selectg$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun selecth$ (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun node$d (A_a_fun$ A_a_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun selecti$ (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun$)
(declare-fun selectj$ (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun selectk$ (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun node$e (A_b_fun_a_b_fun_fun$ A_b_fun_a_b_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun selectl$ (A_b_fun_b_fun_tree$) A_b_fun_b_fun$)
(declare-fun selectm$ (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun selectn$ (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun node$f (A_b_fun_b_fun$ A_b_fun_b_fun_tree$ A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun selecto$ (B_b_fun_tree$) B_b_fun$)
(declare-fun selectp$ (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun selectq$ (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun node$g (B_b_fun$ B_b_fun_tree$ B_b_fun_tree$) B_b_fun_tree$)
(declare-fun selectr$ (B_a_fun_tree$) B_a_fun$)
(declare-fun selects$ (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun selectt$ (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun node$h (B_a_fun$ B_a_fun_tree$ B_a_fun_tree$) B_a_fun_tree$)
(declare-fun selectu$ (A_b_fun_a_fun_tree$) A_b_fun_a_fun$)
(declare-fun selectv$ (A_b_fun_a_fun_tree$) A_b_fun_a_fun_tree$)
(declare-fun selectw$ (A_b_fun_a_fun_tree$) A_b_fun_a_fun_tree$)
(declare-fun node$i (A_b_fun_a_fun$ A_b_fun_a_fun_tree$ A_b_fun_a_fun_tree$) A_b_fun_a_fun_tree$)
(declare-fun selectx$ (B_a_b_fun_fun_tree$) B_a_b_fun_fun$)
(declare-fun selecty$ (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun selectz$ (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun node$j (B_a_b_fun_fun$ B_a_b_fun_fun_tree$ B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun selecua$ (A_a_b_fun_fun_tree$) A_a_b_fun_fun$)
(declare-fun selecub$ (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun selecuc$ (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun node$k (A_a_b_fun_fun$ A_a_b_fun_fun_tree$ A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun selecud$ (A_b_fun_b_fun_b_fun_tree$) A_b_fun_b_fun_b_fun$)
(declare-fun selecue$ (A_b_fun_b_fun_b_fun_tree$) A_b_fun_b_fun_b_fun_tree$)
(declare-fun selecuf$ (A_b_fun_b_fun_b_fun_tree$) A_b_fun_b_fun_b_fun_tree$)
(declare-fun node$l (A_b_fun_b_fun_b_fun$ A_b_fun_b_fun_b_fun_tree$ A_b_fun_b_fun_b_fun_tree$) A_b_fun_b_fun_b_fun_tree$)
(declare-fun selecug$ (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun$)
(declare-fun selecuh$ (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecui$ (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun node$m (A_b_fun_a_a_fun_a_b_fun_fun_fun$ A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecuj$ (B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_a_b_fun_fun_fun$)
(declare-fun selecuk$ (B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecul$ (B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun node$n (B_b_fun_a_b_fun_a_b_fun_fun_fun$ B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecum$ (B_a_fun_b_b_fun_fun_tree$) B_a_fun_b_b_fun_fun$)
(declare-fun selecun$ (B_a_fun_b_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecuo$ (B_a_fun_b_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun node$o (B_a_fun_b_b_fun_fun$ B_a_fun_b_b_fun_fun_tree$ B_a_fun_b_b_fun_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun selecup$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun selecuq$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecur$ (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$p (A_b_fun_b_a_fun_b_b_fun_fun_fun$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecus$ (B_b_fun_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun$)
(declare-fun selecut$ (B_b_fun_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecuu$ (B_b_fun_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun node$q (B_b_fun_b_b_fun_fun$ B_b_fun_b_b_fun_fun_tree$ B_b_fun_b_b_fun_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun selecuv$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$) B_b_fun_b_b_fun_b_b_fun_fun_fun$)
(declare-fun selecuw$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$) B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecux$ (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$) B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$r (B_b_fun_b_b_fun_b_b_fun_fun_fun$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$) B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecuy$ (A_b_fun_a_a_fun_fun_tree$) A_b_fun_a_a_fun_fun$)
(declare-fun selecuz$ (A_b_fun_a_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecva$ (A_b_fun_a_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun node$s (A_b_fun_a_a_fun_fun$ A_b_fun_a_a_fun_fun_tree$ A_b_fun_a_a_fun_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun selecvb$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$) B_a_fun_a_b_fun_a_a_fun_fun_fun$)
(declare-fun selecvc$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$) B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecvd$ (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$) B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$t (B_a_fun_a_b_fun_a_a_fun_fun_fun$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$) B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecve$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun$)
(declare-fun selecvf$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecvg$ (A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun node$u (A_a_fun_a_a_fun_fun$ A_a_fun_a_a_fun_fun_tree$ A_a_fun_a_a_fun_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun selecvh$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun selecvi$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecvj$ (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun node$v (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun selecvk$ (A_a_b_fun_fun_a_b_fun_fun_tree$) A_a_b_fun_fun_a_b_fun_fun$)
(declare-fun selecvl$ (A_a_b_fun_fun_a_b_fun_fun_tree$) A_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun selecvm$ (A_a_b_fun_fun_a_b_fun_fun_tree$) A_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun node$w (A_a_b_fun_fun_a_b_fun_fun$ A_a_b_fun_fun_a_b_fun_fun_tree$ A_a_b_fun_fun_a_b_fun_fun_tree$) A_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun selecvn$ (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$) A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun$)
(declare-fun selecvo$ (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$) A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecvp$ (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$) A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$)
(declare-fun node$x (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun$ A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$ A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$) A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$)
(declare-fun selecvq$ (A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_a_fun_a_b_fun_b_fun_fun$)
(declare-fun selecvr$ (A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun selecvs$ (A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun node$y (A_b_fun_a_fun_a_b_fun_b_fun_fun$ A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$ A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun selecvt$ (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$) A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun$)
(declare-fun selecvu$ (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$) A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun selecvv$ (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$) A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun node$z (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun$ A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$ A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$) A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun selecvw$ (A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_b_fun_a_b_fun_b_fun_fun$)
(declare-fun selecvx$ (A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun selecvy$ (A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun node$aa (A_b_fun_b_fun_a_b_fun_b_fun_fun$ A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$ A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$) A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun selecvz$ (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun$)
(declare-fun selecwa$ (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun selecwb$ (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun node$ab (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun$ B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$ B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$) B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun selecwc$ (B_a_b_fun_fun_b_b_fun_fun_tree$) B_a_b_fun_fun_b_b_fun_fun$)
(declare-fun selecwd$ (B_a_b_fun_fun_b_b_fun_fun_tree$) B_a_b_fun_fun_b_b_fun_fun_tree$)
(declare-fun selecwe$ (B_a_b_fun_fun_b_b_fun_fun_tree$) B_a_b_fun_fun_b_b_fun_fun_tree$)
(declare-fun node$ac (B_a_b_fun_fun_b_b_fun_fun$ B_a_b_fun_fun_b_b_fun_fun_tree$ B_a_b_fun_fun_b_b_fun_fun_tree$) B_a_b_fun_fun_b_b_fun_fun_tree$)
(declare-fun selecwf$ (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun$)
(declare-fun selecwg$ (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$)
(declare-fun selecwh$ (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$)
(declare-fun node$ad (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun$ A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$ A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$) A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$)
(declare-fun f$ () A_b_fun_tree$)
(declare-fun g$ () A_b_fun_tree$)
(declare-fun id$ () A_b_fun_a_b_fun_fun$)
(declare-fun uu$ (A$) A_b_fun_b_fun$)
(declare-fun id$a () B_b_fun$)
(declare-fun id$b () A_a_fun$)
(declare-fun comp$ () B_b_fun_a_b_fun_a_b_fun_fun_fun$)
(declare-fun comp$a () A_b_fun_a_a_fun_a_b_fun_fun_fun$)
(declare-fun comp$b () A_b_fun_b_a_fun_b_b_fun_fun_fun$)
(declare-fun comp$c () B_b_fun_b_b_fun_b_b_fun_fun_fun$)
(declare-fun comp$d () B_a_fun_a_b_fun_a_a_fun_fun_fun$)
(declare-fun comp$e () A_a_fun_a_a_fun_a_a_fun_fun_fun$)
(declare-fun comp$f () A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun$)
(declare-fun comp$g () A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun$)
(declare-fun comp$h () B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun$)
(declare-fun comp$i () A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun$)
(declare-fun comp$j (B_tree_b_tree_fun$ A_tree_b_tree_fun$) A_tree_b_tree_fun$)
(declare-fun comp$k (A_tree_b_tree_fun$ A_tree_a_tree_fun$) A_tree_b_tree_fun$)
(declare-fun comp$l (B_tree_b_tree_fun$) A_b_tree_fun_a_b_tree_fun_fun$)
(declare-fun comp$m (A_tree_b_tree_fun$) A_a_tree_fun_a_b_tree_fun_fun$)
(declare-fun left$b (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun left$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun left$d (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun left$e (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun left$f (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun left$g (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun left$h (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun left$i (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun left$j (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun left$k (A_b_fun_a_fun_tree$) A_b_fun_a_fun_tree$)
(declare-fun left$l (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun root$b (B_b_fun_tree$) B_b_fun$)
(declare-fun root$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun$)
(declare-fun root$d (A_b_fun_tree$) A_b_fun$)
(declare-fun root$e (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun$)
(declare-fun root$f (A_a_fun_tree$) A_a_fun$)
(declare-fun root$g (B_a_b_fun_fun_tree$) B_a_b_fun_fun$)
(declare-fun root$h (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun$)
(declare-fun root$i (A_a_b_fun_fun_tree$) A_a_b_fun_fun$)
(declare-fun root$j (B_a_fun_tree$) B_a_fun$)
(declare-fun root$k (A_b_fun_a_fun_tree$) A_b_fun_a_fun$)
(declare-fun root$l (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun$)
(declare-fun member$ (B$ B_set$) Bool)
(declare-fun right$b (B_b_fun_tree$) B_b_fun_tree$)
(declare-fun right$c (A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun right$d (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun right$e (A_a_fun_a_b_fun_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun right$f (A_a_fun_tree$) A_a_fun_tree$)
(declare-fun right$g (B_a_b_fun_fun_tree$) B_a_b_fun_fun_tree$)
(declare-fun right$h (A_b_fun_a_b_fun_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun right$i (A_a_b_fun_fun_tree$) A_a_b_fun_fun_tree$)
(declare-fun right$j (B_a_fun_tree$) B_a_fun_tree$)
(declare-fun right$k (A_b_fun_a_fun_tree$) A_b_fun_a_fun_tree$)
(declare-fun right$l (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun ap_tree$ (A_b_fun_tree$ A_tree$) B_tree$)
(declare-fun fun_app$ (A_b_fun_b_fun$ A_b_fun$) B$)
(declare-fun member$a (A_b_fun$ A_b_fun_set$) Bool)
(declare-fun member$b (A$ A_set$) Bool)
(declare-fun ap_tree$a (A_a_fun_a_b_fun_fun_tree$ A_a_fun_tree$) A_b_fun_tree$)
(declare-fun ap_tree$b (A_b_fun_a_b_fun_fun_tree$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun ap_tree$c (A_b_fun_b_fun_tree$ A_b_fun_tree$) B_tree$)
(declare-fun ap_tree$d (B_b_fun_tree$ B_tree$) B_tree$)
(declare-fun ap_tree$e (A_a_fun_tree$ A_tree$) A_tree$)
(declare-fun ap_tree$f (B_a_fun_tree$ B_tree$) A_tree$)
(declare-fun ap_tree$g (A_b_fun_a_fun_tree$ A_b_fun_tree$) A_tree$)
(declare-fun ap_tree$h (B_a_b_fun_fun_tree$ B_tree$) A_b_fun_tree$)
(declare-fun ap_tree$i (A_a_b_fun_fun_tree$ A_tree$) A_b_fun_tree$)
(declare-fun ap_tree$j (A_b_fun_b_fun_b_fun_tree$ A_b_fun_b_fun_tree$) B_tree$)
(declare-fun ap_tree$k (A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$ A_b_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun ap_tree$l (B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$ B_b_fun_tree$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun ap_tree$m (B_a_fun_b_b_fun_fun_tree$ B_a_fun_tree$) B_b_fun_tree$)
(declare-fun ap_tree$n (A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$ A_b_fun_tree$) B_a_fun_b_b_fun_fun_tree$)
(declare-fun ap_tree$o (B_b_fun_b_b_fun_fun_tree$ B_b_fun_tree$) B_b_fun_tree$)
(declare-fun ap_tree$p (B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$ B_b_fun_tree$) B_b_fun_b_b_fun_fun_tree$)
(declare-fun ap_tree$q (A_b_fun_a_a_fun_fun_tree$ A_b_fun_tree$) A_a_fun_tree$)
(declare-fun ap_tree$r (B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$ B_a_fun_tree$) A_b_fun_a_a_fun_fun_tree$)
(declare-fun ap_tree$s (A_a_fun_a_a_fun_fun_tree$ A_a_fun_tree$) A_a_fun_tree$)
(declare-fun ap_tree$t (A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$ A_a_fun_tree$) A_a_fun_a_a_fun_fun_tree$)
(declare-fun ap_tree$u (A_a_b_fun_fun_a_b_fun_fun_tree$ A_a_b_fun_fun_tree$) A_b_fun_tree$)
(declare-fun ap_tree$v (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$ A_b_fun_b_fun_tree$) A_a_b_fun_fun_a_b_fun_fun_tree$)
(declare-fun ap_tree$w (A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$ A_b_fun_a_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun ap_tree$x (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$ A_b_fun_tree$) A_b_fun_a_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun ap_tree$y (A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$ A_b_fun_b_fun_tree$) A_b_fun_b_fun_tree$)
(declare-fun ap_tree$z (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$ B_b_fun_tree$) A_b_fun_b_fun_a_b_fun_b_fun_fun_tree$)
(declare-fun fun_app$a (A_b_fun$ A$) B$)
(declare-fun fun_app$b (B_b_fun$ B$) B$)
(declare-fun fun_app$c (B_a_fun$ B$) A$)
(declare-fun fun_app$d (A_a_fun$ A$) A$)
(declare-fun fun_app$e (A_b_fun_a_fun$ A_b_fun$) A$)
(declare-fun fun_app$f (B_a_b_fun_fun$ B$) A_b_fun$)
(declare-fun fun_app$g (A_a_b_fun_fun$ A$) A_b_fun$)
(declare-fun fun_app$h (A_a_fun_a_b_fun_fun$ A_a_fun$) A_b_fun$)
(declare-fun fun_app$i (A_b_fun_b_fun_b_fun$ A_b_fun_b_fun$) B$)
(declare-fun fun_app$j (A_b_fun_a_b_fun_fun$ A_b_fun$) A_b_fun$)
(declare-fun fun_app$k (B_tree_b_tree_fun$ B_tree$) B_tree$)
(declare-fun fun_app$l (A_tree_a_tree_fun$ A_tree$) A_tree$)
(declare-fun fun_app$m (A_tree_b_tree_fun$ A_tree$) B_tree$)
(declare-fun fun_app$n (A_b_fun_b_fun_a_fun$ A_b_fun_b_fun$) A$)
(declare-fun fun_app$o (B_b_fun_a_b_fun_a_b_fun_fun_fun$ B_b_fun$) A_b_fun_a_b_fun_fun$)
(declare-fun fun_app$p (A_b_fun_a_a_fun_a_b_fun_fun_fun$ A_b_fun$) A_a_fun_a_b_fun_fun$)
(declare-fun fun_app$q (B_tree_bool_fun$ B_tree$) Bool)
(declare-fun fun_app$r (B_tree_b_tree_bool_fun_fun$ B_tree$) B_tree_bool_fun$)
(declare-fun fun_app$s (A_b_fun_tree_bool_fun$ A_b_fun_tree$) Bool)
(declare-fun fun_app$t (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$ A_b_fun_tree$) A_b_fun_tree_bool_fun$)
(declare-fun fun_app$u (A_tree_bool_fun$ A_tree$) Bool)
(declare-fun fun_app$v (A_tree_a_tree_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun fun_app$w (B_a_fun_b_b_fun_fun$ B_a_fun$) B_b_fun$)
(declare-fun fun_app$x (A_b_fun_b_a_fun_b_b_fun_fun_fun$ A_b_fun$) B_a_fun_b_b_fun_fun$)
(declare-fun fun_app$y (A_b_fun_a_a_fun_fun$ A_b_fun$) A_a_fun$)
(declare-fun fun_app$z (B_a_fun_a_b_fun_a_a_fun_fun_fun$ B_a_fun$) A_b_fun_a_a_fun_fun$)
(declare-fun map_tree$ (A_b_fun_a_b_fun_fun$ A_b_fun_tree$) A_b_fun_tree$)
(declare-fun rel_tree$ (B_b_bool_fun_fun$ B_tree$) B_tree_bool_fun$)
(declare-fun set_tree$ (B_tree$) B_set$)
(declare-fun ap_tree$aa (B_a_b_fun_fun_b_b_fun_fun_tree$ B_a_b_fun_fun_tree$) B_b_fun_tree$)
(declare-fun ap_tree$ab (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$ A_b_fun_b_fun_tree$) B_a_b_fun_fun_b_b_fun_fun_tree$)
(declare-fun fun_app$aa (B_b_fun_b_b_fun_fun$ B_b_fun$) B_b_fun$)
(declare-fun fun_app$ab (B_b_fun_b_b_fun_b_b_fun_fun_fun$ B_b_fun$) B_b_fun_b_b_fun_fun$)
(declare-fun fun_app$ac (A_a_fun_a_a_fun_fun$ A_a_fun$) A_a_fun$)
(declare-fun fun_app$ad (A_a_fun_a_a_fun_a_a_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_fun_fun$)
(declare-fun fun_app$ae (A_b_tree_fun_a_b_tree_fun_fun$ A_b_tree_fun$) A_b_tree_fun$)
(declare-fun fun_app$af (A_a_fun_a_b_tree_fun_fun$ A_a_fun$) A_b_tree_fun$)
(declare-fun fun_app$ag (A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_b_tree_fun$) A_a_fun_a_b_tree_fun_fun$)
(declare-fun fun_app$ah (A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$ A_bool_fun$) A_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun$)
(declare-fun fun_app$ai (A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun$)
(declare-fun fun_app$aj (A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$ A_b_tree_fun$) A_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ak (A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$al (A_a_tree_fun_a_b_tree_fun_fun$ A_a_tree_fun$) A_b_tree_fun$)
(declare-fun fun_app$am (A_a_fun_a_a_tree_fun_fun$ A_a_fun$) A_a_tree_fun$)
(declare-fun fun_app$an (A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$ao (A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun fun_app$ap (A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$ A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun$)
(declare-fun fun_app$aq (A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$ A_a_tree_fun$) A_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun$)
(declare-fun fun_app$ar (A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$ A_bool_fun$) A_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun$)
(declare-fun fun_app$as (A_bool_fun$ A$) Bool)
(declare-fun fun_app$at (B_bool_fun$ B$) Bool)
(declare-fun fun_app$au (A_b_fun_bool_fun$ A_b_fun$) Bool)
(declare-fun fun_app$av (A_b_tree_fun$ A$) B_tree$)
(declare-fun fun_app$aw (A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$ A_a_fun$) A_a_fun_a_b_tree_fun_fun$)
(declare-fun fun_app$ax (A_a_tree_fun$ A$) A_tree$)
(declare-fun fun_app$ay (A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$ A_a_fun$) A_a_fun_a_a_tree_fun_fun$)
(declare-fun fun_app$az (B_b_tree_bool_fun_fun$ B$) B_tree_bool_fun$)
(declare-fun fun_app$ba (A_b_fun_a_b_fun_tree_bool_fun_fun$ A_b_fun$) A_b_fun_tree_bool_fun$)
(declare-fun fun_app$bb (A_a_tree_bool_fun_fun$ A$) A_tree_bool_fun$)
(declare-fun fun_app$bc (B_b_bool_fun_fun$ B$) B_bool_fun$)
(declare-fun fun_app$bd (B_tree_a_b_fun_tree_bool_fun_fun$ B_tree$) A_b_fun_tree_bool_fun$)
(declare-fun fun_app$be (B_a_b_fun_bool_fun_fun$ B$) A_b_fun_bool_fun$)
(declare-fun fun_app$bf (B_tree_a_tree_bool_fun_fun$ B_tree$) A_tree_bool_fun$)
(declare-fun fun_app$bg (B_a_bool_fun_fun$ B$) A_bool_fun$)
(declare-fun fun_app$bh (A_b_fun_tree_b_tree_bool_fun_fun$ A_b_fun_tree$) B_tree_bool_fun$)
(declare-fun fun_app$bi (A_b_fun_b_bool_fun_fun$ A_b_fun$) B_bool_fun$)
(declare-fun fun_app$bj (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun$) A_b_fun_bool_fun$)
(declare-fun fun_app$bk (A_b_fun_tree_a_tree_bool_fun_fun$ A_b_fun_tree$) A_tree_bool_fun$)
(declare-fun fun_app$bl (A_b_fun_a_bool_fun_fun$ A_b_fun$) A_bool_fun$)
(declare-fun fun_app$bm (A_tree_b_tree_bool_fun_fun$ A_tree$) B_tree_bool_fun$)
(declare-fun fun_app$bn (A_b_bool_fun_fun$ A$) B_bool_fun$)
(declare-fun fun_app$bo (A_tree_a_b_fun_tree_bool_fun_fun$ A_tree$) A_b_fun_tree_bool_fun$)
(declare-fun fun_app$bp (A_a_b_fun_bool_fun_fun$ A$) A_b_fun_bool_fun$)
(declare-fun fun_app$bq (A_a_bool_fun_fun$ A$) A_bool_fun$)
(declare-fun map_tree$a (A_a_fun_a_b_fun_fun$ A_a_fun_tree$) A_b_fun_tree$)
(declare-fun map_tree$b (B_b_fun$) B_tree_b_tree_fun$)
(declare-fun map_tree$c (A_a_fun$) A_tree_a_tree_fun$)
(declare-fun map_tree$d (A_b_fun_a_a_fun_a_b_fun_fun_fun$ A_b_fun_tree$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun map_tree$e (A_b_fun_b_fun$ A_b_fun_tree$) B_tree$)
(declare-fun map_tree$f (A_b_fun$) A_tree_b_tree_fun$)
(declare-fun map_tree$g (B_a_b_fun_fun$ B_tree$) A_b_fun_tree$)
(declare-fun map_tree$h (A_a_b_fun_fun$ A_tree$) A_b_fun_tree$)
(declare-fun map_tree$i (B_a_fun$ B_tree$) A_tree$)
(declare-fun map_tree$j (A_b_fun_a_fun$ A_b_fun_tree$) A_tree$)
(declare-fun map_tree$k (A_b_fun_b_fun_b_fun$ A_b_fun_b_fun_tree$) B_tree$)
(declare-fun map_tree$l (A_b_fun_b_fun_a_fun$ A_b_fun_b_fun_tree$) A_tree$)
(declare-fun pred_tree$ (A_bool_fun$ A_tree$) Bool)
(declare-fun pure_tree$ (A_a_fun$) A_a_fun_tree$)
(declare-fun rel_tree$a (B_a_b_fun_bool_fun_fun$ B_tree$) A_b_fun_tree_bool_fun$)
(declare-fun rel_tree$b (B_a_bool_fun_fun$ B_tree$) A_tree_bool_fun$)
(declare-fun rel_tree$c (A_b_fun_b_bool_fun_fun$ A_b_fun_tree$) B_tree_bool_fun$)
(declare-fun rel_tree$d (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun_tree$) A_b_fun_tree_bool_fun$)
(declare-fun rel_tree$e (A_b_fun_a_bool_fun_fun$ A_b_fun_tree$) A_tree_bool_fun$)
(declare-fun rel_tree$f (A_b_bool_fun_fun$ A_tree$) B_tree_bool_fun$)
(declare-fun rel_tree$g (A_a_b_fun_bool_fun_fun$ A_tree$) A_b_fun_tree_bool_fun$)
(declare-fun rel_tree$h (A_a_bool_fun_fun$ A_tree$) A_tree_bool_fun$)
(declare-fun set_tree$a (A_b_fun_tree$) A_b_fun_set$)
(declare-fun set_tree$b (A_tree$) A_set$)
(declare-fun corec_tree$ (A_b_fun$) A_bool_fun_a_b_tree_fun_a_a_fun_a_bool_fun_a_b_tree_fun_a_a_fun_a_b_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun pred_tree$a (B_bool_fun$ B_tree$) Bool)
(declare-fun pred_tree$b (A_b_fun_bool_fun$ A_b_fun_tree$) Bool)
(declare-fun pure_tree$a (A_b_fun$) A_b_fun_tree$)
(declare-fun pure_tree$b (B$) B_tree$)
(declare-fun pure_tree$c (A$) A_tree$)
(declare-fun pure_tree$d (B_b_fun$) B_b_fun_tree$)
(declare-fun pure_tree$e (B_a_fun$) B_a_fun_tree$)
(declare-fun pure_tree$f (A_b_fun_a_fun$) A_b_fun_a_fun_tree$)
(declare-fun pure_tree$g (B_a_b_fun_fun$) B_a_b_fun_fun_tree$)
(declare-fun pure_tree$h (A_a_b_fun_fun$) A_a_b_fun_fun_tree$)
(declare-fun pure_tree$i (A_b_fun_b_fun$) A_b_fun_b_fun_tree$)
(declare-fun pure_tree$j (A_a_fun_a_b_fun_fun$) A_a_fun_a_b_fun_fun_tree$)
(declare-fun pure_tree$k (A_b_fun_b_fun_b_fun$) A_b_fun_b_fun_b_fun_tree$)
(declare-fun pure_tree$l (A_b_fun_a_b_fun_fun$) A_b_fun_a_b_fun_fun_tree$)
(declare-fun pure_tree$m (A_b_fun_a_a_fun_a_b_fun_fun_fun$) A_b_fun_a_a_fun_a_b_fun_fun_fun_tree$)
(declare-fun pure_tree$n (B_b_fun_a_b_fun_a_b_fun_fun_fun$) B_b_fun_a_b_fun_a_b_fun_fun_fun_tree$)
(declare-fun pure_tree$o (A_b_fun_b_a_fun_b_b_fun_fun_fun$) A_b_fun_b_a_fun_b_b_fun_fun_fun_tree$)
(declare-fun pure_tree$p (B_b_fun_b_b_fun_b_b_fun_fun_fun$) B_b_fun_b_b_fun_b_b_fun_fun_fun_tree$)
(declare-fun pure_tree$q (B_a_fun_a_b_fun_a_a_fun_fun_fun$) B_a_fun_a_b_fun_a_a_fun_fun_fun_tree$)
(declare-fun pure_tree$r (A_a_fun_a_a_fun_a_a_fun_fun_fun$) A_a_fun_a_a_fun_a_a_fun_fun_fun_tree$)
(declare-fun pure_tree$s (A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun$) A_b_fun_b_fun_a_a_b_fun_fun_a_b_fun_fun_fun_tree$)
(declare-fun pure_tree$t (A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun$) A_b_fun_a_b_fun_a_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun pure_tree$u (B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun$) B_b_fun_a_b_fun_b_fun_a_b_fun_b_fun_fun_fun_tree$)
(declare-fun pure_tree$v (A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun$) A_b_fun_b_fun_b_a_b_fun_fun_b_b_fun_fun_fun_tree$)
(declare-fun corec_tree$a (A_a_fun$) A_bool_fun_a_a_tree_fun_a_a_fun_a_bool_fun_a_a_tree_fun_a_a_fun_a_a_tree_fun_fun_fun_fun_fun_fun_fun$)
(declare-fun unfold_tree$ (A_b_fun$) A_a_fun_a_a_fun_a_b_tree_fun_fun_fun$)
(declare-fun unfold_tree$a (A_a_fun$) A_a_fun_a_a_fun_a_a_tree_fun_fun_fun$)
(declare-fun ?v2!0 (A_a_fun_a_b_fun_fun_tree$ A_a_fun_a_b_fun_fun_tree$) A_a_fun$)
(declare-fun ?v2!1 (A_b_fun_a_b_fun_fun_tree$ A_b_fun_a_b_fun_fun_tree$) A_b_fun$)
(declare-fun ?v2!2 (A_b_fun_b_fun_tree$ A_b_fun_b_fun_tree$) A_b_fun$)
(declare-fun ?v2!3 (B_b_fun_tree$ B_b_fun_tree$) B$)
(declare-fun ?v2!4 (A_a_fun_tree$ A_a_fun_tree$) A$)
(declare-fun ?v2!5 (A_b_fun_tree$ A_b_fun_tree$) A$)
(declare-fun ?v3!6 (A_tree$) A_tree$)
(declare-fun ?v2!7 (A_tree$) A_tree$)
(declare-fun ?v1!8 (A_tree$) A$)
(declare-fun ?v1!11 (B_tree$) B$)
(declare-fun ?v3!9 (B_tree$) B_tree$)
(declare-fun ?v2!10 (B_tree$) B_tree$)
(declare-fun ?v2!13 (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun ?v1!14 (A_b_fun_tree$) A_b_fun$)
(declare-fun ?v3!12 (A_b_fun_tree$) A_b_fun_tree$)
(declare-fun ?v4!15 (B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v3!16 (B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!17 (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!18 (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!19 (A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!20 (A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!22 (B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!21 (B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v3!24 (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!23 (A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!26 (A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v4!25 (A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!31 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v4!28 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v3!29 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v3!27 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!30 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!35 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!34 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v3!32 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!33 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!36 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v3!41 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v4!40 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v4!38 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!37 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!39 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v4!43 (B_b_bool_fun_fun$ B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v5!42 (B_b_bool_fun_fun$ B_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v5!44 (B_a_b_fun_bool_fun_fun$ B_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!45 (B_a_b_fun_bool_fun_fun$ B_tree_a_b_fun_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!47 (B_a_bool_fun_fun$ B_tree_a_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v5!46 (B_a_bool_fun_fun$ B_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v5!48 (A_b_fun_b_bool_fun_fun$ A_b_fun_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!49 (A_b_fun_b_bool_fun_fun$ A_b_fun_tree_b_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v5!50 (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!51 (A_b_fun_a_b_fun_bool_fun_fun$ A_b_fun_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v5!52 (A_b_fun_a_bool_fun_fun$ A_b_fun_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v4!53 (A_b_fun_a_bool_fun_fun$ A_b_fun_tree_a_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!55 (A_b_bool_fun_fun$ A_tree_b_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v5!54 (A_b_bool_fun_fun$ A_tree_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!57 (A_a_b_fun_bool_fun_fun$ A_tree_a_b_fun_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v5!56 (A_a_b_fun_bool_fun_fun$ A_tree_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!59 (A_a_bool_fun_fun$ A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v5!58 (A_a_bool_fun_fun$ A_tree_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v5!63 (A_tree$ A_tree$ A_a_bool_fun_fun$) A_tree$)
(declare-fun ?v8!60 (A_tree$ A_tree$ A_a_bool_fun_fun$) A_tree$)
(declare-fun ?v6!62 (A_tree$ A_tree$ A_a_bool_fun_fun$) A$)
(declare-fun ?v7!61 (A_tree$ A_tree$ A_a_bool_fun_fun$) A_tree$)
(declare-fun ?v4!64 (A_tree$ A_tree$ A_a_bool_fun_fun$) A_tree$)
(declare-fun ?v3!65 (A_tree$ A_tree$ A_a_bool_fun_fun$) A$)
(declare-fun ?v5!69 (B_tree$ A_tree$ A_b_bool_fun_fun$) A_tree$)
(declare-fun ?v4!70 (B_tree$ A_tree$ A_b_bool_fun_fun$) A_tree$)
(declare-fun ?v7!67 (B_tree$ A_tree$ A_b_bool_fun_fun$) B_tree$)
(declare-fun ?v3!71 (B_tree$ A_tree$ A_b_bool_fun_fun$) A$)
(declare-fun ?v8!66 (B_tree$ A_tree$ A_b_bool_fun_fun$) B_tree$)
(declare-fun ?v6!68 (B_tree$ A_tree$ A_b_bool_fun_fun$) B$)
(declare-fun ?v3!77 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A$)
(declare-fun ?v7!73 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v6!74 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A_b_fun$)
(declare-fun ?v8!72 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v5!75 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A_tree$)
(declare-fun ?v4!76 (A_b_fun_tree$ A_tree$ A_a_b_fun_bool_fun_fun$) A_tree$)
(declare-fun ?v4!82 (A_tree$ B_tree$ B_a_bool_fun_fun$) B_tree$)
(declare-fun ?v8!78 (A_tree$ B_tree$ B_a_bool_fun_fun$) A_tree$)
(declare-fun ?v6!80 (A_tree$ B_tree$ B_a_bool_fun_fun$) A$)
(declare-fun ?v3!83 (A_tree$ B_tree$ B_a_bool_fun_fun$) B$)
(declare-fun ?v7!79 (A_tree$ B_tree$ B_a_bool_fun_fun$) A_tree$)
(declare-fun ?v5!81 (A_tree$ B_tree$ B_a_bool_fun_fun$) B_tree$)
(declare-fun ?v4!88 (B_tree$ B_tree$ B_b_bool_fun_fun$) B_tree$)
(declare-fun ?v6!86 (B_tree$ B_tree$ B_b_bool_fun_fun$) B$)
(declare-fun ?v7!85 (B_tree$ B_tree$ B_b_bool_fun_fun$) B_tree$)
(declare-fun ?v8!84 (B_tree$ B_tree$ B_b_bool_fun_fun$) B_tree$)
(declare-fun ?v3!89 (B_tree$ B_tree$ B_b_bool_fun_fun$) B$)
(declare-fun ?v5!87 (B_tree$ B_tree$ B_b_bool_fun_fun$) B_tree$)
(declare-fun ?v8!90 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!95 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) B$)
(declare-fun ?v7!91 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v6!92 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) A_b_fun$)
(declare-fun ?v4!94 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) B_tree$)
(declare-fun ?v5!93 (A_b_fun_tree$ B_tree$ B_a_b_fun_bool_fun_fun$) B_tree$)
(declare-fun ?v7!97 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A_tree$)
(declare-fun ?v6!98 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A$)
(declare-fun ?v5!99 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v8!96 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A_tree$)
(declare-fun ?v4!100 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!101 (A_tree$ A_b_fun_tree$ A_b_fun_a_bool_fun_fun$) A_b_fun$)
(declare-fun ?v7!103 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) B_tree$)
(declare-fun ?v4!106 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!107 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) A_b_fun$)
(declare-fun ?v5!105 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v6!104 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) B$)
(declare-fun ?v8!102 (B_tree$ A_b_fun_tree$ A_b_fun_b_bool_fun_fun$) B_tree$)
(declare-fun ?v6!110 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun$)
(declare-fun ?v4!112 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v5!111 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v8!108 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!113 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun$)
(declare-fun ?v7!109 (A_b_fun_tree$ A_b_fun_tree$ A_b_fun_a_b_fun_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v4!115 (A_b_fun$ A_b_fun$ A_tree$ A_tree$) A$)
(declare-fun ?v5!114 (A_b_fun$ A_b_fun$ A_tree$ A_tree$) A$)
(declare-fun ?v3!116 (A_b_fun$ A_b_fun$ A_tree$) A$)
(declare-fun ?v4!117 (A_b_fun$ A_b_fun$ A_tree$) A$)
(declare-fun ?v5!122 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!120 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v5!118 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v4!127 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v6!125 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v4!123 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!124 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v6!121 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v4!119 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!128 (A_a_tree_bool_fun_fun$) A$)
(declare-fun ?v5!126 (A_a_tree_bool_fun_fun$) A_tree$)
(declare-fun ?v3!135 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v5!137 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v5!133 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v3!139 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v6!132 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v4!130 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!138 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v3!131 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v6!136 (B_b_tree_bool_fun_fun$) B$)
(declare-fun ?v5!129 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!134 (B_b_tree_bool_fun_fun$) B_tree$)
(declare-fun ?v4!141 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!150 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v5!140 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!142 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v4!145 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v3!146 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v4!149 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v5!144 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v6!143 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v6!147 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun$)
(declare-fun ?v5!148 (A_b_fun_a_b_fun_tree_bool_fun_fun$) A_b_fun_tree$)
(declare-fun ?v2!155 (A_tree$ A$) A$)
(declare-fun ?v4!156 (A_tree$ A$) A_tree$)
(declare-fun ?v3!151 (A_tree$ A$) A_tree$)
(declare-fun ?v2!158 (A_tree$ A$) A$)
(declare-fun ?v4!153 (A_tree$ A$) A_tree$)
(declare-fun ?v2!152 (A_tree$ A$) A_tree$)
(declare-fun ?v3!154 (A_tree$ A$) A_tree$)
(declare-fun ?v3!157 (A_tree$ A$) A_tree$)
(declare-fun ?v3!159 (B_tree$ B$) B_tree$)
(declare-fun ?v2!160 (B_tree$ B$) B_tree$)
(declare-fun ?v4!164 (B_tree$ B$) B_tree$)
(declare-fun ?v3!165 (B_tree$ B$) B_tree$)
(declare-fun ?v3!162 (B_tree$ B$) B_tree$)
(declare-fun ?v4!161 (B_tree$ B$) B_tree$)
(declare-fun ?v2!163 (B_tree$ B$) B$)
(declare-fun ?v2!166 (B_tree$ B$) B$)
(declare-fun ?v4!169 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(declare-fun ?v2!171 (A_b_fun_tree$ A_b_fun$) A_b_fun$)
(declare-fun ?v2!174 (A_b_fun_tree$ A_b_fun$) A_b_fun$)
(declare-fun ?v3!167 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(declare-fun ?v3!173 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(declare-fun ?v3!170 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(declare-fun ?v4!172 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(declare-fun ?v2!168 (A_b_fun_tree$ A_b_fun$) A_b_fun_tree$)
(assert (! (forall ((?v0py0 A$)(?v1py0 A_b_fun$)) (! (= (fun_app$ (uu$ ?v0py0) ?v1py0) (fun_app$a ?v1py0 ?v0py0)) :pattern ((fun_app$ (uu$ ?v0py0) ?v1py0)) )) :named A0))
(assert (! (not (= f$ g$)) :named A1))
(assert (! (forall ((?v0py1 A_tree$)) (! (= (ap_tree$ f$ ?v0py1) (ap_tree$ g$ ?v0py1)) :pattern ((ap_tree$ f$ ?v0py1)) )) :named A2))
(assert (! (forall ((?v0py2 A_a_fun_a_b_fun_fun_tree$)(?v1py1 A_a_fun_a_b_fun_fun_tree$)) (! (or (not (= (ap_tree$a ?v0py2 (pure_tree$ (?v2!0 ?v1py1 ?v0py2))) (ap_tree$a ?v1py1 (pure_tree$ (?v2!0 ?v1py1 ?v0py2))))) (= ?v0py2 ?v1py1)) :pattern ((?v2!0 ?v1py1 ?v0py2)) )) :named A3))
(assert (! (forall ((?v0py3 A_b_fun_a_b_fun_fun_tree$)(?v1py2 A_b_fun_a_b_fun_fun_tree$)) (! (or (not (= (ap_tree$b ?v0py3 (pure_tree$a (?v2!1 ?v1py2 ?v0py3))) (ap_tree$b ?v1py2 (pure_tree$a (?v2!1 ?v1py2 ?v0py3))))) (= ?v0py3 ?v1py2)) :pattern ((?v2!1 ?v1py2 ?v0py3)) )) :named A4))
(assert (! (forall ((?v0py4 A_b_fun_b_fun_tree$)(?v1py3 A_b_fun_b_fun_tree$)) (! (or (not (= (ap_tree$c ?v0py4 (pure_tree$a (?v2!2 ?v1py3 ?v0py4))) (ap_tree$c ?v1py3 (pure_tree$a (?v2!2 ?v1py3 ?v0py4))))) (= ?v0py4 ?v1py3)) :pattern ((?v2!2 ?v1py3 ?v0py4)) )) :named A5))
(assert (! (forall ((?v0py5 B_b_fun_tree$)(?v1py4 B_b_fun_tree$)) (! (or (not (= (ap_tree$d ?v0py5 (pure_tree$b (?v2!3 ?v1py4 ?v0py5))) (ap_tree$d ?v1py4 (pure_tree$b (?v2!3 ?v1py4 ?v0py5))))) (= ?v0py5 ?v1py4)) :pattern ((?v2!3 ?v1py4 ?v0py5)) )) :named A6))
(assert (! (forall ((?v0py6 A_a_fun_tree$)(?v1py5 A_a_fun_tree$)) (! (or (not (= (ap_tree$e ?v0py6 (pure_tree$c (?v2!4 ?v1py5 ?v0py6))) (ap_tree$e ?v1py5 (pure_tree$c (?v2!4 ?v1py5 ?v0py6))))) (= ?v0py6 ?v1py5)) :pattern ((?v2!4 ?v1py5 ?v0py6)) )) :named A7))
(assert (! (forall ((?v0py7 A_b_fun_tree$)(?v1py6 A_b_fun_tree$)) (! (or (not (= (ap_tree$ ?v0py7 (pure_tree$c (?v2!5 ?v1py6 ?v0py7))) (ap_tree$ ?v1py6 (pure_tree$c (?v2!5 ?v1py6 ?v0py7))))) (= ?v0py7 ?v1py6)) :pattern ((?v2!5 ?v1py6 ?v0py7)) )) :named A8))
(assert (! (forall ((?v0py8 A_b_fun$)(?v1py7 A$)) (! (= (ap_tree$ (pure_tree$a ?v0py8) (pure_tree$c ?v1py7)) (pure_tree$b (fun_app$a ?v0py8 ?v1py7))) :pattern ((ap_tree$ (pure_tree$a ?v0py8) (pure_tree$c ?v1py7))) :pattern ((fun_app$a ?v0py8 ?v1py7)) )) :named A9))
(assert (! (forall ((?v0py9 B_b_fun$)(?v1py8 B$)) (! (= (ap_tree$d (pure_tree$d ?v0py9) (pure_tree$b ?v1py8)) (pure_tree$b (fun_app$b ?v0py9 ?v1py8))) :pattern ((ap_tree$d (pure_tree$d ?v0py9) (pure_tree$b ?v1py8))) :pattern ((fun_app$b ?v0py9 ?v1py8)) )) :named A10))
(assert (! (forall ((?v0py10 B_a_fun$)(?v1py9 B$)) (! (= (ap_tree$f (pure_tree$e ?v0py10) (pure_tree$b ?v1py9)) (pure_tree$c (fun_app$c ?v0py10 ?v1py9))) :pattern ((ap_tree$f (pure_tree$e ?v0py10) (pure_tree$b ?v1py9))) :pattern ((fun_app$c ?v0py10 ?v1py9)) )) :named A11))
(assert (! (forall ((?v0py11 A_a_fun$)(?v1py10 A$)) (! (= (ap_tree$e (pure_tree$ ?v0py11) (pure_tree$c ?v1py10)) (pure_tree$c (fun_app$d ?v0py11 ?v1py10))) :pattern ((ap_tree$e (pure_tree$ ?v0py11) (pure_tree$c ?v1py10))) :pattern ((fun_app$d ?v0py11 ?v1py10)) )) :named A12))
(assert (! (forall ((?v0py12 A_b_fun_a_fun$)(?v1py11 A_b_fun$)) (! (= (ap_tree$g (pure_tree$f ?v0py12) (pure_tree$a ?v1py11)) (pure_tree$c (fun_app$e ?v0py12 ?v1py11))) :pattern ((ap_tree$g (pure_tree$f ?v0py12) (pure_tree$a ?v1py11))) :pattern ((fun_app$e ?v0py12 ?v1py11)) )) :named A13))
(assert (! (forall ((?v0py13 B_a_b_fun_fun$)(?v1py12 B$)) (! (= (ap_tree$h (pure_tree$g ?v0py13) (pure_tree$b ?v1py12)) (pure_tree$a (fun_app$f ?v0py13 ?v1py12))) :pattern ((ap_tree$h (pure_tree$g ?v0py13) (pure_tree$b ?v1py12))) :pattern ((fun_app$f ?v0py13 ?v1py12)) )) :named A14))
(assert (! (forall ((?v0py14 A_a_b_fun_fun$)(?v1py13 A$)) (! (= (ap_tree$i (pure_tree$h ?v0py14) (pure_tree$c ?v1py13)) (pure_tree$a (fun_app$g ?v0py14 ?v1py13))) :pattern ((ap_tree$i (pure_tree$h ?v0py14) (pure_tree$c ?v1py13))) :pattern ((fun_app$g ?v0py14 ?v1py13)) )) :named A15))
(assert (! (forall ((?v0py15 A_b_fun_b_fun$)(?v1py14 A_b_fun$)) (! (= (ap_tree$c (pure_tree$i ?v0py15) (pure_tree$a ?v1py14)) (pure_tree$b (fun_app$ ?v0py15 ?v1py14))) :pattern ((ap_tree$c (pure_tree$i ?v0py15) (pure_tree$a ?v1py14))) :pattern ((fun_app$ ?v0py15 ?v1py14)) )) :named A16))
(assert (! (forall ((?v0py16 A_a_fun_a_b_fun_fun$)(?v1py15 A_a_fun$)) (! (= (ap_tree$a (pure_tree$j ?v0py16) (pure_tree$ ?v1py15)) (pure_tree$a (fun_app$h ?v0py16 ?v1py15))) :pattern ((ap_tree$a (pure_tree$j ?v0py16) (pure_tree$ ?v1py15))) :pattern ((fun_app$h ?v0py16 ?v1py15)) )) :named A17))
(assert (! (forall ((?v0py17 A_b_fun_b_fun_b_fun$)(?v1py16 A_b_fun_b_fun$)) (! (= (ap_tree$j (pure_tree$k ?v0py17) (pure_tree$i ?v1py16)) (pure_tree$b (fun_app$i ?v0py17 ?v1py16))) :pattern ((ap_tree$j (pure_tree$k ?v0py17) (pure_tree$i ?v1py16))) :pattern ((fun_app$i ?v0py17 ?v1py16)) )) :named A18))
(assert (! (forall ((?v0py18 A_b_fun$)(?v1py17 A$)(?v2py0 A_tree$)(?v3py0 A_tree$)) (! (= (ap_tree$ (pure_tree$a ?v0py18) (node$a ?v1py17 ?v2py0 ?v3py0)) (node$b (fun_app$a ?v0py18 ?v1py17) (ap_tree$ (pure_tree$a ?v0py18) ?v2py0) (ap_tree$ (pure_tree$a ?v0py18) ?v3py0))) :pattern ((ap_tree$ (pure_tree$a ?v0py18) (node$a ?v1py17 ?v2py0 ?v3py0))) :pattern ((node$b (fun_app$a ?v0py18 ?v1py17) (ap_tree$ (pure_tree$a ?v0py18) ?v2py0) (ap_tree$ (pure_tree$a ?v0py18) ?v3py0))) )) :named A19))
(assert (! (forall ((?v0py19 A_a_fun$)(?v1py18 A$)(?v2py1 A_tree$)(?v3py1 A_tree$)) (! (= (ap_tree$e (pure_tree$ ?v0py19) (node$a ?v1py18 ?v2py1 ?v3py1)) (node$a (fun_app$d ?v0py19 ?v1py18) (ap_tree$e (pure_tree$ ?v0py19) ?v2py1) (ap_tree$e (pure_tree$ ?v0py19) ?v3py1))) :pattern ((ap_tree$e (pure_tree$ ?v0py19) (node$a ?v1py18 ?v2py1 ?v3py1))) :pattern ((node$a (fun_app$d ?v0py19 ?v1py18) (ap_tree$e (pure_tree$ ?v0py19) ?v2py1) (ap_tree$e (pure_tree$ ?v0py19) ?v3py1))) )) :named A20))
(assert (! (forall ((?v0py20 B_a_fun$)(?v1py19 B$)(?v2py2 B_tree$)(?v3py2 B_tree$)) (! (= (ap_tree$f (pure_tree$e ?v0py20) (node$b ?v1py19 ?v2py2 ?v3py2)) (node$a (fun_app$c ?v0py20 ?v1py19) (ap_tree$f (pure_tree$e ?v0py20) ?v2py2) (ap_tree$f (pure_tree$e ?v0py20) ?v3py2))) :pattern ((ap_tree$f (pure_tree$e ?v0py20) (node$b ?v1py19 ?v2py2 ?v3py2))) :pattern ((node$a (fun_app$c ?v0py20 ?v1py19) (ap_tree$f (pure_tree$e ?v0py20) ?v2py2) (ap_tree$f (pure_tree$e ?v0py20) ?v3py2))) )) :named A21))
(assert (! (forall ((?v0py21 B_b_fun$)(?v1py20 B$)(?v2py3 B_tree$)(?v3py3 B_tree$)) (! (= (ap_tree$d (pure_tree$d ?v0py21) (node$b ?v1py20 ?v2py3 ?v3py3)) (node$b (fun_app$b ?v0py21 ?v1py20) (ap_tree$d (pure_tree$d ?v0py21) ?v2py3) (ap_tree$d (pure_tree$d ?v0py21) ?v3py3))) :pattern ((ap_tree$d (pure_tree$d ?v0py21) (node$b ?v1py20 ?v2py3 ?v3py3))) :pattern ((node$b (fun_app$b ?v0py21 ?v1py20) (ap_tree$d (pure_tree$d ?v0py21) ?v2py3) (ap_tree$d (pure_tree$d ?v0py21) ?v3py3))) )) :named A22))
(assert (! (forall ((?v0py22 A_a_b_fun_fun$)(?v1py21 A$)(?v2py4 A_tree$)(?v3py4 A_tree$)) (! (= (ap_tree$i (pure_tree$h ?v0py22) (node$a ?v1py21 ?v2py4 ?v3py4)) (node$ (fun_app$g ?v0py22 ?v1py21) (ap_tree$i (pure_tree$h ?v0py22) ?v2py4) (ap_tree$i (pure_tree$h ?v0py22) ?v3py4))) :pattern ((ap_tree$i (pure_tree$h ?v0py22) (node$a ?v1py21 ?v2py4 ?v3py4))) :pattern ((node$ (fun_app$g ?v0py22 ?v1py21) (ap_tree$i (pure_tree$h ?v0py22) ?v2py4) (ap_tree$i (pure_tree$h ?v0py22) ?v3py4))) )) :named A23))
(assert (! (forall ((?v0py23 B_a_b_fun_fun$)(?v1py22 B$)(?v2py5 B_tree$)(?v3py5 B_tree$)) (! (= (ap_tree$h (pure_tree$g ?v0py23) (node$b ?v1py22 ?v2py5 ?v3py5)) (node$ (fun_app$f ?v0py23 ?v1py22) (ap_tree$h (pure_tree$g ?v0py23) ?v2py5) (ap_tree$h (pure_tree$g ?v0py23) ?v3py5))) :pattern ((ap_tree$h (pure_tree$g ?v0py23) (node$b ?v1py22 ?v2py5 ?v3py5))) :pattern ((node$ (fun_app$f ?v0py23 ?v1py22) (ap_tree$h (pure_tree$g ?v0py23) ?v2py5) (ap_tree$h (pure_tree$g ?v0py23) ?v3py5))) )) :named A24))
(assert (! (forall ((?v0py24 A_b_fun_a_fun$)(?v1py23 A_b_fun$)(?v2py6 A_b_fun_tree$)(?v3py6 A_b_fun_tree$)) (! (= (ap_tree$g (pure_tree$f ?v0py24) (node$ ?v1py23 ?v2py6 ?v3py6)) (node$a (fun_app$e ?v0py24 ?v1py23) (ap_tree$g (pure_tree$f ?v0py24) ?v2py6) (ap_tree$g (pure_tree$f ?v0py24) ?v3py6))) :pattern ((ap_tree$g (pure_tree$f ?v0py24) (node$ ?v1py23 ?v2py6 ?v3py6))) :pattern ((node$a (fun_app$e ?v0py24 ?v1py23) (ap_tree$g (pure_tree$f ?v0py24) ?v2py6) (ap_tree$g (pure_tree$f ?v0py24) ?v3py6))) )) :named A25))
(assert (! (forall ((?v0py25 A_b_fun_b_fun$)(?v1py24 A_b_fun$)(?v2py7 A_b_fun_tree$)(?v3py7 A_b_fun_tree$)) (! (= (ap_tree$c (pure_tree$i ?v0py25) (node$ ?v1py24 ?v2py7 ?v3py7)) (node$b (fun_app$ ?v0py25 ?v1py24) (ap_tree$c (pure_tree$i ?v0py25) ?v2py7) (ap_tree$c (pure_tree$i ?v0py25) ?v3py7))) :pattern ((ap_tree$c (pure_tree$i ?v0py25) (node$ ?v1py24 ?v2py7 ?v3py7))) :pattern ((node$b (fun_app$ ?v0py25 ?v1py24) (ap_tree$c (pure_tree$i ?v0py25) ?v2py7) (ap_tree$c (pure_tree$i ?v0py25) ?v3py7))) )) :named A26))
(assert (! (forall ((?v0py26 A_a_fun_a_b_fun_fun$)(?v1py25 A_a_fun$)(?v2py8 A_a_fun_tree$)(?v3py8 A_a_fun_tree$)) (! (= (ap_tree$a (pure_tree$j ?v0py26) (node$d ?v1py25 ?v2py8 ?v3py8)) (node$ (fun_app$h ?v0py26 ?v1py25) (ap_tree$a (pure_tree$j ?v0py26) ?v2py8) (ap_tree$a (pure_tree$j ?v0py26) ?v3py8))) :pattern ((ap_tree$a (pure_tree$j ?v0py26) (node$d ?v1py25 ?v2py8 ?v3py8))) :pattern ((node$ (fun_app$h ?v0py26 ?v1py25) (ap_tree$a (pure_tree$j ?v0py26) ?v2py8) (ap_tree$a (pure_tree$j ?v0py26) ?v3py8))) )) :named A27))
(assert (! (forall ((?v0py27 A_b_fun_a_b_fun_fun$)(?v1py26 A_b_fun$)(?v2py9 A_b_fun_tree$)(?v3py9 A_b_fun_tree$)) (! (= (ap_tree$b (pure_tree$l ?v0py27) (node$ ?v1py26 ?v2py9 ?v3py9)) (node$ (fun_app$j ?v0py27 ?v1py26) (ap_tree$b (pure_tree$l ?v0py27) ?v2py9) (ap_tree$b (pure_tree$l ?v0py27) ?v3py9))) :pattern ((ap_tree$b (pure_tree$l ?v0py27) (node$ ?v1py26 ?v2py9 ?v3py9))) :pattern ((node$ (fun_app$j ?v0py27 ?v1py26) (ap_tree$b (pure_tree$l ?v0py27) ?v2py9) (ap_tree$b (pure_tree$l ?v0py27) ?v3py9))) )) :named A28))
(assert (! (forall ((?v0py28 A_a_fun_a_b_fun_fun$)(?v1py27 A_a_fun_a_b_fun_fun_tree$)(?v2py10 A_a_fun_a_b_fun_fun_tree$)(?v3py10 A_a_fun$)(?v4py0 A_a_fun_tree$)(?v5py0 A_a_fun_tree$)) (! (= (ap_tree$a (node$c ?v0py28 ?v1py27 ?v2py10) (node$d ?v3py10 ?v4py0 ?v5py0)) (node$ (fun_app$h ?v0py28 ?v3py10) (ap_tree$a ?v1py27 ?v4py0) (ap_tree$a ?v2py10 ?v5py0))) :pattern ((ap_tree$a (node$c ?v0py28 ?v1py27 ?v2py10) (node$d ?v3py10 ?v4py0 ?v5py0))) )) :named A29))
(assert (! (forall ((?v0py29 A_a_fun$)(?v1py28 A_a_fun_tree$)(?v2py11 A_a_fun_tree$)(?v3py11 A$)(?v4py1 A_tree$)(?v5py1 A_tree$)) (! (= (ap_tree$e (node$d ?v0py29 ?v1py28 ?v2py11) (node$a ?v3py11 ?v4py1 ?v5py1)) (node$a (fun_app$d ?v0py29 ?v3py11) (ap_tree$e ?v1py28 ?v4py1) (ap_tree$e ?v2py11 ?v5py1))) :pattern ((ap_tree$e (node$d ?v0py29 ?v1py28 ?v2py11) (node$a ?v3py11 ?v4py1 ?v5py1))) )) :named A30))
(assert (! (forall ((?v0py30 A_a_b_fun_fun$)(?v1py29 A_a_b_fun_fun_tree$)(?v2py12 A_a_b_fun_fun_tree$)(?v3py12 A$)(?v4py2 A_tree$)(?v5py2 A_tree$)) (! (= (ap_tree$i (node$k ?v0py30 ?v1py29 ?v2py12) (node$a ?v3py12 ?v4py2 ?v5py2)) (node$ (fun_app$g ?v0py30 ?v3py12) (ap_tree$i ?v1py29 ?v4py2) (ap_tree$i ?v2py12 ?v5py2))) :pattern ((ap_tree$i (node$k ?v0py30 ?v1py29 ?v2py12) (node$a ?v3py12 ?v4py2 ?v5py2))) )) :named A31))
(assert (! (forall ((?v0py31 B_a_fun$)(?v1py30 B_a_fun_tree$)(?v2py13 B_a_fun_tree$)(?v3py13 B$)(?v4py3 B_tree$)(?v5py3 B_tree$)) (! (= (ap_tree$f (node$h ?v0py31 ?v1py30 ?v2py13) (node$b ?v3py13 ?v4py3 ?v5py3)) (node$a (fun_app$c ?v0py31 ?v3py13) (ap_tree$f ?v1py30 ?v4py3) (ap_tree$f ?v2py13 ?v5py3))) :pattern ((ap_tree$f (node$h ?v0py31 ?v1py30 ?v2py13) (node$b ?v3py13 ?v4py3 ?v5py3))) )) :named A32))
(assert (! (forall ((?v0py32 B_b_fun$)(?v1py31 B_b_fun_tree$)(?v2py14 B_b_fun_tree$)(?v3py14 B$)(?v4py4 B_tree$)(?v5py4 B_tree$)) (! (= (ap_tree$d (node$g ?v0py32 ?v1py31 ?v2py14) (node$b ?v3py14 ?v4py4 ?v5py4)) (node$b (fun_app$b ?v0py32 ?v3py14) (ap_tree$d ?v1py31 ?v4py4) (ap_tree$d ?v2py14 ?v5py4))) :pattern ((ap_tree$d (node$g ?v0py32 ?v1py31 ?v2py14) (node$b ?v3py14 ?v4py4 ?v5py4))) )) :named A33))
(assert (! (forall ((?v0py33 B_a_b_fun_fun$)(?v1py32 B_a_b_fun_fun_tree$)(?v2py15 B_a_b_fun_fun_tree$)(?v3py15 B$)(?v4py5 B_tree$)(?v5py5 B_tree$)) (! (= (ap_tree$h (node$j ?v0py33 ?v1py32 ?v2py15) (node$b ?v3py15 ?v4py5 ?v5py5)) (node$ (fun_app$f ?v0py33 ?v3py15) (ap_tree$h ?v1py32 ?v4py5) (ap_tree$h ?v2py15 ?v5py5))) :pattern ((ap_tree$h (node$j ?v0py33 ?v1py32 ?v2py15) (node$b ?v3py15 ?v4py5 ?v5py5))) )) :named A34))
(assert (! (forall ((?v0py34 A_b_fun_a_fun$)(?v1py33 A_b_fun_a_fun_tree$)(?v2py16 A_b_fun_a_fun_tree$)(?v3py16 A_b_fun$)(?v4py6 A_b_fun_tree$)(?v5py6 A_b_fun_tree$)) (! (= (ap_tree$g (node$i ?v0py34 ?v1py33 ?v2py16) (node$ ?v3py16 ?v4py6 ?v5py6)) (node$a (fun_app$e ?v0py34 ?v3py16) (ap_tree$g ?v1py33 ?v4py6) (ap_tree$g ?v2py16 ?v5py6))) :pattern ((ap_tree$g (node$i ?v0py34 ?v1py33 ?v2py16) (node$ ?v3py16 ?v4py6 ?v5py6))) )) :named A35))
(assert (! (forall ((?v0py35 A_b_fun_b_fun$)(?v1py34 A_b_fun_b_fun_tree$)(?v2py17 A_b_fun_b_fun_tree$)(?v3py17 A_b_fun$)(?v4py7 A_b_fun_tree$)(?v5py7 A_b_fun_tree$)) (! (= (ap_tree$c (node$f ?v0py35 ?v1py34 ?v2py17) (node$ ?v3py17 ?v4py7 ?v5py7)) (node$b (fun_app$ ?v0py35 ?v3py17) (ap_tree$c ?v1py34 ?v4py7) (ap_tree$c ?v2py17 ?v5py7))) :pattern ((ap_tree$c (node$f ?v0py35 ?v1py34 ?v2py17) (node$ ?v3py17 ?v4py7 ?v5py7))) )) :named A36))
(assert (! (forall ((?v0py36 A_b_fun_a_b_fun_fun$)(?v1py35 A_b_fun_a_b_fun_fun_tree$)(?v2py18 A_b_fun_a_b_fun_fun_tree$)(?v3py18 A_b_fun$)(?v4py8 A_b_fun_tree$)(?v5py8 A_b_fun_tree$)) (! (= (ap_tree$b (node$e ?v0py36 ?v1py35 ?v2py18) (node$ ?v3py18 ?v4py8 ?v5py8)) (node$ (fun_app$j ?v0py36 ?v3py18) (ap_tree$b ?v1py35 ?v4py8) (ap_tree$b ?v2py18 ?v5py8))) :pattern ((ap_tree$b (node$e ?v0py36 ?v1py35 ?v2py18) (node$ ?v3py18 ?v4py8 ?v5py8))) )) :named A37))
(assert (! (forall ((?v0py37 A_b_fun$)(?v1py36 A_b_fun_tree$)(?v2py19 A_b_fun_tree$)(?v3py19 A$)(?v4py9 A_tree$)(?v5py9 A_tree$)) (! (= (ap_tree$ (node$ ?v0py37 ?v1py36 ?v2py19) (node$a ?v3py19 ?v4py9 ?v5py9)) (node$b (fun_app$a ?v0py37 ?v3py19) (ap_tree$ ?v1py36 ?v4py9) (ap_tree$ ?v2py19 ?v5py9))) :pattern ((ap_tree$ (node$ ?v0py37 ?v1py36 ?v2py19) (node$a ?v3py19 ?v4py9 ?v5py9))) )) :named A38))
(assert (! (forall ((?v0py38 A_b_fun_a_b_fun_fun$)(?v1py37 A_b_fun_tree$)) (! (= (ap_tree$b (pure_tree$l ?v0py38) ?v1py37) (map_tree$ ?v0py38 ?v1py37)) :pattern ((ap_tree$b (pure_tree$l ?v0py38) ?v1py37)) :pattern ((map_tree$ ?v0py38 ?v1py37)) )) :named A39))
(assert (! (forall ((?v0py39 A_a_fun_a_b_fun_fun$)(?v1py38 A_a_fun_tree$)) (! (= (ap_tree$a (pure_tree$j ?v0py39) ?v1py38) (map_tree$a ?v0py39 ?v1py38)) :pattern ((ap_tree$a (pure_tree$j ?v0py39) ?v1py38)) :pattern ((map_tree$a ?v0py39 ?v1py38)) )) :named A40))
(assert (! (forall ((?v0py40 B_b_fun$)(?v1py39 B_tree$)) (! (= (ap_tree$d (pure_tree$d ?v0py40) ?v1py39) (fun_app$k (map_tree$b ?v0py40) ?v1py39)) :pattern ((ap_tree$d (pure_tree$d ?v0py40) ?v1py39)) :pattern ((fun_app$k (map_tree$b ?v0py40) ?v1py39)) )) :named A41))
(assert (! (forall ((?v0py41 A_a_fun$)(?v1py40 A_tree$)) (! (= (ap_tree$e (pure_tree$ ?v0py41) ?v1py40) (fun_app$l (map_tree$c ?v0py41) ?v1py40)) :pattern ((ap_tree$e (pure_tree$ ?v0py41) ?v1py40)) :pattern ((fun_app$l (map_tree$c ?v0py41) ?v1py40)) )) :named A42))
(assert (! (forall ((?v0py42 A_b_fun_a_a_fun_a_b_fun_fun_fun$)(?v1py41 A_b_fun_tree$)) (! (= (ap_tree$k (pure_tree$m ?v0py42) ?v1py41) (map_tree$d ?v0py42 ?v1py41)) :pattern ((ap_tree$k (pure_tree$m ?v0py42) ?v1py41)) :pattern ((map_tree$d ?v0py42 ?v1py41)) )) :named A43))
(assert (! (forall ((?v0py43 A_b_fun_b_fun$)(?v1py42 A_b_fun_tree$)) (! (= (ap_tree$c (pure_tree$i ?v0py43) ?v1py42) (map_tree$e ?v0py43 ?v1py42)) :pattern ((ap_tree$c (pure_tree$i ?v0py43) ?v1py42)) :pattern ((map_tree$e ?v0py43 ?v1py42)) )) :named A44))
(assert (! (forall ((?v0py44 A_b_fun$)(?v1py43 A_tree$)) (! (= (ap_tree$ (pure_tree$a ?v0py44) ?v1py43) (fun_app$m (map_tree$f ?v0py44) ?v1py43)) :pattern ((ap_tree$ (pure_tree$a ?v0py44) ?v1py43)) :pattern ((fun_app$m (map_tree$f ?v0py44) ?v1py43)) )) :named A45))
(assert (! (forall ((?v0py45 B_b_fun_tree$)(?v1py44 B_tree$)) (! (= (root$a (ap_tree$d ?v0py45 ?v1py44)) (fun_app$b (root$b ?v0py45) (root$a ?v1py44))) :pattern ((ap_tree$d ?v0py45 ?v1py44)) :pattern ((fun_app$b (root$b ?v0py45) (root$a ?v1py44))) )) :named A46))
(assert (! (forall ((?v0py46 A_b_fun_b_fun_tree$)(?v1py45 A_b_fun_tree$)) (! (= (root$a (ap_tree$c ?v0py46 ?v1py45)) (fun_app$ (root$c ?v0py46) (root$d ?v1py45))) :pattern ((ap_tree$c ?v0py46 ?v1py45)) :pattern ((fun_app$ (root$c ?v0py46) (root$d ?v1py45))) )) :named A47))
(assert (! (forall ((?v0py47 A_a_fun_a_b_fun_fun_tree$)(?v1py46 A_a_fun_tree$)) (! (= (root$d (ap_tree$a ?v0py47 ?v1py46)) (fun_app$h (root$e ?v0py47) (root$f ?v1py46))) :pattern ((ap_tree$a ?v0py47 ?v1py46)) :pattern ((fun_app$h (root$e ?v0py47) (root$f ?v1py46))) )) :named A48))
(assert (! (forall ((?v0py48 B_a_b_fun_fun_tree$)(?v1py47 B_tree$)) (! (= (root$d (ap_tree$h ?v0py48 ?v1py47)) (fun_app$f (root$g ?v0py48) (root$a ?v1py47))) :pattern ((ap_tree$h ?v0py48 ?v1py47)) :pattern ((fun_app$f (root$g ?v0py48) (root$a ?v1py47))) )) :named A49))
(assert (! (forall ((?v0py49 A_b_fun_a_b_fun_fun_tree$)(?v1py48 A_b_fun_tree$)) (! (= (root$d (ap_tree$b ?v0py49 ?v1py48)) (fun_app$j (root$h ?v0py49) (root$d ?v1py48))) :pattern ((ap_tree$b ?v0py49 ?v1py48)) :pattern ((fun_app$j (root$h ?v0py49) (root$d ?v1py48))) )) :named A50))
(assert (! (forall ((?v0py50 A_a_b_fun_fun_tree$)(?v1py49 A_tree$)) (! (= (root$d (ap_tree$i ?v0py50 ?v1py49)) (fun_app$g (root$i ?v0py50) (root$ ?v1py49))) :pattern ((ap_tree$i ?v0py50 ?v1py49)) :pattern ((fun_app$g (root$i ?v0py50) (root$ ?v1py49))) )) :named A51))
(assert (! (forall ((?v0py51 B_a_fun_tree$)(?v1py50 B_tree$)) (! (= (root$ (ap_tree$f ?v0py51 ?v1py50)) (fun_app$c (root$j ?v0py51) (root$a ?v1py50))) :pattern ((ap_tree$f ?v0py51 ?v1py50)) :pattern ((fun_app$c (root$j ?v0py51) (root$a ?v1py50))) )) :named A52))
(assert (! (forall ((?v0py52 A_b_fun_a_fun_tree$)(?v1py51 A_b_fun_tree$)) (! (= (root$ (ap_tree$g ?v0py52 ?v1py51)) (fun_app$e (root$k ?v0py52) (root$d ?v1py51))) :pattern ((ap_tree$g ?v0py52 ?v1py51)) :pattern ((fun_app$e (root$k ?v0py52) (root$d ?v1py51))) )) :named A53))
(assert (! (forall ((?v0py53 A_a_fun_tree$)(?v1py52 A_tree$)) (! (= (root$ (ap_tree$e ?v0py53 ?v1py52)) (fun_app$d (root$f ?v0py53) (root$ ?v1py52))) :pattern ((ap_tree$e ?v0py53 ?v1py52)) :pattern ((fun_app$d (root$f ?v0py53) (root$ ?v1py52))) )) :named A54))
(assert (! (forall ((?v0py54 A_b_fun_tree$)(?v1py53 A_tree$)) (! (= (root$a (ap_tree$ ?v0py54 ?v1py53)) (fun_app$a (root$d ?v0py54) (root$ ?v1py53))) :pattern ((ap_tree$ ?v0py54 ?v1py53)) :pattern ((fun_app$a (root$d ?v0py54) (root$ ?v1py53))) )) :named A55))
(assert (! (forall ((?v0py55 B_b_fun_tree$)(?v1py54 B_tree$)) (! (= (left$a (ap_tree$d ?v0py55 ?v1py54)) (ap_tree$d (left$b ?v0py55) (left$a ?v1py54))) :pattern ((left$a (ap_tree$d ?v0py55 ?v1py54))) :pattern ((ap_tree$d (left$b ?v0py55) (left$a ?v1py54))) )) :named A56))
(assert (! (forall ((?v0py56 A_b_fun_b_fun_tree$)(?v1py55 A_b_fun_tree$)) (! (= (left$a (ap_tree$c ?v0py56 ?v1py55)) (ap_tree$c (left$c ?v0py56) (left$d ?v1py55))) :pattern ((left$a (ap_tree$c ?v0py56 ?v1py55))) :pattern ((ap_tree$c (left$c ?v0py56) (left$d ?v1py55))) )) :named A57))
(assert (! (forall ((?v0py57 A_a_fun_a_b_fun_fun_tree$)(?v1py56 A_a_fun_tree$)) (! (= (left$d (ap_tree$a ?v0py57 ?v1py56)) (ap_tree$a (left$e ?v0py57) (left$f ?v1py56))) :pattern ((left$d (ap_tree$a ?v0py57 ?v1py56))) :pattern ((ap_tree$a (left$e ?v0py57) (left$f ?v1py56))) )) :named A58))
(assert (! (forall ((?v0py58 B_a_b_fun_fun_tree$)(?v1py57 B_tree$)) (! (= (left$d (ap_tree$h ?v0py58 ?v1py57)) (ap_tree$h (left$g ?v0py58) (left$a ?v1py57))) :pattern ((left$d (ap_tree$h ?v0py58 ?v1py57))) :pattern ((ap_tree$h (left$g ?v0py58) (left$a ?v1py57))) )) :named A59))
(assert (! (forall ((?v0py59 A_b_fun_a_b_fun_fun_tree$)(?v1py58 A_b_fun_tree$)) (! (= (left$d (ap_tree$b ?v0py59 ?v1py58)) (ap_tree$b (left$h ?v0py59) (left$d ?v1py58))) :pattern ((left$d (ap_tree$b ?v0py59 ?v1py58))) :pattern ((ap_tree$b (left$h ?v0py59) (left$d ?v1py58))) )) :named A60))
(assert (! (forall ((?v0py60 A_a_b_fun_fun_tree$)(?v1py59 A_tree$)) (! (= (left$d (ap_tree$i ?v0py60 ?v1py59)) (ap_tree$i (left$i ?v0py60) (left$ ?v1py59))) :pattern ((left$d (ap_tree$i ?v0py60 ?v1py59))) :pattern ((ap_tree$i (left$i ?v0py60) (left$ ?v1py59))) )) :named A61))
(assert (! (forall ((?v0py61 B_a_fun_tree$)(?v1py60 B_tree$)) (! (= (left$ (ap_tree$f ?v0py61 ?v1py60)) (ap_tree$f (left$j ?v0py61) (left$a ?v1py60))) :pattern ((left$ (ap_tree$f ?v0py61 ?v1py60))) :pattern ((ap_tree$f (left$j ?v0py61) (left$a ?v1py60))) )) :named A62))
(assert (! (forall ((?v0py62 A_b_fun_a_fun_tree$)(?v1py61 A_b_fun_tree$)) (! (= (left$ (ap_tree$g ?v0py62 ?v1py61)) (ap_tree$g (left$k ?v0py62) (left$d ?v1py61))) :pattern ((left$ (ap_tree$g ?v0py62 ?v1py61))) :pattern ((ap_tree$g (left$k ?v0py62) (left$d ?v1py61))) )) :named A63))
(assert (! (forall ((?v0py63 A_a_fun_tree$)(?v1py62 A_tree$)) (! (= (left$ (ap_tree$e ?v0py63 ?v1py62)) (ap_tree$e (left$f ?v0py63) (left$ ?v1py62))) :pattern ((left$ (ap_tree$e ?v0py63 ?v1py62))) :pattern ((ap_tree$e (left$f ?v0py63) (left$ ?v1py62))) )) :named A64))
(assert (! (forall ((?v0py64 A_b_fun_tree$)(?v1py63 A_tree$)) (! (= (left$a (ap_tree$ ?v0py64 ?v1py63)) (ap_tree$ (left$d ?v0py64) (left$ ?v1py63))) :pattern ((left$a (ap_tree$ ?v0py64 ?v1py63))) :pattern ((ap_tree$ (left$d ?v0py64) (left$ ?v1py63))) )) :named A65))
(assert (! (forall ((?v0py65 B_b_fun_tree$)(?v1py64 B_tree$)) (! (= (right$a (ap_tree$d ?v0py65 ?v1py64)) (ap_tree$d (right$b ?v0py65) (right$a ?v1py64))) :pattern ((right$a (ap_tree$d ?v0py65 ?v1py64))) :pattern ((ap_tree$d (right$b ?v0py65) (right$a ?v1py64))) )) :named A66))
(assert (! (forall ((?v0py66 A_b_fun_b_fun_tree$)(?v1py65 A_b_fun_tree$)) (! (= (right$a (ap_tree$c ?v0py66 ?v1py65)) (ap_tree$c (right$c ?v0py66) (right$d ?v1py65))) :pattern ((right$a (ap_tree$c ?v0py66 ?v1py65))) :pattern ((ap_tree$c (right$c ?v0py66) (right$d ?v1py65))) )) :named A67))
(assert (! (forall ((?v0py67 A_a_fun_a_b_fun_fun_tree$)(?v1py66 A_a_fun_tree$)) (! (= (right$d (ap_tree$a ?v0py67 ?v1py66)) (ap_tree$a (right$e ?v0py67) (right$f ?v1py66))) :pattern ((right$d (ap_tree$a ?v0py67 ?v1py66))) :pattern ((ap_tree$a (right$e ?v0py67) (right$f ?v1py66))) )) :named A68))
(assert (! (forall ((?v0py68 B_a_b_fun_fun_tree$)(?v1py67 B_tree$)) (! (= (right$d (ap_tree$h ?v0py68 ?v1py67)) (ap_tree$h (right$g ?v0py68) (right$a ?v1py67))) :pattern ((right$d (ap_tree$h ?v0py68 ?v1py67))) :pattern ((ap_tree$h (right$g ?v0py68) (right$a ?v1py67))) )) :named A69))
(assert (! (forall ((?v0py69 A_b_fun_a_b_fun_fun_tree$)(?v1py68 A_b_fun_tree$)) (! (= (right$d (ap_tree$b ?v0py69 ?v1py68)) (ap_tree$b (right$h ?v0py69) (right$d ?v1py68))) :pattern ((right$d (ap_tree$b ?v0py69 ?v1py68))) :pattern ((ap_tree$b (right$h ?v0py69) (right$d ?v1py68))) )) :named A70))
(assert (! (forall ((?v0py70 A_a_b_fun_fun_tree$)(?v1py69 A_tree$)) (! (= (right$d (ap_tree$i ?v0py70 ?v1py69)) (ap_tree$i (right$i ?v0py70) (right$ ?v1py69))) :pattern ((right$d (ap_tree$i ?v0py70 ?v1py69))) :pattern ((ap_tree$i (right$i ?v0py70) (right$ ?v1py69))) )) :named A71))
(assert (! (forall ((?v0py71 B_a_fun_tree$)(?v1py70 B_tree$)) (! (= (right$ (ap_tree$f ?v0py71 ?v1py70)) (ap_tree$f (right$j ?v0py71) (right$a ?v1py70))) :pattern ((right$ (ap_tree$f ?v0py71 ?v1py70))) :pattern ((ap_tree$f (right$j ?v0py71) (right$a ?v1py70))) )) :named A72))
(assert (! (forall ((?v0py72 A_b_fun_a_fun_tree$)(?v1py71 A_b_fun_tree$)) (! (= (right$ (ap_tree$g ?v0py72 ?v1py71)) (ap_tree$g (right$k ?v0py72) (right$d ?v1py71))) :pattern ((right$ (ap_tree$g ?v0py72 ?v1py71))) :pattern ((ap_tree$g (right$k ?v0py72) (right$d ?v1py71))) )) :named A73))
(assert (! (forall ((?v0py73 A_a_fun_tree$)(?v1py72 A_tree$)) (! (= (right$ (ap_tree$e ?v0py73 ?v1py72)) (ap_tree$e (right$f ?v0py73) (right$ ?v1py72))) :pattern ((right$ (ap_tree$e ?v0py73 ?v1py72))) :pattern ((ap_tree$e (right$f ?v0py73) (right$ ?v1py72))) )) :named A74))
(assert (! (forall ((?v0py74 A_b_fun_tree$)(?v1py73 A_tree$)) (! (= (right$a (ap_tree$ ?v0py74 ?v1py73)) (ap_tree$ (right$d ?v0py74) (right$ ?v1py73))) :pattern ((right$a (ap_tree$ ?v0py74 ?v1py73))) :pattern ((ap_tree$ (right$d ?v0py74) (right$ ?v1py73))) )) :named A75))
(assert (! (forall ((?v0py75 A_b_fun_tree$)) (! (= (ap_tree$b (pure_tree$l id$) ?v0py75) ?v0py75) :pattern ((ap_tree$b (pure_tree$l id$) ?v0py75)) )) :named A76))
(assert (! (forall ((?v0py76 B_tree$)) (! (= (ap_tree$d (pure_tree$d id$a) ?v0py76) ?v0py76) :pattern ((ap_tree$d (pure_tree$d id$a) ?v0py76)) )) :named A77))
(assert (! (forall ((?v0py77 A_tree$)) (! (= (ap_tree$e (pure_tree$ id$b) ?v0py77) ?v0py77) :pattern ((ap_tree$e (pure_tree$ id$b) ?v0py77)) )) :named A78))
(assert (! (forall ((?v0py78 B_b_fun_tree$)(?v1py74 A_b_fun_tree$)(?v2py20 A_tree$)) (! (= (ap_tree$ (ap_tree$b (ap_tree$l (pure_tree$n comp$) ?v0py78) ?v1py74) ?v2py20) (ap_tree$d ?v0py78 (ap_tree$ ?v1py74 ?v2py20))) :pattern ((ap_tree$ (ap_tree$b (ap_tree$l (pure_tree$n comp$) ?v0py78) ?v1py74) ?v2py20)) :pattern ((ap_tree$d ?v0py78 (ap_tree$ ?v1py74 ?v2py20))) )) :named A79))
(assert (! (forall ((?v0py79 A_b_fun_tree$)(?v1py75 A_a_fun_tree$)(?v2py21 A_tree$)) (! (= (ap_tree$ (ap_tree$a (ap_tree$k (pure_tree$m comp$a) ?v0py79) ?v1py75) ?v2py21) (ap_tree$ ?v0py79 (ap_tree$e ?v1py75 ?v2py21))) :pattern ((ap_tree$ (ap_tree$a (ap_tree$k (pure_tree$m comp$a) ?v0py79) ?v1py75) ?v2py21)) :pattern ((ap_tree$ ?v0py79 (ap_tree$e ?v1py75 ?v2py21))) )) :named A80))
(assert (! (forall ((?v0py80 A_b_fun_tree$)(?v1py76 B_a_fun_tree$)(?v2py22 B_tree$)) (! (= (ap_tree$d (ap_tree$m (ap_tree$n (pure_tree$o comp$b) ?v0py80) ?v1py76) ?v2py22) (ap_tree$ ?v0py80 (ap_tree$f ?v1py76 ?v2py22))) :pattern ((ap_tree$d (ap_tree$m (ap_tree$n (pure_tree$o comp$b) ?v0py80) ?v1py76) ?v2py22)) :pattern ((ap_tree$ ?v0py80 (ap_tree$f ?v1py76 ?v2py22))) )) :named A81))
(assert (! (forall ((?v0py81 B_b_fun_tree$)(?v1py77 B_b_fun_tree$)(?v2py23 B_tree$)) (! (= (ap_tree$d (ap_tree$o (ap_tree$p (pure_tree$p comp$c) ?v0py81) ?v1py77) ?v2py23) (ap_tree$d ?v0py81 (ap_tree$d ?v1py77 ?v2py23))) :pattern ((ap_tree$d (ap_tree$o (ap_tree$p (pure_tree$p comp$c) ?v0py81) ?v1py77) ?v2py23)) :pattern ((ap_tree$d ?v0py81 (ap_tree$d ?v1py77 ?v2py23))) )) :named A82))
(assert (! (forall ((?v0py82 B_a_fun_tree$)(?v1py78 A_b_fun_tree$)(?v2py24 A_tree$)) (! (= (ap_tree$e (ap_tree$q (ap_tree$r (pure_tree$q comp$d) ?v0py82) ?v1py78) ?v2py24) (ap_tree$f ?v0py82 (ap_tree$ ?v1py78 ?v2py24))) :pattern ((ap_tree$e (ap_tree$q (ap_tree$r (pure_tree$q comp$d) ?v0py82) ?v1py78) ?v2py24)) :pattern ((ap_tree$f ?v0py82 (ap_tree$ ?v1py78 ?v2py24))) )) :named A83))
(assert (! (forall ((?v0py83 A_a_fun_tree$)(?v1py79 A_a_fun_tree$)(?v2py25 A_tree$)) (! (= (ap_tree$e (ap_tree$s (ap_tree$t (pure_tree$r comp$e) ?v0py83) ?v1py79) ?v2py25) (ap_tree$e ?v0py83 (ap_tree$e ?v1py79 ?v2py25))) :pattern ((ap_tree$e (ap_tree$s (ap_tree$t (pure_tree$r comp$e) ?v0py83) ?v1py79) ?v2py25)) :pattern ((ap_tree$e ?v0py83 (ap_tree$e ?v1py79 ?v2py25))) )) :named A84))
(assert (! (forall ((?v0py84 A_b_fun_b_fun_tree$)(?v1py80 A_a_b_fun_fun_tree$)(?v2py26 A_tree$)) (! (= (ap_tree$ (ap_tree$u (ap_tree$v (pure_tree$s comp$f) ?v0py84) ?v1py80) ?v2py26) (ap_tree$c ?v0py84 (ap_tree$i ?v1py80 ?v2py26))) :pattern ((ap_tree$ (ap_tree$u (ap_tree$v (pure_tree$s comp$f) ?v0py84) ?v1py80) ?v2py26)) :pattern ((ap_tree$c ?v0py84 (ap_tree$i ?v1py80 ?v2py26))) )) :named A85))
(assert (! (forall ((?v0py85 A_b_fun_tree$)(?v1py81 A_b_fun_a_fun_tree$)(?v2py27 A_b_fun_tree$)) (! (= (ap_tree$c (ap_tree$w (ap_tree$x (pure_tree$t comp$g) ?v0py85) ?v1py81) ?v2py27) (ap_tree$ ?v0py85 (ap_tree$g ?v1py81 ?v2py27))) :pattern ((ap_tree$c (ap_tree$w (ap_tree$x (pure_tree$t comp$g) ?v0py85) ?v1py81) ?v2py27)) :pattern ((ap_tree$ ?v0py85 (ap_tree$g ?v1py81 ?v2py27))) )) :named A86))
(assert (! (forall ((?v0py86 B_b_fun_tree$)(?v1py82 A_b_fun_b_fun_tree$)(?v2py28 A_b_fun_tree$)) (! (= (ap_tree$c (ap_tree$y (ap_tree$z (pure_tree$u comp$h) ?v0py86) ?v1py82) ?v2py28) (ap_tree$d ?v0py86 (ap_tree$c ?v1py82 ?v2py28))) :pattern ((ap_tree$c (ap_tree$y (ap_tree$z (pure_tree$u comp$h) ?v0py86) ?v1py82) ?v2py28)) :pattern ((ap_tree$d ?v0py86 (ap_tree$c ?v1py82 ?v2py28))) )) :named A87))
(assert (! (forall ((?v0py87 A_b_fun_b_fun_tree$)(?v1py83 B_a_b_fun_fun_tree$)(?v2py29 B_tree$)) (! (= (ap_tree$d (ap_tree$aa (ap_tree$ab (pure_tree$v comp$i) ?v0py87) ?v1py83) ?v2py29) (ap_tree$c ?v0py87 (ap_tree$h ?v1py83 ?v2py29))) :pattern ((ap_tree$d (ap_tree$aa (ap_tree$ab (pure_tree$v comp$i) ?v0py87) ?v1py83) ?v2py29)) :pattern ((ap_tree$c ?v0py87 (ap_tree$h ?v1py83 ?v2py29))) )) :named A88))
(assert (! (forall ((?v0py88 A$)(?v1py84 A_tree$)(?v2py30 A_tree$)(?v3py20 A$)(?v4py10 A_tree$)(?v5py10 A_tree$)) (! (and (or (not (= (node$a ?v0py88 ?v1py84 ?v2py30) (node$a ?v3py20 ?v4py10 ?v5py10))) (and (= ?v0py88 ?v3py20) (= ?v1py84 ?v4py10) (= ?v2py30 ?v5py10))) (or (= (node$a ?v0py88 ?v1py84 ?v2py30) (node$a ?v3py20 ?v4py10 ?v5py10)) (not (= ?v0py88 ?v3py20)) (not (= ?v1py84 ?v4py10)) (not (= ?v2py30 ?v5py10)))) :pattern ((node$a ?v0py88 ?v1py84 ?v2py30) (node$a ?v3py20 ?v4py10 ?v5py10)) )) :named A89))
(assert (! (forall ((?v0py89 B$)(?v1py85 B_tree$)(?v2py31 B_tree$)(?v3py21 B$)(?v4py11 B_tree$)(?v5py11 B_tree$)) (! (and (or (not (= (node$b ?v0py89 ?v1py85 ?v2py31) (node$b ?v3py21 ?v4py11 ?v5py11))) (and (= ?v0py89 ?v3py21) (= ?v1py85 ?v4py11) (= ?v2py31 ?v5py11))) (or (not (= ?v0py89 ?v3py21)) (= (node$b ?v0py89 ?v1py85 ?v2py31) (node$b ?v3py21 ?v4py11 ?v5py11)) (not (= ?v1py85 ?v4py11)) (not (= ?v2py31 ?v5py11)))) :pattern ((node$b ?v0py89 ?v1py85 ?v2py31) (node$b ?v3py21 ?v4py11 ?v5py11)) )) :named A90))
(assert (! (forall ((?v0py90 A_b_fun$)(?v1py86 A_b_fun_tree$)(?v2py32 A_b_fun_tree$)(?v3py22 A_b_fun$)(?v4py12 A_b_fun_tree$)(?v5py12 A_b_fun_tree$)) (! (and (or (not (= (node$ ?v0py90 ?v1py86 ?v2py32) (node$ ?v3py22 ?v4py12 ?v5py12))) (and (= ?v0py90 ?v3py22) (= ?v1py86 ?v4py12) (= ?v2py32 ?v5py12))) (or (= (node$ ?v0py90 ?v1py86 ?v2py32) (node$ ?v3py22 ?v4py12 ?v5py12)) (not (= ?v0py90 ?v3py22)) (not (= ?v1py86 ?v4py12)) (not (= ?v2py32 ?v5py12)))) :pattern ((node$ ?v0py90 ?v1py86 ?v2py32) (node$ ?v3py22 ?v4py12 ?v5py12)) )) :named A91))
(assert (! (forall ((?v0py91 B_b_fun$)(?v1py87 B_tree$)) (! (= (left$a (fun_app$k (map_tree$b ?v0py91) ?v1py87)) (fun_app$k (map_tree$b ?v0py91) (left$a ?v1py87))) :pattern ((left$a (fun_app$k (map_tree$b ?v0py91) ?v1py87))) :pattern ((fun_app$k (map_tree$b ?v0py91) (left$a ?v1py87))) )) :named A92))
(assert (! (forall ((?v0py92 A_b_fun_b_fun$)(?v1py88 A_b_fun_tree$)) (! (= (left$a (map_tree$e ?v0py92 ?v1py88)) (map_tree$e ?v0py92 (left$d ?v1py88))) :pattern ((left$a (map_tree$e ?v0py92 ?v1py88))) :pattern ((map_tree$e ?v0py92 (left$d ?v1py88))) )) :named A93))
(assert (! (forall ((?v0py93 B_a_b_fun_fun$)(?v1py89 B_tree$)) (! (= (left$d (map_tree$g ?v0py93 ?v1py89)) (map_tree$g ?v0py93 (left$a ?v1py89))) :pattern ((left$d (map_tree$g ?v0py93 ?v1py89))) :pattern ((map_tree$g ?v0py93 (left$a ?v1py89))) )) :named A94))
(assert (! (forall ((?v0py94 A_b_fun_a_b_fun_fun$)(?v1py90 A_b_fun_tree$)) (! (= (left$d (map_tree$ ?v0py94 ?v1py90)) (map_tree$ ?v0py94 (left$d ?v1py90))) :pattern ((left$d (map_tree$ ?v0py94 ?v1py90))) :pattern ((map_tree$ ?v0py94 (left$d ?v1py90))) )) :named A95))
(assert (! (forall ((?v0py95 A_a_b_fun_fun$)(?v1py91 A_tree$)) (! (= (left$d (map_tree$h ?v0py95 ?v1py91)) (map_tree$h ?v0py95 (left$ ?v1py91))) :pattern ((left$d (map_tree$h ?v0py95 ?v1py91))) :pattern ((map_tree$h ?v0py95 (left$ ?v1py91))) )) :named A96))
(assert (! (forall ((?v0py96 B_a_fun$)(?v1py92 B_tree$)) (! (= (left$ (map_tree$i ?v0py96 ?v1py92)) (map_tree$i ?v0py96 (left$a ?v1py92))) :pattern ((left$ (map_tree$i ?v0py96 ?v1py92))) :pattern ((map_tree$i ?v0py96 (left$a ?v1py92))) )) :named A97))
(assert (! (forall ((?v0py97 A_b_fun_a_fun$)(?v1py93 A_b_fun_tree$)) (! (= (left$ (map_tree$j ?v0py97 ?v1py93)) (map_tree$j ?v0py97 (left$d ?v1py93))) :pattern ((left$ (map_tree$j ?v0py97 ?v1py93))) :pattern ((map_tree$j ?v0py97 (left$d ?v1py93))) )) :named A98))
(assert (! (forall ((?v0py98 A_a_fun$)(?v1py94 A_tree$)) (! (= (left$ (fun_app$l (map_tree$c ?v0py98) ?v1py94)) (fun_app$l (map_tree$c ?v0py98) (left$ ?v1py94))) :pattern ((left$ (fun_app$l (map_tree$c ?v0py98) ?v1py94))) :pattern ((fun_app$l (map_tree$c ?v0py98) (left$ ?v1py94))) )) :named A99))
(assert (! (forall ((?v0py99 A_b_fun$)(?v1py95 A_tree$)) (! (= (left$a (fun_app$m (map_tree$f ?v0py99) ?v1py95)) (fun_app$m (map_tree$f ?v0py99) (left$ ?v1py95))) :pattern ((left$a (fun_app$m (map_tree$f ?v0py99) ?v1py95))) :pattern ((fun_app$m (map_tree$f ?v0py99) (left$ ?v1py95))) )) :named A100))
(assert (! (forall ((?v0py100 B_b_fun$)(?v1py96 B_tree$)) (! (= (right$a (fun_app$k (map_tree$b ?v0py100) ?v1py96)) (fun_app$k (map_tree$b ?v0py100) (right$a ?v1py96))) :pattern ((right$a (fun_app$k (map_tree$b ?v0py100) ?v1py96))) :pattern ((fun_app$k (map_tree$b ?v0py100) (right$a ?v1py96))) )) :named A101))
(assert (! (forall ((?v0py101 A_b_fun_b_fun$)(?v1py97 A_b_fun_tree$)) (! (= (right$a (map_tree$e ?v0py101 ?v1py97)) (map_tree$e ?v0py101 (right$d ?v1py97))) :pattern ((right$a (map_tree$e ?v0py101 ?v1py97))) :pattern ((map_tree$e ?v0py101 (right$d ?v1py97))) )) :named A102))
(assert (! (forall ((?v0py102 B_a_b_fun_fun$)(?v1py98 B_tree$)) (! (= (right$d (map_tree$g ?v0py102 ?v1py98)) (map_tree$g ?v0py102 (right$a ?v1py98))) :pattern ((right$d (map_tree$g ?v0py102 ?v1py98))) :pattern ((map_tree$g ?v0py102 (right$a ?v1py98))) )) :named A103))
(assert (! (forall ((?v0py103 A_b_fun_a_b_fun_fun$)(?v1py99 A_b_fun_tree$)) (! (= (right$d (map_tree$ ?v0py103 ?v1py99)) (map_tree$ ?v0py103 (right$d ?v1py99))) :pattern ((right$d (map_tree$ ?v0py103 ?v1py99))) :pattern ((map_tree$ ?v0py103 (right$d ?v1py99))) )) :named A104))
(assert (! (forall ((?v0py104 A_a_b_fun_fun$)(?v1py100 A_tree$)) (! (= (right$d (map_tree$h ?v0py104 ?v1py100)) (map_tree$h ?v0py104 (right$ ?v1py100))) :pattern ((right$d (map_tree$h ?v0py104 ?v1py100))) :pattern ((map_tree$h ?v0py104 (right$ ?v1py100))) )) :named A105))
(assert (! (forall ((?v0py105 B_a_fun$)(?v1py101 B_tree$)) (! (= (right$ (map_tree$i ?v0py105 ?v1py101)) (map_tree$i ?v0py105 (right$a ?v1py101))) :pattern ((right$ (map_tree$i ?v0py105 ?v1py101))) :pattern ((map_tree$i ?v0py105 (right$a ?v1py101))) )) :named A106))
(assert (! (forall ((?v0py106 A_b_fun_a_fun$)(?v1py102 A_b_fun_tree$)) (! (= (right$ (map_tree$j ?v0py106 ?v1py102)) (map_tree$j ?v0py106 (right$d ?v1py102))) :pattern ((right$ (map_tree$j ?v0py106 ?v1py102))) :pattern ((map_tree$j ?v0py106 (right$d ?v1py102))) )) :named A107))
(assert (! (forall ((?v0py107 A_a_fun$)(?v1py103 A_tree$)) (! (= (right$ (fun_app$l (map_tree$c ?v0py107) ?v1py103)) (fun_app$l (map_tree$c ?v0py107) (right$ ?v1py103))) :pattern ((right$ (fun_app$l (map_tree$c ?v0py107) ?v1py103))) :pattern ((fun_app$l (map_tree$c ?v0py107) (right$ ?v1py103))) )) :named A108))
(assert (! (forall ((?v0py108 A_b_fun$)(?v1py104 A_tree$)) (! (= (right$a (fun_app$m (map_tree$f ?v0py108) ?v1py104)) (fun_app$m (map_tree$f ?v0py108) (right$ ?v1py104))) :pattern ((right$a (fun_app$m (map_tree$f ?v0py108) ?v1py104))) :pattern ((fun_app$m (map_tree$f ?v0py108) (right$ ?v1py104))) )) :named A109))
(assert (! (forall ((?v0py109 B_b_fun$)(?v1py105 B_tree$)) (! (= (root$a (fun_app$k (map_tree$b ?v0py109) ?v1py105)) (fun_app$b ?v0py109 (root$a ?v1py105))) :pattern ((fun_app$k (map_tree$b ?v0py109) ?v1py105)) :pattern ((fun_app$b ?v0py109 (root$a ?v1py105))) )) :named A110))
(assert (! (forall ((?v0py110 A_b_fun_b_fun$)(?v1py106 A_b_fun_tree$)) (! (= (root$a (map_tree$e ?v0py110 ?v1py106)) (fun_app$ ?v0py110 (root$d ?v1py106))) :pattern ((map_tree$e ?v0py110 ?v1py106)) :pattern ((fun_app$ ?v0py110 (root$d ?v1py106))) )) :named A111))
(assert (! (forall ((?v0py111 B_a_b_fun_fun$)(?v1py107 B_tree$)) (! (= (root$d (map_tree$g ?v0py111 ?v1py107)) (fun_app$f ?v0py111 (root$a ?v1py107))) :pattern ((map_tree$g ?v0py111 ?v1py107)) :pattern ((fun_app$f ?v0py111 (root$a ?v1py107))) )) :named A112))
(assert (! (forall ((?v0py112 A_b_fun_a_b_fun_fun$)(?v1py108 A_b_fun_tree$)) (! (= (root$d (map_tree$ ?v0py112 ?v1py108)) (fun_app$j ?v0py112 (root$d ?v1py108))) :pattern ((map_tree$ ?v0py112 ?v1py108)) :pattern ((fun_app$j ?v0py112 (root$d ?v1py108))) )) :named A113))
(assert (! (forall ((?v0py113 A_a_b_fun_fun$)(?v1py109 A_tree$)) (! (= (root$d (map_tree$h ?v0py113 ?v1py109)) (fun_app$g ?v0py113 (root$ ?v1py109))) :pattern ((map_tree$h ?v0py113 ?v1py109)) :pattern ((fun_app$g ?v0py113 (root$ ?v1py109))) )) :named A114))
(assert (! (forall ((?v0py114 B_a_fun$)(?v1py110 B_tree$)) (! (= (root$ (map_tree$i ?v0py114 ?v1py110)) (fun_app$c ?v0py114 (root$a ?v1py110))) :pattern ((map_tree$i ?v0py114 ?v1py110)) :pattern ((fun_app$c ?v0py114 (root$a ?v1py110))) )) :named A115))
(assert (! (forall ((?v0py115 A_b_fun_a_fun$)(?v1py111 A_b_fun_tree$)) (! (= (root$ (map_tree$j ?v0py115 ?v1py111)) (fun_app$e ?v0py115 (root$d ?v1py111))) :pattern ((map_tree$j ?v0py115 ?v1py111)) :pattern ((fun_app$e ?v0py115 (root$d ?v1py111))) )) :named A116))
(assert (! (forall ((?v0py116 A_a_fun$)(?v1py112 A_tree$)) (! (= (root$ (fun_app$l (map_tree$c ?v0py116) ?v1py112)) (fun_app$d ?v0py116 (root$ ?v1py112))) :pattern ((fun_app$l (map_tree$c ?v0py116) ?v1py112)) :pattern ((fun_app$d ?v0py116 (root$ ?v1py112))) )) :named A117))
(assert (! (forall ((?v0py117 A_b_fun$)(?v1py113 A_tree$)) (! (= (root$a (fun_app$m (map_tree$f ?v0py117) ?v1py113)) (fun_app$a ?v0py117 (root$ ?v1py113))) :pattern ((fun_app$m (map_tree$f ?v0py117) ?v1py113)) :pattern ((fun_app$a ?v0py117 (root$ ?v1py113))) )) :named A118))
(assert (! (forall ((?v0py118 B_b_fun$)(?v1py114 B$)) (! (= (fun_app$k (map_tree$b ?v0py118) (pure_tree$b ?v1py114)) (pure_tree$b (fun_app$b ?v0py118 ?v1py114))) :pattern ((fun_app$k (map_tree$b ?v0py118) (pure_tree$b ?v1py114))) :pattern ((fun_app$b ?v0py118 ?v1py114)) )) :named A119))
(assert (! (forall ((?v0py119 B_a_fun$)(?v1py115 B$)) (! (= (map_tree$i ?v0py119 (pure_tree$b ?v1py115)) (pure_tree$c (fun_app$c ?v0py119 ?v1py115))) :pattern ((map_tree$i ?v0py119 (pure_tree$b ?v1py115))) :pattern ((fun_app$c ?v0py119 ?v1py115)) )) :named A120))
(assert (! (forall ((?v0py120 A_a_fun$)(?v1py116 A$)) (! (= (fun_app$l (map_tree$c ?v0py120) (pure_tree$c ?v1py116)) (pure_tree$c (fun_app$d ?v0py120 ?v1py116))) :pattern ((fun_app$l (map_tree$c ?v0py120) (pure_tree$c ?v1py116))) :pattern ((fun_app$d ?v0py120 ?v1py116)) )) :named A121))
(assert (! (forall ((?v0py121 A_b_fun$)(?v1py117 A$)) (! (= (fun_app$m (map_tree$f ?v0py121) (pure_tree$c ?v1py117)) (pure_tree$b (fun_app$a ?v0py121 ?v1py117))) :pattern ((fun_app$m (map_tree$f ?v0py121) (pure_tree$c ?v1py117))) :pattern ((fun_app$a ?v0py121 ?v1py117)) )) :named A122))
(assert (! (forall ((?v0py122 A_b_fun_b_fun$)(?v1py118 A_b_fun$)) (! (= (map_tree$e ?v0py122 (pure_tree$a ?v1py118)) (pure_tree$b (fun_app$ ?v0py122 ?v1py118))) :pattern ((map_tree$e ?v0py122 (pure_tree$a ?v1py118))) :pattern ((fun_app$ ?v0py122 ?v1py118)) )) :named A123))
(assert (! (forall ((?v0py123 A_b_fun_a_fun$)(?v1py119 A_b_fun$)) (! (= (map_tree$j ?v0py123 (pure_tree$a ?v1py119)) (pure_tree$c (fun_app$e ?v0py123 ?v1py119))) :pattern ((map_tree$j ?v0py123 (pure_tree$a ?v1py119))) :pattern ((fun_app$e ?v0py123 ?v1py119)) )) :named A124))
(assert (! (forall ((?v0py124 B_a_b_fun_fun$)(?v1py120 B$)) (! (= (map_tree$g ?v0py124 (pure_tree$b ?v1py120)) (pure_tree$a (fun_app$f ?v0py124 ?v1py120))) :pattern ((map_tree$g ?v0py124 (pure_tree$b ?v1py120))) :pattern ((fun_app$f ?v0py124 ?v1py120)) )) :named A125))
(assert (! (forall ((?v0py125 A_a_b_fun_fun$)(?v1py121 A$)) (! (= (map_tree$h ?v0py125 (pure_tree$c ?v1py121)) (pure_tree$a (fun_app$g ?v0py125 ?v1py121))) :pattern ((map_tree$h ?v0py125 (pure_tree$c ?v1py121))) :pattern ((fun_app$g ?v0py125 ?v1py121)) )) :named A126))
(assert (! (forall ((?v0py126 A_b_fun_b_fun_b_fun$)(?v1py122 A_b_fun_b_fun$)) (! (= (map_tree$k ?v0py126 (pure_tree$i ?v1py122)) (pure_tree$b (fun_app$i ?v0py126 ?v1py122))) :pattern ((map_tree$k ?v0py126 (pure_tree$i ?v1py122))) :pattern ((fun_app$i ?v0py126 ?v1py122)) )) :named A127))
(assert (! (forall ((?v0py127 A_b_fun_b_fun_a_fun$)(?v1py123 A_b_fun_b_fun$)) (! (= (map_tree$l ?v0py127 (pure_tree$i ?v1py123)) (pure_tree$c (fun_app$n ?v0py127 ?v1py123))) :pattern ((map_tree$l ?v0py127 (pure_tree$i ?v1py123))) :pattern ((fun_app$n ?v0py127 ?v1py123)) )) :named A128))
(assert (! (forall ((?v0py128 B_tree$)) (! (= (node$b (root$a ?v0py128) (left$a ?v0py128) (right$a ?v0py128)) ?v0py128) :pattern ((root$a ?v0py128)) :pattern ((left$a ?v0py128)) :pattern ((right$a ?v0py128)) )) :named A129))
(assert (! (forall ((?v0py129 A_b_fun_tree$)) (! (= (node$ (root$d ?v0py129) (left$d ?v0py129) (right$d ?v0py129)) ?v0py129) :pattern ((root$d ?v0py129)) :pattern ((left$d ?v0py129)) :pattern ((right$d ?v0py129)) )) :named A130))
(assert (! (forall ((?v0py130 A_tree$)) (! (= (node$a (root$ ?v0py130) (left$ ?v0py130) (right$ ?v0py130)) ?v0py130) :pattern ((root$ ?v0py130)) :pattern ((left$ ?v0py130)) :pattern ((right$ ?v0py130)) )) :named A131))
(assert (! (forall ((?v0py131 A_a_fun_a_b_fun_fun_tree$)(?v1py124 A_a_fun_tree$)) (! (= (ap_tree$a ?v0py131 ?v1py124) (node$ (fun_app$h (root$e ?v0py131) (root$f ?v1py124)) (ap_tree$a (left$e ?v0py131) (left$f ?v1py124)) (ap_tree$a (right$e ?v0py131) (right$f ?v1py124)))) :pattern ((fun_app$h (root$e ?v0py131) (root$f ?v1py124))) :pattern ((ap_tree$a (left$e ?v0py131) (left$f ?v1py124))) :pattern ((ap_tree$a (right$e ?v0py131) (right$f ?v1py124))) )) :named A132))
(assert (! (forall ((?v0py132 B_a_fun_tree$)(?v1py125 B_tree$)) (! (= (ap_tree$f ?v0py132 ?v1py125) (node$a (fun_app$c (root$j ?v0py132) (root$a ?v1py125)) (ap_tree$f (left$j ?v0py132) (left$a ?v1py125)) (ap_tree$f (right$j ?v0py132) (right$a ?v1py125)))) :pattern ((fun_app$c (root$j ?v0py132) (root$a ?v1py125))) :pattern ((ap_tree$f (left$j ?v0py132) (left$a ?v1py125))) :pattern ((ap_tree$f (right$j ?v0py132) (right$a ?v1py125))) )) :named A133))
(assert (! (forall ((?v0py133 B_b_fun_tree$)(?v1py126 B_tree$)) (! (= (ap_tree$d ?v0py133 ?v1py126) (node$b (fun_app$b (root$b ?v0py133) (root$a ?v1py126)) (ap_tree$d (left$b ?v0py133) (left$a ?v1py126)) (ap_tree$d (right$b ?v0py133) (right$a ?v1py126)))) :pattern ((fun_app$b (root$b ?v0py133) (root$a ?v1py126))) :pattern ((ap_tree$d (left$b ?v0py133) (left$a ?v1py126))) :pattern ((ap_tree$d (right$b ?v0py133) (right$a ?v1py126))) )) :named A134))
(assert (! (forall ((?v0py134 B_a_b_fun_fun_tree$)(?v1py127 B_tree$)) (! (= (ap_tree$h ?v0py134 ?v1py127) (node$ (fun_app$f (root$g ?v0py134) (root$a ?v1py127)) (ap_tree$h (left$g ?v0py134) (left$a ?v1py127)) (ap_tree$h (right$g ?v0py134) (right$a ?v1py127)))) :pattern ((fun_app$f (root$g ?v0py134) (root$a ?v1py127))) :pattern ((ap_tree$h (left$g ?v0py134) (left$a ?v1py127))) :pattern ((ap_tree$h (right$g ?v0py134) (right$a ?v1py127))) )) :named A135))
(assert (! (forall ((?v0py135 A_b_fun_a_fun_tree$)(?v1py128 A_b_fun_tree$)) (! (= (ap_tree$g ?v0py135 ?v1py128) (node$a (fun_app$e (root$k ?v0py135) (root$d ?v1py128)) (ap_tree$g (left$k ?v0py135) (left$d ?v1py128)) (ap_tree$g (right$k ?v0py135) (right$d ?v1py128)))) :pattern ((fun_app$e (root$k ?v0py135) (root$d ?v1py128))) :pattern ((ap_tree$g (left$k ?v0py135) (left$d ?v1py128))) :pattern ((ap_tree$g (right$k ?v0py135) (right$d ?v1py128))) )) :named A136))
(assert (! (forall ((?v0py136 A_b_fun_b_fun_tree$)(?v1py129 A_b_fun_tree$)) (! (= (ap_tree$c ?v0py136 ?v1py129) (node$b (fun_app$ (root$c ?v0py136) (root$d ?v1py129)) (ap_tree$c (left$c ?v0py136) (left$d ?v1py129)) (ap_tree$c (right$c ?v0py136) (right$d ?v1py129)))) :pattern ((fun_app$ (root$c ?v0py136) (root$d ?v1py129))) :pattern ((ap_tree$c (left$c ?v0py136) (left$d ?v1py129))) :pattern ((ap_tree$c (right$c ?v0py136) (right$d ?v1py129))) )) :named A137))
(assert (! (forall ((?v0py137 A_b_fun_a_b_fun_fun_tree$)(?v1py130 A_b_fun_tree$)) (! (= (ap_tree$b ?v0py137 ?v1py130) (node$ (fun_app$j (root$h ?v0py137) (root$d ?v1py130)) (ap_tree$b (left$h ?v0py137) (left$d ?v1py130)) (ap_tree$b (right$h ?v0py137) (right$d ?v1py130)))) :pattern ((fun_app$j (root$h ?v0py137) (root$d ?v1py130))) :pattern ((ap_tree$b (left$h ?v0py137) (left$d ?v1py130))) :pattern ((ap_tree$b (right$h ?v0py137) (right$d ?v1py130))) )) :named A138))
(assert (! (forall ((?v0py138 A_a_fun_tree$)(?v1py131 A_tree$)) (! (= (ap_tree$e ?v0py138 ?v1py131) (node$a (fun_app$d (root$f ?v0py138) (root$ ?v1py131)) (ap_tree$e (left$f ?v0py138) (left$ ?v1py131)) (ap_tree$e (right$f ?v0py138) (right$ ?v1py131)))) :pattern ((fun_app$d (root$f ?v0py138) (root$ ?v1py131))) :pattern ((ap_tree$e (left$f ?v0py138) (left$ ?v1py131))) :pattern ((ap_tree$e (right$f ?v0py138) (right$ ?v1py131))) )) :named A139))
(assert (! (forall ((?v0py139 A_a_b_fun_fun_tree$)(?v1py132 A_tree$)) (! (= (ap_tree$i ?v0py139 ?v1py132) (node$ (fun_app$g (root$i ?v0py139) (root$ ?v1py132)) (ap_tree$i (left$i ?v0py139) (left$ ?v1py132)) (ap_tree$i (right$i ?v0py139) (right$ ?v1py132)))) :pattern ((fun_app$g (root$i ?v0py139) (root$ ?v1py132))) :pattern ((ap_tree$i (left$i ?v0py139) (left$ ?v1py132))) :pattern ((ap_tree$i (right$i ?v0py139) (right$ ?v1py132))) )) :named A140))
(assert (! (forall ((?v0py140 A_b_fun_tree$)(?v1py133 A_tree$)) (! (= (ap_tree$ ?v0py140 ?v1py133) (node$b (fun_app$a (root$d ?v0py140) (root$ ?v1py133)) (ap_tree$ (left$d ?v0py140) (left$ ?v1py133)) (ap_tree$ (right$d ?v0py140) (right$ ?v1py133)))) :pattern ((fun_app$a (root$d ?v0py140) (root$ ?v1py133))) :pattern ((ap_tree$ (left$d ?v0py140) (left$ ?v1py133))) :pattern ((ap_tree$ (right$d ?v0py140) (right$ ?v1py133))) )) :named A141))
(assert (! (forall ((?v0py141 A_a_fun$)(?v1py134 A$)(?v2py33 A_tree$)(?v3py23 A_tree$)) (! (= (fun_app$l (map_tree$c ?v0py141) (node$a ?v1py134 ?v2py33 ?v3py23)) (node$a (fun_app$d ?v0py141 ?v1py134) (fun_app$l (map_tree$c ?v0py141) ?v2py33) (fun_app$l (map_tree$c ?v0py141) ?v3py23))) :pattern ((fun_app$l (map_tree$c ?v0py141) (node$a ?v1py134 ?v2py33 ?v3py23))) )) :named A142))
(assert (! (forall ((?v0py142 A_a_b_fun_fun$)(?v1py135 A$)(?v2py34 A_tree$)(?v3py24 A_tree$)) (! (= (map_tree$h ?v0py142 (node$a ?v1py135 ?v2py34 ?v3py24)) (node$ (fun_app$g ?v0py142 ?v1py135) (map_tree$h ?v0py142 ?v2py34) (map_tree$h ?v0py142 ?v3py24))) :pattern ((map_tree$h ?v0py142 (node$a ?v1py135 ?v2py34 ?v3py24))) )) :named A143))
(assert (! (forall ((?v0py143 B_a_fun$)(?v1py136 B$)(?v2py35 B_tree$)(?v3py25 B_tree$)) (! (= (map_tree$i ?v0py143 (node$b ?v1py136 ?v2py35 ?v3py25)) (node$a (fun_app$c ?v0py143 ?v1py136) (map_tree$i ?v0py143 ?v2py35) (map_tree$i ?v0py143 ?v3py25))) :pattern ((map_tree$i ?v0py143 (node$b ?v1py136 ?v2py35 ?v3py25))) )) :named A144))
(assert (! (forall ((?v0py144 B_b_fun$)(?v1py137 B$)(?v2py36 B_tree$)(?v3py26 B_tree$)) (! (= (fun_app$k (map_tree$b ?v0py144) (node$b ?v1py137 ?v2py36 ?v3py26)) (node$b (fun_app$b ?v0py144 ?v1py137) (fun_app$k (map_tree$b ?v0py144) ?v2py36) (fun_app$k (map_tree$b ?v0py144) ?v3py26))) :pattern ((fun_app$k (map_tree$b ?v0py144) (node$b ?v1py137 ?v2py36 ?v3py26))) )) :named A145))
(assert (! (forall ((?v0py145 B_a_b_fun_fun$)(?v1py138 B$)(?v2py37 B_tree$)(?v3py27 B_tree$)) (! (= (map_tree$g ?v0py145 (node$b ?v1py138 ?v2py37 ?v3py27)) (node$ (fun_app$f ?v0py145 ?v1py138) (map_tree$g ?v0py145 ?v2py37) (map_tree$g ?v0py145 ?v3py27))) :pattern ((map_tree$g ?v0py145 (node$b ?v1py138 ?v2py37 ?v3py27))) )) :named A146))
(assert (! (forall ((?v0py146 A_b_fun_a_fun$)(?v1py139 A_b_fun$)(?v2py38 A_b_fun_tree$)(?v3py28 A_b_fun_tree$)) (! (= (map_tree$j ?v0py146 (node$ ?v1py139 ?v2py38 ?v3py28)) (node$a (fun_app$e ?v0py146 ?v1py139) (map_tree$j ?v0py146 ?v2py38) (map_tree$j ?v0py146 ?v3py28))) :pattern ((map_tree$j ?v0py146 (node$ ?v1py139 ?v2py38 ?v3py28))) )) :named A147))
(assert (! (forall ((?v0py147 A_b_fun_b_fun$)(?v1py140 A_b_fun$)(?v2py39 A_b_fun_tree$)(?v3py29 A_b_fun_tree$)) (! (= (map_tree$e ?v0py147 (node$ ?v1py140 ?v2py39 ?v3py29)) (node$b (fun_app$ ?v0py147 ?v1py140) (map_tree$e ?v0py147 ?v2py39) (map_tree$e ?v0py147 ?v3py29))) :pattern ((map_tree$e ?v0py147 (node$ ?v1py140 ?v2py39 ?v3py29))) )) :named A148))
(assert (! (forall ((?v0py148 A_b_fun_a_b_fun_fun$)(?v1py141 A_b_fun$)(?v2py40 A_b_fun_tree$)(?v3py30 A_b_fun_tree$)) (! (= (map_tree$ ?v0py148 (node$ ?v1py141 ?v2py40 ?v3py30)) (node$ (fun_app$j ?v0py148 ?v1py141) (map_tree$ ?v0py148 ?v2py40) (map_tree$ ?v0py148 ?v3py30))) :pattern ((map_tree$ ?v0py148 (node$ ?v1py141 ?v2py40 ?v3py30))) )) :named A149))
(assert (! (forall ((?v0py149 A_b_fun$)(?v1py142 A$)(?v2py41 A_tree$)(?v3py31 A_tree$)) (! (= (fun_app$m (map_tree$f ?v0py149) (node$a ?v1py142 ?v2py41 ?v3py31)) (node$b (fun_app$a ?v0py149 ?v1py142) (fun_app$m (map_tree$f ?v0py149) ?v2py41) (fun_app$m (map_tree$f ?v0py149) ?v3py31))) :pattern ((fun_app$m (map_tree$f ?v0py149) (node$a ?v1py142 ?v2py41 ?v3py31))) )) :named A150))
(assert (! (forall ((?v0py150 B_b_fun$)(?v1py143 A_b_fun$)(?v2py42 A_tree$)) (! (= (fun_app$k (map_tree$b ?v0py150) (fun_app$m (map_tree$f ?v1py143) ?v2py42)) (fun_app$m (map_tree$f (fun_app$j (fun_app$o comp$ ?v0py150) ?v1py143)) ?v2py42)) :pattern ((fun_app$k (map_tree$b ?v0py150) (fun_app$m (map_tree$f ?v1py143) ?v2py42))) :pattern ((fun_app$m (map_tree$f (fun_app$j (fun_app$o comp$ ?v0py150) ?v1py143)) ?v2py42)) )) :named A151))
(assert (! (forall ((?v0py151 A_b_fun$)(?v1py144 A_a_fun$)(?v2py43 A_tree$)) (! (= (fun_app$m (map_tree$f ?v0py151) (fun_app$l (map_tree$c ?v1py144) ?v2py43)) (fun_app$m (map_tree$f (fun_app$h (fun_app$p comp$a ?v0py151) ?v1py144)) ?v2py43)) :pattern ((fun_app$m (map_tree$f ?v0py151) (fun_app$l (map_tree$c ?v1py144) ?v2py43))) :pattern ((fun_app$m (map_tree$f (fun_app$h (fun_app$p comp$a ?v0py151) ?v1py144)) ?v2py43)) )) :named A152))
(assert (! (forall ((?v0py152 A_b_fun_a_a_fun_a_b_fun_fun_fun$)) (! (= (pure_tree$m ?v0py152) (node$m ?v0py152 (pure_tree$m ?v0py152) (pure_tree$m ?v0py152))) :pattern ((pure_tree$m ?v0py152)) )) :named A153))
(assert (! (forall ((?v0py153 A_b_fun_b_fun$)) (! (= (pure_tree$i ?v0py153) (node$f ?v0py153 (pure_tree$i ?v0py153) (pure_tree$i ?v0py153))) :pattern ((pure_tree$i ?v0py153)) )) :named A154))
(assert (! (forall ((?v0py154 A$)) (! (= (pure_tree$c ?v0py154) (node$a ?v0py154 (pure_tree$c ?v0py154) (pure_tree$c ?v0py154))) :pattern ((pure_tree$c ?v0py154)) )) :named A155))
(assert (! (forall ((?v0py155 B$)) (! (= (pure_tree$b ?v0py155) (node$b ?v0py155 (pure_tree$b ?v0py155) (pure_tree$b ?v0py155))) :pattern ((pure_tree$b ?v0py155)) )) :named A156))
(assert (! (forall ((?v0py156 A_b_fun$)) (! (= (pure_tree$a ?v0py156) (node$ ?v0py156 (pure_tree$a ?v0py156) (pure_tree$a ?v0py156))) :pattern ((pure_tree$a ?v0py156)) )) :named A157))
(assert (! (forall ((?v0py157 A_b_fun_a_a_fun_a_b_fun_fun_fun$)) (! (= (left$l (pure_tree$m ?v0py157)) (pure_tree$m ?v0py157)) :pattern ((pure_tree$m ?v0py157)) )) :named A158))
(assert (! (forall ((?v0py158 A_b_fun_b_fun$)) (! (= (left$c (pure_tree$i ?v0py158)) (pure_tree$i ?v0py158)) :pattern ((pure_tree$i ?v0py158)) )) :named A159))
(assert (! (forall ((?v0py159 B$)) (! (= (left$a (pure_tree$b ?v0py159)) (pure_tree$b ?v0py159)) :pattern ((pure_tree$b ?v0py159)) )) :named A160))
(assert (! (forall ((?v0py160 A_b_fun$)) (! (= (left$d (pure_tree$a ?v0py160)) (pure_tree$a ?v0py160)) :pattern ((pure_tree$a ?v0py160)) )) :named A161))
(assert (! (forall ((?v0py161 A$)) (! (= (left$ (pure_tree$c ?v0py161)) (pure_tree$c ?v0py161)) :pattern ((pure_tree$c ?v0py161)) )) :named A162))
(assert (! (forall ((?v0py162 A_b_fun_a_a_fun_a_b_fun_fun_fun$)) (! (= (right$l (pure_tree$m ?v0py162)) (pure_tree$m ?v0py162)) :pattern ((pure_tree$m ?v0py162)) )) :named A163))
(assert (! (forall ((?v0py163 A_b_fun_b_fun$)) (! (= (right$c (pure_tree$i ?v0py163)) (pure_tree$i ?v0py163)) :pattern ((pure_tree$i ?v0py163)) )) :named A164))
(assert (! (forall ((?v0py164 B$)) (! (= (right$a (pure_tree$b ?v0py164)) (pure_tree$b ?v0py164)) :pattern ((pure_tree$b ?v0py164)) )) :named A165))
(assert (! (forall ((?v0py165 A_b_fun$)) (! (= (right$d (pure_tree$a ?v0py165)) (pure_tree$a ?v0py165)) :pattern ((pure_tree$a ?v0py165)) )) :named A166))
(assert (! (forall ((?v0py166 A$)) (! (= (right$ (pure_tree$c ?v0py166)) (pure_tree$c ?v0py166)) :pattern ((pure_tree$c ?v0py166)) )) :named A167))
(assert (! (forall ((?v0py167 B_b_fun$)(?v1py145 A_b_fun$)) (! (= (map_tree$f (fun_app$j (fun_app$o comp$ ?v0py167) ?v1py145)) (comp$j (map_tree$b ?v0py167) (map_tree$f ?v1py145))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py167) ?v1py145)) :pattern ((comp$j (map_tree$b ?v0py167) (map_tree$f ?v1py145))) )) :named A168))
(assert (! (forall ((?v0py168 A_b_fun$)(?v1py146 A_a_fun$)) (! (= (map_tree$f (fun_app$h (fun_app$p comp$a ?v0py168) ?v1py146)) (comp$k (map_tree$f ?v0py168) (map_tree$c ?v1py146))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py168) ?v1py146)) :pattern ((comp$k (map_tree$f ?v0py168) (map_tree$c ?v1py146))) )) :named A169))
(assert (! (forall ((?v0py169 B$)(?v1py147 B_tree$)(?v2py44 B_tree$)) (! (= (left$a (node$b ?v0py169 ?v1py147 ?v2py44)) ?v1py147) :pattern ((node$b ?v0py169 ?v1py147 ?v2py44)) )) :named A170))
(assert (! (forall ((?v0py170 A_b_fun$)(?v1py148 A_b_fun_tree$)(?v2py45 A_b_fun_tree$)) (! (= (left$d (node$ ?v0py170 ?v1py148 ?v2py45)) ?v1py148) :pattern ((node$ ?v0py170 ?v1py148 ?v2py45)) )) :named A171))
(assert (! (forall ((?v0py171 A$)(?v1py149 A_tree$)(?v2py46 A_tree$)) (! (= (left$ (node$a ?v0py171 ?v1py149 ?v2py46)) ?v1py149) :pattern ((node$a ?v0py171 ?v1py149 ?v2py46)) )) :named A172))
(assert (! (forall ((?v0py172 B$)(?v1py150 B_tree$)(?v2py47 B_tree$)) (! (= (root$a (node$b ?v0py172 ?v1py150 ?v2py47)) ?v0py172) :pattern ((node$b ?v0py172 ?v1py150 ?v2py47)) )) :named A173))
(assert (! (forall ((?v0py173 A_b_fun$)(?v1py151 A_b_fun_tree$)(?v2py48 A_b_fun_tree$)) (! (= (root$d (node$ ?v0py173 ?v1py151 ?v2py48)) ?v0py173) :pattern ((node$ ?v0py173 ?v1py151 ?v2py48)) )) :named A174))
(assert (! (forall ((?v0py174 A$)(?v1py152 A_tree$)(?v2py49 A_tree$)) (! (= (root$ (node$a ?v0py174 ?v1py152 ?v2py49)) ?v0py174) :pattern ((node$a ?v0py174 ?v1py152 ?v2py49)) )) :named A175))
(assert (! (forall ((?v0py175 A_b_fun_a_a_fun_a_b_fun_fun_fun$)) (! (= (root$l (pure_tree$m ?v0py175)) ?v0py175) :pattern ((pure_tree$m ?v0py175)) )) :named A176))
(assert (! (forall ((?v0py176 A_b_fun_b_fun$)) (! (= (root$c (pure_tree$i ?v0py176)) ?v0py176) :pattern ((pure_tree$i ?v0py176)) )) :named A177))
(assert (! (forall ((?v0py177 B$)) (! (= (root$a (pure_tree$b ?v0py177)) ?v0py177) :pattern ((pure_tree$b ?v0py177)) )) :named A178))
(assert (! (forall ((?v0py178 A_b_fun$)) (! (= (root$d (pure_tree$a ?v0py178)) ?v0py178) :pattern ((pure_tree$a ?v0py178)) )) :named A179))
(assert (! (forall ((?v0py179 A$)) (! (= (root$ (pure_tree$c ?v0py179)) ?v0py179) :pattern ((pure_tree$c ?v0py179)) )) :named A180))
(assert (! (forall ((?v0py180 B$)(?v1py153 B_tree$)(?v2py50 B_tree$)) (! (= (right$a (node$b ?v0py180 ?v1py153 ?v2py50)) ?v2py50) :pattern ((node$b ?v0py180 ?v1py153 ?v2py50)) )) :named A181))
(assert (! (forall ((?v0py181 A_b_fun$)(?v1py154 A_b_fun_tree$)(?v2py51 A_b_fun_tree$)) (! (= (right$d (node$ ?v0py181 ?v1py154 ?v2py51)) ?v2py51) :pattern ((node$ ?v0py181 ?v1py154 ?v2py51)) )) :named A182))
(assert (! (forall ((?v0py182 A$)(?v1py155 A_tree$)(?v2py52 A_tree$)) (! (= (right$ (node$a ?v0py182 ?v1py155 ?v2py52)) ?v2py52) :pattern ((node$a ?v0py182 ?v1py155 ?v2py52)) )) :named A183))
(assert (! (forall ((?v0py183 B_tree$)) (! (= ?v0py183 (node$b (root$a ?v0py183) (left$a ?v0py183) (right$a ?v0py183))) :pattern ((root$a ?v0py183)) :pattern ((left$a ?v0py183)) :pattern ((right$a ?v0py183)) )) :named A184))
(assert (! (forall ((?v0py184 A_b_fun_tree$)) (! (= ?v0py184 (node$ (root$d ?v0py184) (left$d ?v0py184) (right$d ?v0py184))) :pattern ((root$d ?v0py184)) :pattern ((left$d ?v0py184)) :pattern ((right$d ?v0py184)) )) :named A185))
(assert (! (forall ((?v0py185 A_tree$)) (! (= ?v0py185 (node$a (root$ ?v0py185) (left$ ?v0py185) (right$ ?v0py185))) :pattern ((root$ ?v0py185)) :pattern ((left$ ?v0py185)) :pattern ((right$ ?v0py185)) )) :named A186))
(assert (! (forall ((?v0py186 A_tree$)) (! (= ?v0py186 (node$a (?v1!8 ?v0py186) (?v2!7 ?v0py186) (?v3!6 ?v0py186))) :pattern ((?v1!8 ?v0py186)) :pattern ((?v2!7 ?v0py186)) :pattern ((?v3!6 ?v0py186)) )) :named A187))
(assert (! (forall ((?v0py187 B_tree$)) (! (= ?v0py187 (node$b (?v1!11 ?v0py187) (?v2!10 ?v0py187) (?v3!9 ?v0py187))) :pattern ((?v1!11 ?v0py187)) :pattern ((?v2!10 ?v0py187)) :pattern ((?v3!9 ?v0py187)) )) :named A188))
(assert (! (forall ((?v0py188 A_b_fun_tree$)) (! (= ?v0py188 (node$ (?v1!14 ?v0py188) (?v2!13 ?v0py188) (?v3!12 ?v0py188))) :pattern ((?v1!14 ?v0py188)) :pattern ((?v2!13 ?v0py188)) :pattern ((?v3!12 ?v0py188)) )) :named A189))
(assert (! (forall ((?v0py189 B_tree$)(?v1py156 B_tree$)) (! (or (not (= (root$a ?v0py189) (root$a ?v1py156))) (not (= (left$a ?v0py189) (left$a ?v1py156))) (not (= (right$a ?v0py189) (right$a ?v1py156))) (= ?v0py189 ?v1py156)) :pattern ((root$a ?v0py189) (root$a ?v1py156)) )) :named A190))
(assert (! (forall ((?v0py190 A_b_fun_tree$)(?v1py157 A_b_fun_tree$)) (! (or (not (= (root$d ?v0py190) (root$d ?v1py157))) (not (= (left$d ?v0py190) (left$d ?v1py157))) (not (= (right$d ?v0py190) (right$d ?v1py157))) (= ?v0py190 ?v1py157)) :pattern ((root$d ?v0py190) (root$d ?v1py157)) )) :named A191))
(assert (! (forall ((?v0py191 A_tree$)(?v1py158 A_tree$)) (! (or (not (= (root$ ?v0py191) (root$ ?v1py158))) (not (= (left$ ?v0py191) (left$ ?v1py158))) (not (= (right$ ?v0py191) (right$ ?v1py158))) (= ?v0py191 ?v1py158)) :pattern ((root$ ?v0py191) (root$ ?v1py158)) )) :named A192))
(assert (! (forall ((?v0py192 B_tree_b_tree_bool_fun_fun$)(?v1py159 B_tree$)(?v2py53 B_tree$)) (! (or (= ?v1py159 ?v2py53) (not (fun_app$q (fun_app$r ?v0py192 ?v1py159) ?v2py53)) (and (fun_app$q (fun_app$r ?v0py192 (?v3!16 ?v0py192)) (?v4!15 ?v0py192)) (or (not (= (root$a (?v3!16 ?v0py192)) (root$a (?v4!15 ?v0py192)))) (and (not (fun_app$q (fun_app$r ?v0py192 (left$a (?v3!16 ?v0py192))) (left$a (?v4!15 ?v0py192)))) (not (= (left$a (?v3!16 ?v0py192)) (left$a (?v4!15 ?v0py192))))) (and (not (fun_app$q (fun_app$r ?v0py192 (right$a (?v3!16 ?v0py192))) (right$a (?v4!15 ?v0py192)))) (not (= (right$a (?v3!16 ?v0py192)) (right$a (?v4!15 ?v0py192)))))))) :pattern ((fun_app$q (fun_app$r ?v0py192 ?v1py159) ?v2py53)) )) :named A193))
(assert (! (forall ((?v0py193 A_b_fun_tree_a_b_fun_tree_bool_fun_fun$)(?v1py160 A_b_fun_tree$)(?v2py54 A_b_fun_tree$)) (! (or (= ?v1py160 ?v2py54) (not (fun_app$s (fun_app$t ?v0py193 ?v1py160) ?v2py54)) (and (fun_app$s (fun_app$t ?v0py193 (?v3!18 ?v0py193)) (?v4!17 ?v0py193)) (or (not (= (root$d (?v3!18 ?v0py193)) (root$d (?v4!17 ?v0py193)))) (and (not (fun_app$s (fun_app$t ?v0py193 (left$d (?v3!18 ?v0py193))) (left$d (?v4!17 ?v0py193)))) (not (= (left$d (?v3!18 ?v0py193)) (left$d (?v4!17 ?v0py193))))) (and (not (fun_app$s (fun_app$t ?v0py193 (right$d (?v3!18 ?v0py193))) (right$d (?v4!17 ?v0py193)))) (not (= (right$d (?v3!18 ?v0py193)) (right$d (?v4!17 ?v0py193)))))))) :pattern ((fun_app$s (fun_app$t ?v0py193 ?v1py160) ?v2py54)) )) :named A194))
(assert (! (forall ((?v0py194 A_tree_a_tree_bool_fun_fun$)(?v1py161 A_tree$)(?v2py55 A_tree$)) (! (or (= ?v1py161 ?v2py55) (not (fun_app$u (fun_app$v ?v0py194 ?v1py161) ?v2py55)) (and (fun_app$u (fun_app$v ?v0py194 (?v3!20 ?v0py194)) (?v4!19 ?v0py194)) (or (not (= (root$ (?v3!20 ?v0py194)) (root$ (?v4!19 ?v0py194)))) (and (not (fun_app$u (fun_app$v ?v0py194 (left$ (?v3!20 ?v0py194))) (left$ (?v4!19 ?v0py194)))) (not (= (left$ (?v3!20 ?v0py194)) (left$ (?v4!19 ?v0py194))))) (and (not (fun_app$u (fun_app$v ?v0py194 (right$ (?v3!20 ?v0py194))) (right$ (?v4!19 ?v0py194)))) (not (= (right$ (?v3!20 ?v0py194)) (right$ (?v4!19 ?v0py194)))))))) :pattern ((fun_app$u (fun_app$v ?v0py194 ?v1py161) ?v2py55)) )) :named A195))
(assert (! (forall ((?v0py195 B_tree_b_tree_bool_fun_fun$)(?v1py162 B_tree$)(?v2py56 B_tree$)) (! (or (= ?v1py162 ?v2py56) (not (fun_app$q (fun_app$r ?v0py195 ?v1py162) ?v2py56)) (and (fun_app$q (fun_app$r ?v0py195 (?v3!22 ?v0py195)) (?v4!21 ?v0py195)) (or (not (= (root$a (?v3!22 ?v0py195)) (root$a (?v4!21 ?v0py195)))) (not (fun_app$q (fun_app$r ?v0py195 (left$a (?v3!22 ?v0py195))) (left$a (?v4!21 ?v0py195)))) (not (fun_app$q (fun_app$r ?v0py195 (right$a (?v3!22 ?v0py195))) (right$a (?v4!21 ?v0py195))))))) :pattern ((fun_app$q (fun_app$r ?v0py195 ?v1py162) ?v2py56)) )) :named A196))
(assert (! (forall ((?v0py196 A_b_fun_tree_a_b_fun_tree_bool_fun_fun$)(?v1py163 A_b_fun_tree$)(?v2py57 A_b_fun_tree$)) (! (or (= ?v1py163 ?v2py57) (not (fun_app$s (fun_app$t ?v0py196 ?v1py163) ?v2py57)) (and (fun_app$s (fun_app$t ?v0py196 (?v3!24 ?v0py196)) (?v4!23 ?v0py196)) (or (not (= (root$d (?v3!24 ?v0py196)) (root$d (?v4!23 ?v0py196)))) (not (fun_app$s (fun_app$t ?v0py196 (left$d (?v3!24 ?v0py196))) (left$d (?v4!23 ?v0py196)))) (not (fun_app$s (fun_app$t ?v0py196 (right$d (?v3!24 ?v0py196))) (right$d (?v4!23 ?v0py196))))))) :pattern ((fun_app$s (fun_app$t ?v0py196 ?v1py163) ?v2py57)) )) :named A197))
(assert (! (forall ((?v0py197 A_tree_a_tree_bool_fun_fun$)(?v1py164 A_tree$)(?v2py58 A_tree$)) (! (or (= ?v1py164 ?v2py58) (not (fun_app$u (fun_app$v ?v0py197 ?v1py164) ?v2py58)) (and (fun_app$u (fun_app$v ?v0py197 (?v3!26 ?v0py197)) (?v4!25 ?v0py197)) (or (not (= (root$ (?v3!26 ?v0py197)) (root$ (?v4!25 ?v0py197)))) (not (fun_app$u (fun_app$v ?v0py197 (left$ (?v3!26 ?v0py197))) (left$ (?v4!25 ?v0py197)))) (not (fun_app$u (fun_app$v ?v0py197 (right$ (?v3!26 ?v0py197))) (right$ (?v4!25 ?v0py197))))))) :pattern ((fun_app$u (fun_app$v ?v0py197 ?v1py164) ?v2py58)) )) :named A198))
(assert (! (forall ((?v0py198 A_b_fun$)) (! (= (fun_app$h (fun_app$p comp$a ?v0py198) id$b) ?v0py198) :pattern ((fun_app$p comp$a ?v0py198)) )) :named A199))
(assert (! (forall ((?v0py199 A_b_fun$)) (! (= (fun_app$j (fun_app$o comp$ id$a) ?v0py199) ?v0py199) :pattern ((fun_app$j (fun_app$o comp$ id$a) ?v0py199)) )) :named A200))
(assert (! (forall ((?v0py200 A_b_fun$)(?v1py165 A_a_fun$)(?v2py59 A$)) (! (= (fun_app$a (fun_app$h (fun_app$p comp$a ?v0py200) ?v1py165) ?v2py59) (fun_app$a ?v0py200 (fun_app$d ?v1py165 ?v2py59))) :pattern ((fun_app$a (fun_app$h (fun_app$p comp$a ?v0py200) ?v1py165) ?v2py59)) )) :named A201))
(assert (! (forall ((?v0py201 B_b_fun$)(?v1py166 A_b_fun$)(?v2py60 A$)) (! (= (fun_app$a (fun_app$j (fun_app$o comp$ ?v0py201) ?v1py166) ?v2py60) (fun_app$b ?v0py201 (fun_app$a ?v1py166 ?v2py60))) :pattern ((fun_app$a (fun_app$j (fun_app$o comp$ ?v0py201) ?v1py166) ?v2py60)) )) :named A202))
(assert (! (= (fun_app$o comp$ id$a) id$) :named A203))
(assert (! (forall ((?v0py202 A_b_fun$)(?v1py167 A_a_fun$)(?v2py61 A_b_fun$)(?v3py32 A$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py202) ?v1py167) (fun_app$j (fun_app$o comp$ id$a) ?v2py61))) (= (fun_app$a ?v0py202 (fun_app$d ?v1py167 ?v3py32)) (fun_app$a ?v2py61 ?v3py32))) :pattern ((fun_app$a ?v0py202 (fun_app$d ?v1py167 ?v3py32)) (fun_app$a ?v2py61 ?v3py32)) )) :named A204))
(assert (! (forall ((?v0py203 B_b_fun$)(?v1py168 A_b_fun$)(?v2py62 A_b_fun$)(?v3py33 A$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py203) ?v1py168) (fun_app$j (fun_app$o comp$ id$a) ?v2py62))) (= (fun_app$b ?v0py203 (fun_app$a ?v1py168 ?v3py33)) (fun_app$a ?v2py62 ?v3py33))) :pattern ((fun_app$b ?v0py203 (fun_app$a ?v1py168 ?v3py33)) (fun_app$a ?v2py62 ?v3py33)) )) :named A205))
(assert (! (forall ((?v0py204 A_b_fun$)(?v1py169 A_a_fun$)(?v2py63 A_b_fun$)(?v3py34 A$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py204) ?v1py169) ?v2py63)) (= (fun_app$a ?v0py204 (fun_app$d ?v1py169 ?v3py34)) (fun_app$a ?v2py63 ?v3py34))) :pattern ((fun_app$a ?v0py204 (fun_app$d ?v1py169 ?v3py34)) (fun_app$a ?v2py63 ?v3py34)) )) :named A206))
(assert (! (forall ((?v0py205 B_b_fun$)(?v1py170 A_b_fun$)(?v2py64 A_b_fun$)(?v3py35 A$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py205) ?v1py170) ?v2py64)) (= (fun_app$b ?v0py205 (fun_app$a ?v1py170 ?v3py35)) (fun_app$a ?v2py64 ?v3py35))) :pattern ((fun_app$b ?v0py205 (fun_app$a ?v1py170 ?v3py35)) (fun_app$a ?v2py64 ?v3py35)) )) :named A207))
(assert (! (forall ((?v0py206 A_b_fun$)(?v1py171 B_a_fun$)(?v2py65 B_b_fun$)(?v3py36 A_b_fun$)) (! (or (not (= (fun_app$w (fun_app$x comp$b ?v0py206) ?v1py171) ?v2py65)) (= (fun_app$h (fun_app$p comp$a ?v0py206) (fun_app$y (fun_app$z comp$d ?v1py171) ?v3py36)) (fun_app$j (fun_app$o comp$ ?v2py65) ?v3py36))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py206) (fun_app$y (fun_app$z comp$d ?v1py171) ?v3py36)) (fun_app$j (fun_app$o comp$ ?v2py65) ?v3py36)) )) :named A208))
(assert (! (forall ((?v0py207 B_b_fun$)(?v1py172 B_b_fun$)(?v2py66 B_b_fun$)(?v3py37 A_b_fun$)) (! (or (not (= (fun_app$aa (fun_app$ab comp$c ?v0py207) ?v1py172) ?v2py66)) (= (fun_app$j (fun_app$o comp$ ?v0py207) (fun_app$j (fun_app$o comp$ ?v1py172) ?v3py37)) (fun_app$j (fun_app$o comp$ ?v2py66) ?v3py37))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py207) (fun_app$j (fun_app$o comp$ ?v1py172) ?v3py37)) (fun_app$j (fun_app$o comp$ ?v2py66) ?v3py37)) )) :named A209))
(assert (! (forall ((?v0py208 A_b_fun$)(?v1py173 A_a_fun$)(?v2py67 A_b_fun$)(?v3py38 A_a_fun$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py208) ?v1py173) ?v2py67)) (= (fun_app$h (fun_app$p comp$a ?v0py208) (fun_app$ac (fun_app$ad comp$e ?v1py173) ?v3py38)) (fun_app$h (fun_app$p comp$a ?v2py67) ?v3py38))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py208) (fun_app$ac (fun_app$ad comp$e ?v1py173) ?v3py38)) (fun_app$h (fun_app$p comp$a ?v2py67) ?v3py38)) )) :named A210))
(assert (! (forall ((?v0py209 B_b_fun$)(?v1py174 A_b_fun$)(?v2py68 A_b_fun$)(?v3py39 A_a_fun$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py209) ?v1py174) ?v2py68)) (= (fun_app$j (fun_app$o comp$ ?v0py209) (fun_app$h (fun_app$p comp$a ?v1py174) ?v3py39)) (fun_app$h (fun_app$p comp$a ?v2py68) ?v3py39))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py209) (fun_app$h (fun_app$p comp$a ?v1py174) ?v3py39)) (fun_app$h (fun_app$p comp$a ?v2py68) ?v3py39)) )) :named A211))
(assert (! (forall ((?v0py210 A_a_fun$)(?v1py175 A_a_fun$)(?v2py69 A_a_fun$)(?v3py40 A_b_fun$)) (! (or (not (= (fun_app$ac (fun_app$ad comp$e ?v0py210) ?v1py175) ?v2py69)) (= (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v3py40) ?v0py210)) ?v1py175) (fun_app$h (fun_app$p comp$a ?v3py40) ?v2py69))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v3py40) ?v0py210)) ?v1py175) (fun_app$h (fun_app$p comp$a ?v3py40) ?v2py69)) )) :named A212))
(assert (! (forall ((?v0py211 B_a_fun$)(?v1py176 A_b_fun$)(?v2py70 A_a_fun$)(?v3py41 A_b_fun$)) (! (or (not (= (fun_app$y (fun_app$z comp$d ?v0py211) ?v1py176) ?v2py70)) (= (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v3py41) ?v0py211)) ?v1py176) (fun_app$h (fun_app$p comp$a ?v3py41) ?v2py70))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v3py41) ?v0py211)) ?v1py176) (fun_app$h (fun_app$p comp$a ?v3py41) ?v2py70)) )) :named A213))
(assert (! (forall ((?v0py212 A_b_fun$)(?v1py177 A_a_fun$)(?v2py71 A_b_fun$)(?v3py42 B_b_fun$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py212) ?v1py177) ?v2py71)) (= (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v3py42) ?v0py212)) ?v1py177) (fun_app$j (fun_app$o comp$ ?v3py42) ?v2py71))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v3py42) ?v0py212)) ?v1py177) (fun_app$j (fun_app$o comp$ ?v3py42) ?v2py71)) )) :named A214))
(assert (! (forall ((?v0py213 B_b_fun$)(?v1py178 A_b_fun$)(?v2py72 A_b_fun$)(?v3py43 B_b_fun$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py213) ?v1py178) ?v2py72)) (= (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v3py43) ?v0py213)) ?v1py178) (fun_app$j (fun_app$o comp$ ?v3py43) ?v2py72))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v3py43) ?v0py213)) ?v1py178) (fun_app$j (fun_app$o comp$ ?v3py43) ?v2py72)) )) :named A215))
(assert (! (forall ((?v0py214 A_b_fun$)(?v1py179 A_a_fun$)(?v2py73 A_b_fun$)(?v3py44 A_a_fun$)(?v4py13 A$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py214) ?v1py179) (fun_app$h (fun_app$p comp$a ?v2py73) ?v3py44))) (= (fun_app$a ?v0py214 (fun_app$d ?v1py179 ?v4py13)) (fun_app$a ?v2py73 (fun_app$d ?v3py44 ?v4py13)))) :pattern ((fun_app$a ?v0py214 (fun_app$d ?v1py179 ?v4py13)) (fun_app$a ?v2py73 (fun_app$d ?v3py44 ?v4py13))) )) :named A216))
(assert (! (forall ((?v0py215 A_b_fun$)(?v1py180 A_a_fun$)(?v2py74 B_b_fun$)(?v3py45 A_b_fun$)(?v4py14 A$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py215) ?v1py180) (fun_app$j (fun_app$o comp$ ?v2py74) ?v3py45))) (= (fun_app$a ?v0py215 (fun_app$d ?v1py180 ?v4py14)) (fun_app$b ?v2py74 (fun_app$a ?v3py45 ?v4py14)))) :pattern ((fun_app$a ?v0py215 (fun_app$d ?v1py180 ?v4py14)) (fun_app$b ?v2py74 (fun_app$a ?v3py45 ?v4py14))) )) :named A217))
(assert (! (forall ((?v0py216 B_b_fun$)(?v1py181 A_b_fun$)(?v2py75 A_b_fun$)(?v3py46 A_a_fun$)(?v4py15 A$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py216) ?v1py181) (fun_app$h (fun_app$p comp$a ?v2py75) ?v3py46))) (= (fun_app$b ?v0py216 (fun_app$a ?v1py181 ?v4py15)) (fun_app$a ?v2py75 (fun_app$d ?v3py46 ?v4py15)))) :pattern ((fun_app$b ?v0py216 (fun_app$a ?v1py181 ?v4py15)) (fun_app$a ?v2py75 (fun_app$d ?v3py46 ?v4py15))) )) :named A218))
(assert (! (forall ((?v0py217 B_b_fun$)(?v1py182 A_b_fun$)(?v2py76 B_b_fun$)(?v3py47 A_b_fun$)(?v4py16 A$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py217) ?v1py182) (fun_app$j (fun_app$o comp$ ?v2py76) ?v3py47))) (= (fun_app$b ?v0py217 (fun_app$a ?v1py182 ?v4py16)) (fun_app$b ?v2py76 (fun_app$a ?v3py47 ?v4py16)))) :pattern ((fun_app$b ?v0py217 (fun_app$a ?v1py182 ?v4py16)) (fun_app$b ?v2py76 (fun_app$a ?v3py47 ?v4py16))) )) :named A219))
(assert (! (forall ((?v0py218 B_b_fun$)(?v1py183 B_b_fun$)(?v2py77 A_b_fun$)(?v3py48 B_a_fun$)(?v4py17 A_b_fun$)(?v5py13 A_a_fun$)) (! (or (= (fun_app$j (fun_app$o comp$ ?v0py218) (fun_app$j (fun_app$o comp$ ?v1py183) ?v4py17)) (fun_app$h (fun_app$p comp$a ?v2py77) ?v5py13)) (not (= (fun_app$aa (fun_app$ab comp$c ?v0py218) ?v1py183) (fun_app$w (fun_app$x comp$b ?v2py77) ?v3py48))) (not (= (fun_app$y (fun_app$z comp$d ?v3py48) ?v4py17) ?v5py13))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py218) (fun_app$j (fun_app$o comp$ ?v1py183) ?v4py17)) (fun_app$h (fun_app$p comp$a ?v2py77) ?v5py13) (fun_app$w (fun_app$x comp$b ?v2py77) ?v3py48)) )) :named A220))
(assert (! (forall ((?v0py219 A_b_fun$)(?v1py184 B_a_fun$)(?v2py78 B_b_fun$)(?v3py49 B_b_fun$)(?v4py18 A_b_fun$)(?v5py14 A_b_fun$)) (! (or (= (fun_app$h (fun_app$p comp$a ?v0py219) (fun_app$y (fun_app$z comp$d ?v1py184) ?v4py18)) (fun_app$j (fun_app$o comp$ ?v2py78) ?v5py14)) (not (= (fun_app$w (fun_app$x comp$b ?v0py219) ?v1py184) (fun_app$aa (fun_app$ab comp$c ?v2py78) ?v3py49))) (not (= (fun_app$j (fun_app$o comp$ ?v3py49) ?v4py18) ?v5py14))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py219) (fun_app$y (fun_app$z comp$d ?v1py184) ?v4py18)) (fun_app$j (fun_app$o comp$ ?v2py78) ?v5py14) (fun_app$aa (fun_app$ab comp$c ?v2py78) ?v3py49)) )) :named A221))
(assert (! (forall ((?v0py220 B_b_fun$)(?v1py185 B_b_fun$)(?v2py79 B_b_fun$)(?v3py50 B_b_fun$)(?v4py19 A_b_fun$)(?v5py15 A_b_fun$)) (! (or (= (fun_app$j (fun_app$o comp$ ?v0py220) (fun_app$j (fun_app$o comp$ ?v1py185) ?v4py19)) (fun_app$j (fun_app$o comp$ ?v2py79) ?v5py15)) (not (= (fun_app$aa (fun_app$ab comp$c ?v0py220) ?v1py185) (fun_app$aa (fun_app$ab comp$c ?v2py79) ?v3py50))) (not (= (fun_app$j (fun_app$o comp$ ?v3py50) ?v4py19) ?v5py15))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py220) (fun_app$j (fun_app$o comp$ ?v1py185) ?v4py19)) (fun_app$aa (fun_app$ab comp$c ?v2py79) ?v3py50) (fun_app$j (fun_app$o comp$ ?v2py79) ?v5py15)) )) :named A222))
(assert (! (forall ((?v0py221 A_b_fun$)(?v1py186 A_a_fun$)(?v2py80 A_b_fun$)(?v3py51 A_a_fun$)(?v4py20 A_a_fun$)(?v5py16 A_a_fun$)) (! (or (= (fun_app$h (fun_app$p comp$a ?v0py221) (fun_app$ac (fun_app$ad comp$e ?v1py186) ?v4py20)) (fun_app$h (fun_app$p comp$a ?v2py80) ?v5py16)) (not (= (fun_app$h (fun_app$p comp$a ?v0py221) ?v1py186) (fun_app$h (fun_app$p comp$a ?v2py80) ?v3py51))) (not (= (fun_app$ac (fun_app$ad comp$e ?v3py51) ?v4py20) ?v5py16))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py221) (fun_app$ac (fun_app$ad comp$e ?v1py186) ?v4py20)) (fun_app$h (fun_app$p comp$a ?v2py80) ?v3py51) (fun_app$h (fun_app$p comp$a ?v2py80) ?v5py16)) )) :named A223))
(assert (! (forall ((?v0py222 A_b_fun$)(?v1py187 A_a_fun$)(?v2py81 B_b_fun$)(?v3py52 A_b_fun$)(?v4py21 A_a_fun$)(?v5py17 A_b_fun$)) (! (or (= (fun_app$h (fun_app$p comp$a ?v0py222) (fun_app$ac (fun_app$ad comp$e ?v1py187) ?v4py21)) (fun_app$j (fun_app$o comp$ ?v2py81) ?v5py17)) (not (= (fun_app$h (fun_app$p comp$a ?v0py222) ?v1py187) (fun_app$j (fun_app$o comp$ ?v2py81) ?v3py52))) (not (= (fun_app$h (fun_app$p comp$a ?v3py52) ?v4py21) ?v5py17))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py222) (fun_app$ac (fun_app$ad comp$e ?v1py187) ?v4py21)) (fun_app$j (fun_app$o comp$ ?v2py81) ?v5py17) (fun_app$j (fun_app$o comp$ ?v2py81) ?v3py52)) )) :named A224))
(assert (! (forall ((?v0py223 B_b_fun$)(?v1py188 A_b_fun$)(?v2py82 A_b_fun$)(?v3py53 A_a_fun$)(?v4py22 A_a_fun$)(?v5py18 A_a_fun$)) (! (or (= (fun_app$j (fun_app$o comp$ ?v0py223) (fun_app$h (fun_app$p comp$a ?v1py188) ?v4py22)) (fun_app$h (fun_app$p comp$a ?v2py82) ?v5py18)) (not (= (fun_app$j (fun_app$o comp$ ?v0py223) ?v1py188) (fun_app$h (fun_app$p comp$a ?v2py82) ?v3py53))) (not (= (fun_app$ac (fun_app$ad comp$e ?v3py53) ?v4py22) ?v5py18))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py223) (fun_app$h (fun_app$p comp$a ?v1py188) ?v4py22)) (fun_app$h (fun_app$p comp$a ?v2py82) ?v5py18) (fun_app$h (fun_app$p comp$a ?v2py82) ?v3py53)) )) :named A225))
(assert (! (forall ((?v0py224 B_b_fun$)(?v1py189 A_b_fun$)(?v2py83 B_b_fun$)(?v3py54 A_b_fun$)(?v4py23 A_a_fun$)(?v5py19 A_b_fun$)) (! (or (= (fun_app$j (fun_app$o comp$ ?v0py224) (fun_app$h (fun_app$p comp$a ?v1py189) ?v4py23)) (fun_app$j (fun_app$o comp$ ?v2py83) ?v5py19)) (not (= (fun_app$j (fun_app$o comp$ ?v0py224) ?v1py189) (fun_app$j (fun_app$o comp$ ?v2py83) ?v3py54))) (not (= (fun_app$h (fun_app$p comp$a ?v3py54) ?v4py23) ?v5py19))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py224) (fun_app$h (fun_app$p comp$a ?v1py189) ?v4py23)) (fun_app$j (fun_app$o comp$ ?v2py83) ?v3py54) (fun_app$j (fun_app$o comp$ ?v2py83) ?v5py19)) )) :named A226))
(assert (! (forall ((?v0py225 A_a_fun$)(?v1py190 A_a_fun$)(?v2py84 B_a_fun$)(?v3py55 A_b_fun$)(?v4py24 A_b_fun$)(?v5py20 B_b_fun$)) (! (or (not (= (fun_app$ac (fun_app$ad comp$e ?v0py225) ?v1py190) (fun_app$y (fun_app$z comp$d ?v2py84) ?v3py55))) (not (= (fun_app$w (fun_app$x comp$b ?v4py24) ?v2py84) ?v5py20)) (= (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v4py24) ?v0py225)) ?v1py190) (fun_app$j (fun_app$o comp$ ?v5py20) ?v3py55))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v4py24) ?v0py225)) ?v1py190) (fun_app$y (fun_app$z comp$d ?v2py84) ?v3py55) (fun_app$j (fun_app$o comp$ ?v5py20) ?v3py55)) )) :named A227))
(assert (! (forall ((?v0py226 A_a_fun$)(?v1py191 A_a_fun$)(?v2py85 A_a_fun$)(?v3py56 A_a_fun$)(?v4py25 A_b_fun$)(?v5py21 A_b_fun$)) (! (or (not (= (fun_app$ac (fun_app$ad comp$e ?v0py226) ?v1py191) (fun_app$ac (fun_app$ad comp$e ?v2py85) ?v3py56))) (not (= (fun_app$h (fun_app$p comp$a ?v4py25) ?v2py85) ?v5py21)) (= (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v4py25) ?v0py226)) ?v1py191) (fun_app$h (fun_app$p comp$a ?v5py21) ?v3py56))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v4py25) ?v0py226)) ?v1py191) (fun_app$ac (fun_app$ad comp$e ?v2py85) ?v3py56) (fun_app$h (fun_app$p comp$a ?v5py21) ?v3py56)) )) :named A228))
(assert (! (forall ((?v0py227 B_a_fun$)(?v1py192 A_b_fun$)(?v2py86 A_a_fun$)(?v3py57 A_a_fun$)(?v4py26 A_b_fun$)(?v5py22 A_b_fun$)) (! (or (not (= (fun_app$y (fun_app$z comp$d ?v0py227) ?v1py192) (fun_app$ac (fun_app$ad comp$e ?v2py86) ?v3py57))) (not (= (fun_app$h (fun_app$p comp$a ?v4py26) ?v2py86) ?v5py22)) (= (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v4py26) ?v0py227)) ?v1py192) (fun_app$h (fun_app$p comp$a ?v5py22) ?v3py57))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v4py26) ?v0py227)) ?v1py192) (fun_app$ac (fun_app$ad comp$e ?v2py86) ?v3py57) (fun_app$h (fun_app$p comp$a ?v5py22) ?v3py57)) )) :named A229))
(assert (! (forall ((?v0py228 A_b_fun$)(?v1py193 A_a_fun$)(?v2py87 A_b_fun$)(?v3py58 A_a_fun$)(?v4py27 B_b_fun$)(?v5py23 A_b_fun$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py228) ?v1py193) (fun_app$h (fun_app$p comp$a ?v2py87) ?v3py58))) (not (= (fun_app$j (fun_app$o comp$ ?v4py27) ?v2py87) ?v5py23)) (= (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v4py27) ?v0py228)) ?v1py193) (fun_app$h (fun_app$p comp$a ?v5py23) ?v3py58))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v4py27) ?v0py228)) ?v1py193) (fun_app$h (fun_app$p comp$a ?v2py87) ?v3py58) (fun_app$h (fun_app$p comp$a ?v5py23) ?v3py58)) )) :named A230))
(assert (! (forall ((?v0py229 A_b_fun$)(?v1py194 A_a_fun$)(?v2py88 B_b_fun$)(?v3py59 A_b_fun$)(?v4py28 B_b_fun$)(?v5py24 B_b_fun$)) (! (or (not (= (fun_app$h (fun_app$p comp$a ?v0py229) ?v1py194) (fun_app$j (fun_app$o comp$ ?v2py88) ?v3py59))) (not (= (fun_app$aa (fun_app$ab comp$c ?v4py28) ?v2py88) ?v5py24)) (= (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v4py28) ?v0py229)) ?v1py194) (fun_app$j (fun_app$o comp$ ?v5py24) ?v3py59))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v4py28) ?v0py229)) ?v1py194) (fun_app$j (fun_app$o comp$ ?v2py88) ?v3py59) (fun_app$j (fun_app$o comp$ ?v5py24) ?v3py59)) )) :named A231))
(assert (! (forall ((?v0py230 B_b_fun$)(?v1py195 A_b_fun$)(?v2py89 A_b_fun$)(?v3py60 A_a_fun$)(?v4py29 B_b_fun$)(?v5py25 A_b_fun$)) (! (or (= (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v4py29) ?v0py230)) ?v1py195) (fun_app$h (fun_app$p comp$a ?v5py25) ?v3py60)) (not (= (fun_app$j (fun_app$o comp$ ?v0py230) ?v1py195) (fun_app$h (fun_app$p comp$a ?v2py89) ?v3py60))) (not (= (fun_app$j (fun_app$o comp$ ?v4py29) ?v2py89) ?v5py25))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v4py29) ?v0py230)) ?v1py195) (fun_app$h (fun_app$p comp$a ?v5py25) ?v3py60) (fun_app$h (fun_app$p comp$a ?v2py89) ?v3py60)) )) :named A232))
(assert (! (forall ((?v0py231 B_b_fun$)(?v1py196 A_b_fun$)(?v2py90 B_b_fun$)(?v3py61 A_b_fun$)(?v4py30 B_b_fun$)(?v5py26 B_b_fun$)) (! (or (not (= (fun_app$j (fun_app$o comp$ ?v0py231) ?v1py196) (fun_app$j (fun_app$o comp$ ?v2py90) ?v3py61))) (not (= (fun_app$aa (fun_app$ab comp$c ?v4py30) ?v2py90) ?v5py26)) (= (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v4py30) ?v0py231)) ?v1py196) (fun_app$j (fun_app$o comp$ ?v5py26) ?v3py61))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v4py30) ?v0py231)) ?v1py196) (fun_app$j (fun_app$o comp$ ?v2py90) ?v3py61) (fun_app$j (fun_app$o comp$ ?v5py26) ?v3py61)) )) :named A233))
(assert (! (forall ((?v0py232 A_b_fun$)(?v1py197 A_a_fun$)(?v2py91 A_b_fun$)(?v3py62 A_a_fun$)) (! (or (forall ((?v4py31 A$)) (! (= (fun_app$a ?v0py232 (fun_app$d ?v1py197 ?v4py31)) (fun_app$a ?v2py91 (fun_app$d ?v3py62 ?v4py31))) :pattern ((fun_app$d ?v1py197 ?v4py31)) :pattern ((fun_app$d ?v3py62 ?v4py31)) )) (not (= (fun_app$h (fun_app$p comp$a ?v0py232) ?v1py197) (fun_app$h (fun_app$p comp$a ?v2py91) ?v3py62)))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py232) ?v1py197) (fun_app$h (fun_app$p comp$a ?v2py91) ?v3py62)) )) :named A234))
(assert (! (forall ((?v0py233 A_b_fun$)(?v1py198 A_a_fun$)(?v2py92 B_b_fun$)(?v3py63 A_b_fun$)) (! (or (forall ((?v4py32 A$)) (! (= (fun_app$a ?v0py233 (fun_app$d ?v1py198 ?v4py32)) (fun_app$b ?v2py92 (fun_app$a ?v3py63 ?v4py32))) :pattern ((fun_app$d ?v1py198 ?v4py32)) :pattern ((fun_app$a ?v3py63 ?v4py32)) )) (not (= (fun_app$h (fun_app$p comp$a ?v0py233) ?v1py198) (fun_app$j (fun_app$o comp$ ?v2py92) ?v3py63)))) :pattern ((fun_app$h (fun_app$p comp$a ?v0py233) ?v1py198) (fun_app$j (fun_app$o comp$ ?v2py92) ?v3py63)) )) :named A235))
(assert (! (forall ((?v0py234 B_b_fun$)(?v1py199 A_b_fun$)(?v2py93 A_b_fun$)(?v3py64 A_a_fun$)) (! (or (forall ((?v4py33 A$)) (! (= (fun_app$b ?v0py234 (fun_app$a ?v1py199 ?v4py33)) (fun_app$a ?v2py93 (fun_app$d ?v3py64 ?v4py33))) :pattern ((fun_app$a ?v1py199 ?v4py33)) :pattern ((fun_app$d ?v3py64 ?v4py33)) )) (not (= (fun_app$j (fun_app$o comp$ ?v0py234) ?v1py199) (fun_app$h (fun_app$p comp$a ?v2py93) ?v3py64)))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py234) ?v1py199) (fun_app$h (fun_app$p comp$a ?v2py93) ?v3py64)) )) :named A236))
(assert (! (forall ((?v0py235 B_b_fun$)(?v1py200 A_b_fun$)(?v2py94 B_b_fun$)(?v3py65 A_b_fun$)) (! (or (forall ((?v4py34 A$)) (! (= (fun_app$b ?v0py235 (fun_app$a ?v1py200 ?v4py34)) (fun_app$b ?v2py94 (fun_app$a ?v3py65 ?v4py34))) :pattern ((fun_app$a ?v1py200 ?v4py34)) :pattern ((fun_app$a ?v3py65 ?v4py34)) )) (not (= (fun_app$j (fun_app$o comp$ ?v0py235) ?v1py200) (fun_app$j (fun_app$o comp$ ?v2py94) ?v3py65)))) :pattern ((fun_app$j (fun_app$o comp$ ?v0py235) ?v1py200) (fun_app$j (fun_app$o comp$ ?v2py94) ?v3py65)) )) :named A237))
(assert (! (forall ((?v0py236 A_b_fun$)(?v1py201 A_a_fun$)(?v2py95 A_a_fun$)) (! (= (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v0py236) ?v1py201)) ?v2py95) (fun_app$h (fun_app$p comp$a ?v0py236) (fun_app$ac (fun_app$ad comp$e ?v1py201) ?v2py95))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v0py236) ?v1py201)) ?v2py95)) :pattern ((fun_app$h (fun_app$p comp$a ?v0py236) (fun_app$ac (fun_app$ad comp$e ?v1py201) ?v2py95))) )) :named A238))
(assert (! (forall ((?v0py237 B_b_fun$)(?v1py202 A_b_fun$)(?v2py96 A_a_fun$)) (! (= (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v0py237) ?v1py202)) ?v2py96) (fun_app$j (fun_app$o comp$ ?v0py237) (fun_app$h (fun_app$p comp$a ?v1py202) ?v2py96))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v0py237) ?v1py202)) ?v2py96)) :pattern ((fun_app$j (fun_app$o comp$ ?v0py237) (fun_app$h (fun_app$p comp$a ?v1py202) ?v2py96))) )) :named A239))
(assert (! (forall ((?v0py238 A_b_fun$)(?v1py203 B_a_fun$)(?v2py97 A_b_fun$)) (! (= (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v0py238) ?v1py203)) ?v2py97) (fun_app$h (fun_app$p comp$a ?v0py238) (fun_app$y (fun_app$z comp$d ?v1py203) ?v2py97))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v0py238) ?v1py203)) ?v2py97)) :pattern ((fun_app$h (fun_app$p comp$a ?v0py238) (fun_app$y (fun_app$z comp$d ?v1py203) ?v2py97))) )) :named A240))
(assert (! (forall ((?v0py239 B_b_fun$)(?v1py204 B_b_fun$)(?v2py98 A_b_fun$)) (! (= (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v0py239) ?v1py204)) ?v2py98) (fun_app$j (fun_app$o comp$ ?v0py239) (fun_app$j (fun_app$o comp$ ?v1py204) ?v2py98))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v0py239) ?v1py204)) ?v2py98)) :pattern ((fun_app$j (fun_app$o comp$ ?v0py239) (fun_app$j (fun_app$o comp$ ?v1py204) ?v2py98))) )) :named A241))
(assert (! (forall ((?v0py240 A_b_fun$)(?v1py205 A_a_fun$)(?v2py99 A_a_fun$)) (! (= (fun_app$h (fun_app$p comp$a ?v0py240) (fun_app$ac (fun_app$ad comp$e ?v1py205) ?v2py99)) (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v0py240) ?v1py205)) ?v2py99)) :pattern ((fun_app$h (fun_app$p comp$a ?v0py240) (fun_app$ac (fun_app$ad comp$e ?v1py205) ?v2py99))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v0py240) ?v1py205)) ?v2py99)) )) :named A242))
(assert (! (forall ((?v0py241 A_b_fun$)(?v1py206 B_a_fun$)(?v2py100 A_b_fun$)) (! (= (fun_app$h (fun_app$p comp$a ?v0py241) (fun_app$y (fun_app$z comp$d ?v1py206) ?v2py100)) (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v0py241) ?v1py206)) ?v2py100)) :pattern ((fun_app$h (fun_app$p comp$a ?v0py241) (fun_app$y (fun_app$z comp$d ?v1py206) ?v2py100))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v0py241) ?v1py206)) ?v2py100)) )) :named A243))
(assert (! (forall ((?v0py242 B_b_fun$)(?v1py207 A_b_fun$)(?v2py101 A_a_fun$)) (! (= (fun_app$j (fun_app$o comp$ ?v0py242) (fun_app$h (fun_app$p comp$a ?v1py207) ?v2py101)) (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v0py242) ?v1py207)) ?v2py101)) :pattern ((fun_app$j (fun_app$o comp$ ?v0py242) (fun_app$h (fun_app$p comp$a ?v1py207) ?v2py101))) :pattern ((fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v0py242) ?v1py207)) ?v2py101)) )) :named A244))
(assert (! (forall ((?v0py243 B_b_fun$)(?v1py208 B_b_fun$)(?v2py102 A_b_fun$)) (! (= (fun_app$j (fun_app$o comp$ ?v0py243) (fun_app$j (fun_app$o comp$ ?v1py208) ?v2py102)) (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v0py243) ?v1py208)) ?v2py102)) :pattern ((fun_app$j (fun_app$o comp$ ?v0py243) (fun_app$j (fun_app$o comp$ ?v1py208) ?v2py102))) :pattern ((fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v0py243) ?v1py208)) ?v2py102)) )) :named A245))
(assert (! (forall ((?v0py244 B_b_fun$)(?v1py209 A_b_fun$)(?v2py103 A_bool_fun$)(?v3py66 A_b_tree_fun$)(?v4py35 A_a_fun$)(?v5py27 A_bool_fun$)(?v6py0 A_b_tree_fun$)(?v7py0 A_a_fun$)) (! (= (fun_app$ae (comp$l (map_tree$b ?v0py244)) (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ ?v1py209) ?v2py103) ?v3py66) ?v4py35) ?v5py27) ?v6py0) ?v7py0)) (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ (fun_app$j (fun_app$o comp$ ?v0py244) ?v1py209)) ?v2py103) (fun_app$ae (comp$l (map_tree$b ?v0py244)) ?v3py66)) ?v4py35) ?v5py27) (fun_app$ae (comp$l (map_tree$b ?v0py244)) ?v6py0)) ?v7py0)) :pattern ((fun_app$ae (comp$l (map_tree$b ?v0py244)) (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ ?v1py209) ?v2py103) ?v3py66) ?v4py35) ?v5py27) ?v6py0) ?v7py0))) :pattern ((fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ (fun_app$j (fun_app$o comp$ ?v0py244) ?v1py209)) ?v2py103) (fun_app$ae (comp$l (map_tree$b ?v0py244)) ?v3py66)) ?v4py35) ?v5py27) (fun_app$ae (comp$l (map_tree$b ?v0py244)) ?v6py0)) ?v7py0)) )) :named A246))
(assert (! (forall ((?v0py245 A_b_fun$)(?v1py210 A_a_fun$)(?v2py104 A_bool_fun$)(?v3py67 A_a_tree_fun$)(?v4py36 A_a_fun$)(?v5py28 A_bool_fun$)(?v6py1 A_a_tree_fun$)(?v7py1 A_a_fun$)) (! (= (fun_app$al (comp$m (map_tree$f ?v0py245)) (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (fun_app$ar (corec_tree$a ?v1py210) ?v2py104) ?v3py67) ?v4py36) ?v5py28) ?v6py1) ?v7py1)) (fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ (fun_app$h (fun_app$p comp$a ?v0py245) ?v1py210)) ?v2py104) (fun_app$al (comp$m (map_tree$f ?v0py245)) ?v3py67)) ?v4py36) ?v5py28) (fun_app$al (comp$m (map_tree$f ?v0py245)) ?v6py1)) ?v7py1)) :pattern ((fun_app$al (comp$m (map_tree$f ?v0py245)) (fun_app$am (fun_app$an (fun_app$ao (fun_app$ap (fun_app$aq (fun_app$ar (corec_tree$a ?v1py210) ?v2py104) ?v3py67) ?v4py36) ?v5py28) ?v6py1) ?v7py1))) :pattern ((fun_app$af (fun_app$ag (fun_app$ah (fun_app$ai (fun_app$aj (fun_app$ak (corec_tree$ (fun_app$h (fun_app$p comp$a ?v0py245) ?v1py210)) ?v2py104) (fun_app$al (comp$m (map_tree$f ?v0py245)) ?v3py67)) ?v4py36) ?v5py28) (fun_app$al (comp$m (map_tree$f ?v0py245)) ?v6py1)) ?v7py1)) )) :named A247))
(assert (! (forall ((?v0py246 A_bool_fun$)(?v1py211 A$)(?v2py105 A_tree$)(?v3py68 A_tree$)) (! (and (or (not (pred_tree$ ?v0py246 (node$a ?v1py211 ?v2py105 ?v3py68))) (and (fun_app$as ?v0py246 ?v1py211) (pred_tree$ ?v0py246 ?v2py105) (pred_tree$ ?v0py246 ?v3py68))) (or (pred_tree$ ?v0py246 (node$a ?v1py211 ?v2py105 ?v3py68)) (not (fun_app$as ?v0py246 ?v1py211)) (not (pred_tree$ ?v0py246 ?v2py105)) (not (pred_tree$ ?v0py246 ?v3py68)))) :pattern ((pred_tree$ ?v0py246 (node$a ?v1py211 ?v2py105 ?v3py68))) )) :named A248))
(assert (! (forall ((?v0py247 B_bool_fun$)(?v1py212 B$)(?v2py106 B_tree$)(?v3py69 B_tree$)) (! (and (or (not (pred_tree$a ?v0py247 (node$b ?v1py212 ?v2py106 ?v3py69))) (and (fun_app$at ?v0py247 ?v1py212) (pred_tree$a ?v0py247 ?v2py106) (pred_tree$a ?v0py247 ?v3py69))) (or (pred_tree$a ?v0py247 (node$b ?v1py212 ?v2py106 ?v3py69)) (not (fun_app$at ?v0py247 ?v1py212)) (not (pred_tree$a ?v0py247 ?v2py106)) (not (pred_tree$a ?v0py247 ?v3py69)))) :pattern ((pred_tree$a ?v0py247 (node$b ?v1py212 ?v2py106 ?v3py69))) )) :named A249))
(assert (! (forall ((?v0py248 A_b_fun_bool_fun$)(?v1py213 A_b_fun$)(?v2py107 A_b_fun_tree$)(?v3py70 A_b_fun_tree$)) (! (and (or (not (pred_tree$b ?v0py248 (node$ ?v1py213 ?v2py107 ?v3py70))) (and (fun_app$au ?v0py248 ?v1py213) (pred_tree$b ?v0py248 ?v2py107) (pred_tree$b ?v0py248 ?v3py70))) (or (pred_tree$b ?v0py248 (node$ ?v1py213 ?v2py107 ?v3py70)) (not (fun_app$au ?v0py248 ?v1py213)) (not (pred_tree$b ?v0py248 ?v2py107)) (not (pred_tree$b ?v0py248 ?v3py70)))) :pattern ((pred_tree$b ?v0py248 (node$ ?v1py213 ?v2py107 ?v3py70))) )) :named A250))
(assert (! (forall ((?v0py249 B_b_fun$)(?v1py214 A_b_fun$)(?v2py108 A_a_fun$)(?v3py71 A_a_fun$)(?v4py37 A$)) (! (= (fun_app$k (map_tree$b ?v0py249) (fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ ?v1py214) ?v2py108) ?v3py71) ?v4py37)) (fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ (fun_app$j (fun_app$o comp$ ?v0py249) ?v1py214)) ?v2py108) ?v3py71) ?v4py37)) :pattern ((fun_app$k (map_tree$b ?v0py249) (fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ ?v1py214) ?v2py108) ?v3py71) ?v4py37))) :pattern ((fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ (fun_app$j (fun_app$o comp$ ?v0py249) ?v1py214)) ?v2py108) ?v3py71) ?v4py37)) )) :named A251))
(assert (! (forall ((?v0py250 A_b_fun$)(?v1py215 A_a_fun$)(?v2py109 A_a_fun$)(?v3py72 A_a_fun$)(?v4py38 A$)) (! (= (fun_app$m (map_tree$f ?v0py250) (fun_app$ax (fun_app$am (fun_app$ay (unfold_tree$a ?v1py215) ?v2py109) ?v3py72) ?v4py38)) (fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ (fun_app$h (fun_app$p comp$a ?v0py250) ?v1py215)) ?v2py109) ?v3py72) ?v4py38)) :pattern ((fun_app$m (map_tree$f ?v0py250) (fun_app$ax (fun_app$am (fun_app$ay (unfold_tree$a ?v1py215) ?v2py109) ?v3py72) ?v4py38))) :pattern ((fun_app$av (fun_app$af (fun_app$aw (unfold_tree$ (fun_app$h (fun_app$p comp$a ?v0py250) ?v1py215)) ?v2py109) ?v3py72) ?v4py38)) )) :named A252))
(assert (! (forall ((?v0py251 B$)(?v1py216 B_tree$)(?v2py110 B_b_tree_bool_fun_fun$)) (! (or (fun_app$q (fun_app$az ?v2py110 ?v0py251) ?v1py216) (not (member$ ?v0py251 (set_tree$ ?v1py216))) (not (fun_app$q (fun_app$az ?v2py110 (root$a (?v3!27 ?v2py110))) (?v3!27 ?v2py110))) (and (member$ (?v3!29 ?v2py110) (set_tree$ (left$a (?v4!28 ?v2py110)))) (fun_app$q (fun_app$az ?v2py110 (?v3!29 ?v2py110)) (left$a (?v4!28 ?v2py110))) (not (fun_app$q (fun_app$az ?v2py110 (?v3!29 ?v2py110)) (?v4!28 ?v2py110)))) (and (member$ (?v3!31 ?v2py110) (set_tree$ (right$a (?v4!30 ?v2py110)))) (fun_app$q (fun_app$az ?v2py110 (?v3!31 ?v2py110)) (right$a (?v4!30 ?v2py110))) (not (fun_app$q (fun_app$az ?v2py110 (?v3!31 ?v2py110)) (?v4!30 ?v2py110))))) :pattern ((fun_app$q (fun_app$az ?v2py110 ?v0py251) ?v1py216)) )) :named A253))
(assert (! (forall ((?v0py252 A_b_fun$)(?v1py217 A_b_fun_tree$)(?v2py111 A_b_fun_a_b_fun_tree_bool_fun_fun$)) (! (or (not (member$a ?v0py252 (set_tree$a ?v1py217))) (fun_app$s (fun_app$ba ?v2py111 ?v0py252) ?v1py217) (not (fun_app$s (fun_app$ba ?v2py111 (root$d (?v3!32 ?v2py111))) (?v3!32 ?v2py111))) (and (member$a (?v3!36 ?v2py111) (set_tree$a (right$d (?v4!35 ?v2py111)))) (fun_app$s (fun_app$ba ?v2py111 (?v3!36 ?v2py111)) (right$d (?v4!35 ?v2py111))) (not (fun_app$s (fun_app$ba ?v2py111 (?v3!36 ?v2py111)) (?v4!35 ?v2py111)))) (and (member$a (?v3!34 ?v2py111) (set_tree$a (left$d (?v4!33 ?v2py111)))) (fun_app$s (fun_app$ba ?v2py111 (?v3!34 ?v2py111)) (left$d (?v4!33 ?v2py111))) (not (fun_app$s (fun_app$ba ?v2py111 (?v3!34 ?v2py111)) (?v4!33 ?v2py111))))) :pattern ((fun_app$s (fun_app$ba ?v2py111 ?v0py252) ?v1py217)) )) :named A254))
(assert (! (forall ((?v0py253 A$)(?v1py218 A_tree$)(?v2py112 A_a_tree_bool_fun_fun$)) (! (or (fun_app$u (fun_app$bb ?v2py112 ?v0py253) ?v1py218) (not (member$b ?v0py253 (set_tree$b ?v1py218))) (not (fun_app$u (fun_app$bb ?v2py112 (root$ (?v3!37 ?v2py112))) (?v3!37 ?v2py112))) (and (member$b (?v3!39 ?v2py112) (set_tree$b (left$ (?v4!38 ?v2py112)))) (fun_app$u (fun_app$bb ?v2py112 (?v3!39 ?v2py112)) (left$ (?v4!38 ?v2py112))) (not (fun_app$u (fun_app$bb ?v2py112 (?v3!39 ?v2py112)) (?v4!38 ?v2py112)))) (and (member$b (?v3!41 ?v2py112) (set_tree$b (right$ (?v4!40 ?v2py112)))) (fun_app$u (fun_app$bb ?v2py112 (?v3!41 ?v2py112)) (right$ (?v4!40 ?v2py112))) (not (fun_app$u (fun_app$bb ?v2py112 (?v3!41 ?v2py112)) (?v4!40 ?v2py112))))) :pattern ((fun_app$u (fun_app$bb ?v2py112 ?v0py253) ?v1py218)) )) :named A255))
(assert (! (forall ((?v0py254 A_b_fun$)(?v1py219 A_a_fun$)(?v2py113 A$)(?v3py73 A_b_fun$)(?v4py39 A_a_fun$)(?v5py29 A$)) (! (or (not (= (fun_app$a ?v0py254 (fun_app$d ?v1py219 ?v2py113)) (fun_app$a ?v3py73 (fun_app$d ?v4py39 ?v5py29)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a ?v0py254) ?v1py219) ?v2py113) (fun_app$a (fun_app$h (fun_app$p comp$a ?v3py73) ?v4py39) ?v5py29))) :pattern ((fun_app$a ?v0py254 (fun_app$d ?v1py219 ?v2py113)) (fun_app$a ?v3py73 (fun_app$d ?v4py39 ?v5py29))) )) :named A256))
(assert (! (forall ((?v0py255 A_b_fun$)(?v1py220 A_a_fun$)(?v2py114 A$)(?v3py74 B_b_fun$)(?v4py40 A_b_fun$)(?v5py30 A$)) (! (or (not (= (fun_app$a ?v0py255 (fun_app$d ?v1py220 ?v2py114)) (fun_app$b ?v3py74 (fun_app$a ?v4py40 ?v5py30)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a ?v0py255) ?v1py220) ?v2py114) (fun_app$a (fun_app$j (fun_app$o comp$ ?v3py74) ?v4py40) ?v5py30))) :pattern ((fun_app$a ?v0py255 (fun_app$d ?v1py220 ?v2py114)) (fun_app$b ?v3py74 (fun_app$a ?v4py40 ?v5py30))) )) :named A257))
(assert (! (forall ((?v0py256 B_b_fun$)(?v1py221 A_b_fun$)(?v2py115 A$)(?v3py75 A_b_fun$)(?v4py41 A_a_fun$)(?v5py31 A$)) (! (or (not (= (fun_app$b ?v0py256 (fun_app$a ?v1py221 ?v2py115)) (fun_app$a ?v3py75 (fun_app$d ?v4py41 ?v5py31)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ ?v0py256) ?v1py221) ?v2py115) (fun_app$a (fun_app$h (fun_app$p comp$a ?v3py75) ?v4py41) ?v5py31))) :pattern ((fun_app$b ?v0py256 (fun_app$a ?v1py221 ?v2py115)) (fun_app$a ?v3py75 (fun_app$d ?v4py41 ?v5py31))) )) :named A258))
(assert (! (forall ((?v0py257 B_b_fun$)(?v1py222 A_b_fun$)(?v2py116 A$)(?v3py76 B_b_fun$)(?v4py42 A_b_fun$)(?v5py32 A$)) (! (or (not (= (fun_app$b ?v0py257 (fun_app$a ?v1py222 ?v2py116)) (fun_app$b ?v3py76 (fun_app$a ?v4py42 ?v5py32)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ ?v0py257) ?v1py222) ?v2py116) (fun_app$a (fun_app$j (fun_app$o comp$ ?v3py76) ?v4py42) ?v5py32))) :pattern ((fun_app$b ?v0py257 (fun_app$a ?v1py222 ?v2py116)) (fun_app$b ?v3py76 (fun_app$a ?v4py42 ?v5py32))) )) :named A259))
(assert (! (forall ((?v0py258 A_b_fun$)(?v1py223 A_a_fun$)(?v2py117 A$)(?v3py77 A_b_fun$)(?v4py43 A_a_fun$)) (! (or (not (= (fun_app$a ?v0py258 (fun_app$d ?v1py223 ?v2py117)) (fun_app$a ?v3py77 (fun_app$d ?v4py43 ?v2py117)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a ?v0py258) ?v1py223) ?v2py117) (fun_app$a (fun_app$h (fun_app$p comp$a ?v3py77) ?v4py43) ?v2py117))) :pattern ((fun_app$a ?v0py258 (fun_app$d ?v1py223 ?v2py117)) (fun_app$a ?v3py77 (fun_app$d ?v4py43 ?v2py117))) )) :named A260))
(assert (! (forall ((?v0py259 A_b_fun$)(?v1py224 A_a_fun$)(?v2py118 A$)(?v3py78 B_b_fun$)(?v4py44 A_b_fun$)) (! (or (not (= (fun_app$a ?v0py259 (fun_app$d ?v1py224 ?v2py118)) (fun_app$b ?v3py78 (fun_app$a ?v4py44 ?v2py118)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a ?v0py259) ?v1py224) ?v2py118) (fun_app$a (fun_app$j (fun_app$o comp$ ?v3py78) ?v4py44) ?v2py118))) :pattern ((fun_app$a ?v0py259 (fun_app$d ?v1py224 ?v2py118)) (fun_app$b ?v3py78 (fun_app$a ?v4py44 ?v2py118))) )) :named A261))
(assert (! (forall ((?v0py260 B_b_fun$)(?v1py225 A_b_fun$)(?v2py119 A$)(?v3py79 A_b_fun$)(?v4py45 A_a_fun$)) (! (or (not (= (fun_app$b ?v0py260 (fun_app$a ?v1py225 ?v2py119)) (fun_app$a ?v3py79 (fun_app$d ?v4py45 ?v2py119)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ ?v0py260) ?v1py225) ?v2py119) (fun_app$a (fun_app$h (fun_app$p comp$a ?v3py79) ?v4py45) ?v2py119))) :pattern ((fun_app$b ?v0py260 (fun_app$a ?v1py225 ?v2py119)) (fun_app$a ?v3py79 (fun_app$d ?v4py45 ?v2py119))) )) :named A262))
(assert (! (forall ((?v0py261 B_b_fun$)(?v1py226 A_b_fun$)(?v2py120 A$)(?v3py80 B_b_fun$)(?v4py46 A_b_fun$)) (! (or (not (= (fun_app$b ?v0py261 (fun_app$a ?v1py226 ?v2py120)) (fun_app$b ?v3py80 (fun_app$a ?v4py46 ?v2py120)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ ?v0py261) ?v1py226) ?v2py120) (fun_app$a (fun_app$j (fun_app$o comp$ ?v3py80) ?v4py46) ?v2py120))) :pattern ((fun_app$b ?v0py261 (fun_app$a ?v1py226 ?v2py120)) (fun_app$b ?v3py80 (fun_app$a ?v4py46 ?v2py120))) )) :named A263))
(assert (! (forall ((?v0py262 A_a_fun$)(?v1py227 A_a_fun$)(?v2py121 A$)(?v3py81 A_a_fun$)(?v4py47 A_a_fun$)(?v5py33 A_b_fun$)) (! (or (not (= (fun_app$d ?v0py262 (fun_app$d ?v1py227 ?v2py121)) (fun_app$d ?v3py81 (fun_app$d ?v4py47 ?v2py121)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py33) ?v0py262)) ?v1py227) ?v2py121) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py33) ?v3py81)) ?v4py47) ?v2py121))) :pattern ((fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py33) ?v0py262)) ?v1py227) ?v2py121) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py33) ?v3py81)) ?v4py47) ?v2py121)) )) :named A264))
(assert (! (forall ((?v0py263 A_a_fun$)(?v1py228 A_a_fun$)(?v2py122 A$)(?v3py82 B_a_fun$)(?v4py48 A_b_fun$)(?v5py34 A_b_fun$)) (! (or (not (= (fun_app$d ?v0py263 (fun_app$d ?v1py228 ?v2py122)) (fun_app$c ?v3py82 (fun_app$a ?v4py48 ?v2py122)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py34) ?v0py263)) ?v1py228) ?v2py122) (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v5py34) ?v3py82)) ?v4py48) ?v2py122))) :pattern ((fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py34) ?v0py263)) ?v1py228) ?v2py122) (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v5py34) ?v3py82)) ?v4py48) ?v2py122)) )) :named A265))
(assert (! (forall ((?v0py264 A_b_fun$)(?v1py229 A_a_fun$)(?v2py123 A$)(?v3py83 A_b_fun$)(?v4py49 A_a_fun$)(?v5py35 B_b_fun$)) (! (or (not (= (fun_app$a ?v0py264 (fun_app$d ?v1py229 ?v2py123)) (fun_app$a ?v3py83 (fun_app$d ?v4py49 ?v2py123)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py35) ?v0py264)) ?v1py229) ?v2py123) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py35) ?v3py83)) ?v4py49) ?v2py123))) :pattern ((fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py35) ?v0py264)) ?v1py229) ?v2py123) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py35) ?v3py83)) ?v4py49) ?v2py123)) )) :named A266))
(assert (! (forall ((?v0py265 A_b_fun$)(?v1py230 A_a_fun$)(?v2py124 A$)(?v3py84 B_b_fun$)(?v4py50 A_b_fun$)(?v5py36 B_b_fun$)) (! (or (not (= (fun_app$a ?v0py265 (fun_app$d ?v1py230 ?v2py124)) (fun_app$b ?v3py84 (fun_app$a ?v4py50 ?v2py124)))) (= (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py36) ?v0py265)) ?v1py230) ?v2py124) (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v5py36) ?v3py84)) ?v4py50) ?v2py124))) :pattern ((fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py36) ?v0py265)) ?v1py230) ?v2py124) (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v5py36) ?v3py84)) ?v4py50) ?v2py124)) )) :named A267))
(assert (! (forall ((?v0py266 B_a_fun$)(?v1py231 A_b_fun$)(?v2py125 A$)(?v3py85 A_a_fun$)(?v4py51 A_a_fun$)(?v5py37 A_b_fun$)) (! (or (not (= (fun_app$c ?v0py266 (fun_app$a ?v1py231 ?v2py125)) (fun_app$d ?v3py85 (fun_app$d ?v4py51 ?v2py125)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v5py37) ?v0py266)) ?v1py231) ?v2py125) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py37) ?v3py85)) ?v4py51) ?v2py125))) :pattern ((fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$w (fun_app$x comp$b ?v5py37) ?v0py266)) ?v1py231) ?v2py125) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$h (fun_app$p comp$a ?v5py37) ?v3py85)) ?v4py51) ?v2py125)) )) :named A268))
(assert (! (forall ((?v0py267 B_b_fun$)(?v1py232 A_b_fun$)(?v2py126 A$)(?v3py86 A_b_fun$)(?v4py52 A_a_fun$)(?v5py38 B_b_fun$)) (! (or (not (= (fun_app$b ?v0py267 (fun_app$a ?v1py232 ?v2py126)) (fun_app$a ?v3py86 (fun_app$d ?v4py52 ?v2py126)))) (= (fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v5py38) ?v0py267)) ?v1py232) ?v2py126) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py38) ?v3py86)) ?v4py52) ?v2py126))) :pattern ((fun_app$a (fun_app$j (fun_app$o comp$ (fun_app$aa (fun_app$ab comp$c ?v5py38) ?v0py267)) ?v1py232) ?v2py126) (fun_app$a (fun_app$h (fun_app$p comp$a (fun_app$j (fun_app$o comp$ ?v5py38) ?v3py86)) ?v4py52) ?v2py126)) )) :named A269))
(assert (! (forall ((?v0py268 B_tree_b_tree_bool_fun_fun$)(?v1py233 B_tree$)(?v2py127 B_tree$)(?v3py87 B_b_bool_fun_fun$)) (! (or (fun_app$q (rel_tree$ ?v3py87 ?v1py233) ?v2py127) (not (fun_app$q (fun_app$r ?v0py268 ?v1py233) ?v2py127)) (and (fun_app$q (fun_app$r ?v0py268 (?v4!43 ?v3py87 ?v0py268)) (?v5!42 ?v3py87 ?v0py268)) (or (not (fun_app$at (fun_app$bc ?v3py87 (root$a (?v4!43 ?v3py87 ?v0py268))) (root$a (?v5!42 ?v3py87 ?v0py268)))) (not (fun_app$q (fun_app$r ?v0py268 (left$a (?v4!43 ?v3py87 ?v0py268))) (left$a (?v5!42 ?v3py87 ?v0py268)))) (not (fun_app$q (fun_app$r ?v0py268 (right$a (?v4!43 ?v3py87 ?v0py268))) (right$a (?v5!42 ?v3py87 ?v0py268))))))) :pattern ((fun_app$q (fun_app$r ?v0py268 ?v1py233) ?v2py127) (fun_app$q (rel_tree$ ?v3py87 ?v1py233) ?v2py127)) )) :named A270))
(assert (! (forall ((?v0py269 B_tree_a_b_fun_tree_bool_fun_fun$)(?v1py234 B_tree$)(?v2py128 A_b_fun_tree$)(?v3py88 B_a_b_fun_bool_fun_fun$)) (! (or (fun_app$s (rel_tree$a ?v3py88 ?v1py234) ?v2py128) (not (fun_app$s (fun_app$bd ?v0py269 ?v1py234) ?v2py128)) (and (fun_app$s (fun_app$bd ?v0py269 (?v4!45 ?v3py88 ?v0py269)) (?v5!44 ?v3py88 ?v0py269)) (or (not (fun_app$au (fun_app$be ?v3py88 (root$a (?v4!45 ?v3py88 ?v0py269))) (root$d (?v5!44 ?v3py88 ?v0py269)))) (not (fun_app$s (fun_app$bd ?v0py269 (left$a (?v4!45 ?v3py88 ?v0py269))) (left$d (?v5!44 ?v3py88 ?v0py269)))) (not (fun_app$s (fun_app$bd ?v0py269 (right$a (?v4!45 ?v3py88 ?v0py269))) (right$d (?v5!44 ?v3py88 ?v0py269))))))) :pattern ((fun_app$s (fun_app$bd ?v0py269 ?v1py234) ?v2py128) (fun_app$s (rel_tree$a ?v3py88 ?v1py234) ?v2py128)) )) :named A271))
(assert (! (forall ((?v0py270 B_tree_a_tree_bool_fun_fun$)(?v1py235 B_tree$)(?v2py129 A_tree$)(?v3py89 B_a_bool_fun_fun$)) (! (or (fun_app$u (rel_tree$b ?v3py89 ?v1py235) ?v2py129) (not (fun_app$u (fun_app$bf ?v0py270 ?v1py235) ?v2py129)) (and (fun_app$u (fun_app$bf ?v0py270 (?v4!47 ?v3py89 ?v0py270)) (?v5!46 ?v3py89 ?v0py270)) (or (not (fun_app$as (fun_app$bg ?v3py89 (root$a (?v4!47 ?v3py89 ?v0py270))) (root$ (?v5!46 ?v3py89 ?v0py270)))) (not (fun_app$u (fun_app$bf ?v0py270 (left$a (?v4!47 ?v3py89 ?v0py270))) (left$ (?v5!46 ?v3py89 ?v0py270)))) (not (fun_app$u (fun_app$bf ?v0py270 (right$a (?v4!47 ?v3py89 ?v0py270))) (right$ (?v5!46 ?v3py89 ?v0py270))))))) :pattern ((fun_app$u (fun_app$bf ?v0py270 ?v1py235) ?v2py129) (fun_app$u (rel_tree$b ?v3py89 ?v1py235) ?v2py129)) )) :named A272))
(assert (! (forall ((?v0py271 A_b_fun_tree_b_tree_bool_fun_fun$)(?v1py236 A_b_fun_tree$)(?v2py130 B_tree$)(?v3py90 A_b_fun_b_bool_fun_fun$)) (! (or (fun_app$q (rel_tree$c ?v3py90 ?v1py236) ?v2py130) (not (fun_app$q (fun_app$bh ?v0py271 ?v1py236) ?v2py130)) (and (fun_app$q (fun_app$bh ?v0py271 (?v4!49 ?v3py90 ?v0py271)) (?v5!48 ?v3py90 ?v0py271)) (or (not (fun_app$at (fun_app$bi ?v3py90 (root$d (?v4!49 ?v3py90 ?v0py271))) (root$a (?v5!48 ?v3py90 ?v0py271)))) (not (fun_app$q (fun_app$bh ?v0py271 (left$d (?v4!49 ?v3py90 ?v0py271))) (left$a (?v5!48 ?v3py90 ?v0py271)))) (not (fun_app$q (fun_app$bh ?v0py271 (right$d (?v4!49 ?v3py90 ?v0py271))) (right$a (?v5!48 ?v3py90 ?v0py271))))))) :pattern ((fun_app$q (fun_app$bh ?v0py271 ?v1py236) ?v2py130) (fun_app$q (rel_tree$c ?v3py90 ?v1py236) ?v2py130)) )) :named A273))
(assert (! (forall ((?v0py272 A_b_fun_tree_a_b_fun_tree_bool_fun_fun$)(?v1py237 A_b_fun_tree$)(?v2py131 A_b_fun_tree$)(?v3py91 A_b_fun_a_b_fun_bool_fun_fun$)) (! (or (fun_app$s (rel_tree$d ?v3py91 ?v1py237) ?v2py131) (not (fun_app$s (fun_app$t ?v0py272 ?v1py237) ?v2py131)) (and (fun_app$s (fun_app$t ?v0py272 (?v4!51 ?v3py91 ?v0py272)) (?v5!50 ?v3py91 ?v0py272)) (or (not (fun_app$au (fun_app$bj ?v3py91 (root$d (?v4!51 ?v3py91 ?v0py272))) (root$d (?v5!50 ?v3py91 ?v0py272)))) (not (fun_app$s (fun_app$t ?v0py272 (left$d (?v4!51 ?v3py91 ?v0py272))) (left$d (?v5!50 ?v3py91 ?v0py272)))) (not (fun_app$s (fun_app$t ?v0py272 (right$d (?v4!51 ?v3py91 ?v0py272))) (right$d (?v5!50 ?v3py91 ?v0py272))))))) :pattern ((fun_app$s (fun_app$t ?v0py272 ?v1py237) ?v2py131) (fun_app$s (rel_tree$d ?v3py91 ?v1py237) ?v2py131)) )) :named A274))
(assert (! (forall ((?v0py273 A_b_fun_tree_a_tree_bool_fun_fun$)(?v1py238 A_b_fun_tree$)(?v2py132 A_tree$)(?v3py92 A_b_fun_a_bool_fun_fun$)) (! (or (fun_app$u (rel_tree$e ?v3py92 ?v1py238) ?v2py132) (not (fun_app$u (fun_app$bk ?v0py273 ?v1py238) ?v2py132)) (and (fun_app$u (fun_app$bk ?v0py273 (?v4!53 ?v3py92 ?v0py273)) (?v5!52 ?v3py92 ?v0py273)) (or (not (fun_app$as (fun_app$bl ?v3py92 (root$d (?v4!53 ?v3py92 ?v0py273))) (root$ (?v5!52 ?v3py92 ?v0py273)))) (not (fun_app$u (fun_app$bk ?v0py273 (left$d (?v4!53 ?v3py92 ?v0py273))) (left$ (?v5!52 ?v3py92 ?v0py273)))) (not (fun_app$u (fun_app$bk ?v0py273 (right$d (?v4!53 ?v3py92 ?v0py273))) (right$ (?v5!52 ?v3py92 ?v0py273))))))) :pattern ((fun_app$u (fun_app$bk ?v0py273 ?v1py238) ?v2py132) (fun_app$u (rel_tree$e ?v3py92 ?v1py238) ?v2py132)) )) :named A275))
(assert (! (forall ((?v0py274 A_tree_b_tree_bool_fun_fun$)(?v1py239 A_tree$)(?v2py133 B_tree$)(?v3py93 A_b_bool_fun_fun$)) (! (or (fun_app$q (rel_tree$f ?v3py93 ?v1py239) ?v2py133) (not (fun_app$q (fun_app$bm ?v0py274 ?v1py239) ?v2py133)) (and (fun_app$q (fun_app$bm ?v0py274 (?v4!55 ?v3py93 ?v0py274)) (?v5!54 ?v3py93 ?v0py274)) (or (not (fun_app$at (fun_app$bn ?v3py93 (root$ (?v4!55 ?v3py93 ?v0py274))) (root$a (?v5!54 ?v3py93 ?v0py274)))) (not (fun_app$q (fun_app$bm ?v0py274 (left$ (?v4!55 ?v3py93 ?v0py274))) (left$a (?v5!54 ?v3py93 ?v0py274)))) (not (fun_app$q (fun_app$bm ?v0py274 (right$ (?v4!55 ?v3py93 ?v0py274))) (right$a (?v5!54 ?v3py93 ?v0py274))))))) :pattern ((fun_app$q (fun_app$bm ?v0py274 ?v1py239) ?v2py133) (fun_app$q (rel_tree$f ?v3py93 ?v1py239) ?v2py133)) )) :named A276))
(assert (! (forall ((?v0py275 A_tree_a_b_fun_tree_bool_fun_fun$)(?v1py240 A_tree$)(?v2py134 A_b_fun_tree$)(?v3py94 A_a_b_fun_bool_fun_fun$)) (! (or (fun_app$s (rel_tree$g ?v3py94 ?v1py240) ?v2py134) (not (fun_app$s (fun_app$bo ?v0py275 ?v1py240) ?v2py134)) (and (fun_app$s (fun_app$bo ?v0py275 (?v4!57 ?v3py94 ?v0py275)) (?v5!56 ?v3py94 ?v0py275)) (or (not (fun_app$au (fun_app$bp ?v3py94 (root$ (?v4!57 ?v3py94 ?v0py275))) (root$d (?v5!56 ?v3py94 ?v0py275)))) (not (fun_app$s (fun_app$bo ?v0py275 (left$ (?v4!57 ?v3py94 ?v0py275))) (left$d (?v5!56 ?v3py94 ?v0py275)))) (not (fun_app$s (fun_app$bo ?v0py275 (right$ (?v4!57 ?v3py94 ?v0py275))) (right$d (?v5!56 ?v3py94 ?v0py275))))))) :pattern ((fun_app$s (fun_app$bo ?v0py275 ?v1py240) ?v2py134) (fun_app$s (rel_tree$g ?v3py94 ?v1py240) ?v2py134)) )) :named A277))
(assert (! (forall ((?v0py276 A_tree_a_tree_bool_fun_fun$)(?v1py241 A_tree$)(?v2py135 A_tree$)(?v3py95 A_a_bool_fun_fun$)) (! (or (fun_app$u (rel_tree$h ?v3py95 ?v1py241) ?v2py135) (not (fun_app$u (fun_app$v ?v0py276 ?v1py241) ?v2py135)) (and (fun_app$u (fun_app$v ?v0py276 (?v4!59 ?v3py95 ?v0py276)) (?v5!58 ?v3py95 ?v0py276)) (or (not (fun_app$as (fun_app$bq ?v3py95 (root$ (?v4!59 ?v3py95 ?v0py276))) (root$ (?v5!58 ?v3py95 ?v0py276)))) (not (fun_app$u (fun_app$v ?v0py276 (left$ (?v4!59 ?v3py95 ?v0py276))) (left$ (?v5!58 ?v3py95 ?v0py276)))) (not (fun_app$u (fun_app$v ?v0py276 (right$ (?v4!59 ?v3py95 ?v0py276))) (right$ (?v5!58 ?v3py95 ?v0py276))))))) :pattern ((fun_app$u (fun_app$v ?v0py276 ?v1py241) ?v2py135) (fun_app$u (rel_tree$h ?v3py95 ?v1py241) ?v2py135)) )) :named A278))
(assert (! (forall ((?v0py277 A_a_bool_fun_fun$)(?v1py242 A$)(?v2py136 A_tree$)(?v3py96 A_tree$)(?v4py53 A$)(?v5py39 A_tree$)(?v6py2 A_tree$)) (! (and (or (not (fun_app$u (rel_tree$h ?v0py277 (node$a ?v1py242 ?v2py136 ?v3py96)) (node$a ?v4py53 ?v5py39 ?v6py2))) (and (fun_app$as (fun_app$bq ?v0py277 ?v1py242) ?v4py53) (fun_app$u (rel_tree$h ?v0py277 ?v2py136) ?v5py39) (fun_app$u (rel_tree$h ?v0py277 ?v3py96) ?v6py2))) (or (fun_app$u (rel_tree$h ?v0py277 (node$a ?v1py242 ?v2py136 ?v3py96)) (node$a ?v4py53 ?v5py39 ?v6py2)) (not (fun_app$as (fun_app$bq ?v0py277 ?v1py242) ?v4py53)) (not (fun_app$u (rel_tree$h ?v0py277 ?v2py136) ?v5py39)) (not (fun_app$u (rel_tree$h ?v0py277 ?v3py96) ?v6py2)))) :pattern ((fun_app$u (rel_tree$h ?v0py277 (node$a ?v1py242 ?v2py136 ?v3py96)) (node$a ?v4py53 ?v5py39 ?v6py2))) )) :named A279))
(assert (! (forall ((?v0py278 A_b_bool_fun_fun$)(?v1py243 A$)(?v2py137 A_tree$)(?v3py97 A_tree$)(?v4py54 B$)(?v5py40 B_tree$)(?v6py3 B_tree$)) (! (and (or (not (fun_app$q (rel_tree$f ?v0py278 (node$a ?v1py243 ?v2py137 ?v3py97)) (node$b ?v4py54 ?v5py40 ?v6py3))) (and (fun_app$at (fun_app$bn ?v0py278 ?v1py243) ?v4py54) (fun_app$q (rel_tree$f ?v0py278 ?v2py137) ?v5py40) (fun_app$q (rel_tree$f ?v0py278 ?v3py97) ?v6py3))) (or (fun_app$q (rel_tree$f ?v0py278 (node$a ?v1py243 ?v2py137 ?v3py97)) (node$b ?v4py54 ?v5py40 ?v6py3)) (not (fun_app$at (fun_app$bn ?v0py278 ?v1py243) ?v4py54)) (not (fun_app$q (rel_tree$f ?v0py278 ?v2py137) ?v5py40)) (not (fun_app$q (rel_tree$f ?v0py278 ?v3py97) ?v6py3)))) :pattern ((fun_app$q (rel_tree$f ?v0py278 (node$a ?v1py243 ?v2py137 ?v3py97)) (node$b ?v4py54 ?v5py40 ?v6py3))) )) :named A280))
(assert (! (forall ((?v0py279 A_a_b_fun_bool_fun_fun$)(?v1py244 A$)(?v2py138 A_tree$)(?v3py98 A_tree$)(?v4py55 A_b_fun$)(?v5py41 A_b_fun_tree$)(?v6py4 A_b_fun_tree$)) (! (and (or (not (fun_app$s (rel_tree$g ?v0py279 (node$a ?v1py244 ?v2py138 ?v3py98)) (node$ ?v4py55 ?v5py41 ?v6py4))) (and (fun_app$au (fun_app$bp ?v0py279 ?v1py244) ?v4py55) (fun_app$s (rel_tree$g ?v0py279 ?v2py138) ?v5py41) (fun_app$s (rel_tree$g ?v0py279 ?v3py98) ?v6py4))) (or (fun_app$s (rel_tree$g ?v0py279 (node$a ?v1py244 ?v2py138 ?v3py98)) (node$ ?v4py55 ?v5py41 ?v6py4)) (not (fun_app$au (fun_app$bp ?v0py279 ?v1py244) ?v4py55)) (not (fun_app$s (rel_tree$g ?v0py279 ?v2py138) ?v5py41)) (not (fun_app$s (rel_tree$g ?v0py279 ?v3py98) ?v6py4)))) :pattern ((fun_app$s (rel_tree$g ?v0py279 (node$a ?v1py244 ?v2py138 ?v3py98)) (node$ ?v4py55 ?v5py41 ?v6py4))) )) :named A281))
(assert (! (forall ((?v0py280 B_a_bool_fun_fun$)(?v1py245 B$)(?v2py139 B_tree$)(?v3py99 B_tree$)(?v4py56 A$)(?v5py42 A_tree$)(?v6py5 A_tree$)) (! (and (or (not (fun_app$u (rel_tree$b ?v0py280 (node$b ?v1py245 ?v2py139 ?v3py99)) (node$a ?v4py56 ?v5py42 ?v6py5))) (and (fun_app$as (fun_app$bg ?v0py280 ?v1py245) ?v4py56) (fun_app$u (rel_tree$b ?v0py280 ?v2py139) ?v5py42) (fun_app$u (rel_tree$b ?v0py280 ?v3py99) ?v6py5))) (or (fun_app$u (rel_tree$b ?v0py280 (node$b ?v1py245 ?v2py139 ?v3py99)) (node$a ?v4py56 ?v5py42 ?v6py5)) (not (fun_app$as (fun_app$bg ?v0py280 ?v1py245) ?v4py56)) (not (fun_app$u (rel_tree$b ?v0py280 ?v2py139) ?v5py42)) (not (fun_app$u (rel_tree$b ?v0py280 ?v3py99) ?v6py5)))) :pattern ((fun_app$u (rel_tree$b ?v0py280 (node$b ?v1py245 ?v2py139 ?v3py99)) (node$a ?v4py56 ?v5py42 ?v6py5))) )) :named A282))
(assert (! (forall ((?v0py281 B_b_bool_fun_fun$)(?v1py246 B$)(?v2py140 B_tree$)(?v3py100 B_tree$)(?v4py57 B$)(?v5py43 B_tree$)(?v6py6 B_tree$)) (! (and (or (not (fun_app$q (rel_tree$ ?v0py281 (node$b ?v1py246 ?v2py140 ?v3py100)) (node$b ?v4py57 ?v5py43 ?v6py6))) (and (fun_app$at (fun_app$bc ?v0py281 ?v1py246) ?v4py57) (fun_app$q (rel_tree$ ?v0py281 ?v2py140) ?v5py43) (fun_app$q (rel_tree$ ?v0py281 ?v3py100) ?v6py6))) (or (fun_app$q (rel_tree$ ?v0py281 (node$b ?v1py246 ?v2py140 ?v3py100)) (node$b ?v4py57 ?v5py43 ?v6py6)) (not (fun_app$at (fun_app$bc ?v0py281 ?v1py246) ?v4py57)) (not (fun_app$q (rel_tree$ ?v0py281 ?v2py140) ?v5py43)) (not (fun_app$q (rel_tree$ ?v0py281 ?v3py100) ?v6py6)))) :pattern ((fun_app$q (rel_tree$ ?v0py281 (node$b ?v1py246 ?v2py140 ?v3py100)) (node$b ?v4py57 ?v5py43 ?v6py6))) )) :named A283))
(assert (! (forall ((?v0py282 B_a_b_fun_bool_fun_fun$)(?v1py247 B$)(?v2py141 B_tree$)(?v3py101 B_tree$)(?v4py58 A_b_fun$)(?v5py44 A_b_fun_tree$)(?v6py7 A_b_fun_tree$)) (! (and (or (not (fun_app$s (rel_tree$a ?v0py282 (node$b ?v1py247 ?v2py141 ?v3py101)) (node$ ?v4py58 ?v5py44 ?v6py7))) (and (fun_app$au (fun_app$be ?v0py282 ?v1py247) ?v4py58) (fun_app$s (rel_tree$a ?v0py282 ?v2py141) ?v5py44) (fun_app$s (rel_tree$a ?v0py282 ?v3py101) ?v6py7))) (or (fun_app$s (rel_tree$a ?v0py282 (node$b ?v1py247 ?v2py141 ?v3py101)) (node$ ?v4py58 ?v5py44 ?v6py7)) (not (fun_app$au (fun_app$be ?v0py282 ?v1py247) ?v4py58)) (not (fun_app$s (rel_tree$a ?v0py282 ?v2py141) ?v5py44)) (not (fun_app$s (rel_tree$a ?v0py282 ?v3py101) ?v6py7)))) :pattern ((fun_app$s (rel_tree$a ?v0py282 (node$b ?v1py247 ?v2py141 ?v3py101)) (node$ ?v4py58 ?v5py44 ?v6py7))) )) :named A284))
(assert (! (forall ((?v0py283 A_b_fun_a_bool_fun_fun$)(?v1py248 A_b_fun$)(?v2py142 A_b_fun_tree$)(?v3py102 A_b_fun_tree$)(?v4py59 A$)(?v5py45 A_tree$)(?v6py8 A_tree$)) (! (and (or (not (fun_app$u (rel_tree$e ?v0py283 (node$ ?v1py248 ?v2py142 ?v3py102)) (node$a ?v4py59 ?v5py45 ?v6py8))) (and (fun_app$as (fun_app$bl ?v0py283 ?v1py248) ?v4py59) (fun_app$u (rel_tree$e ?v0py283 ?v2py142) ?v5py45) (fun_app$u (rel_tree$e ?v0py283 ?v3py102) ?v6py8))) (or (fun_app$u (rel_tree$e ?v0py283 (node$ ?v1py248 ?v2py142 ?v3py102)) (node$a ?v4py59 ?v5py45 ?v6py8)) (not (fun_app$as (fun_app$bl ?v0py283 ?v1py248) ?v4py59)) (not (fun_app$u (rel_tree$e ?v0py283 ?v2py142) ?v5py45)) (not (fun_app$u (rel_tree$e ?v0py283 ?v3py102) ?v6py8)))) :pattern ((fun_app$u (rel_tree$e ?v0py283 (node$ ?v1py248 ?v2py142 ?v3py102)) (node$a ?v4py59 ?v5py45 ?v6py8))) )) :named A285))
(assert (! (forall ((?v0py284 A_b_fun_b_bool_fun_fun$)(?v1py249 A_b_fun$)(?v2py143 A_b_fun_tree$)(?v3py103 A_b_fun_tree$)(?v4py60 B$)(?v5py46 B_tree$)(?v6py9 B_tree$)) (! (and (or (not (fun_app$q (rel_tree$c ?v0py284 (node$ ?v1py249 ?v2py143 ?v3py103)) (node$b ?v4py60 ?v5py46 ?v6py9))) (and (fun_app$at (fun_app$bi ?v0py284 ?v1py249) ?v4py60) (fun_app$q (rel_tree$c ?v0py284 ?v2py143) ?v5py46) (fun_app$q (rel_tree$c ?v0py284 ?v3py103) ?v6py9))) (or (fun_app$q (rel_tree$c ?v0py284 (node$ ?v1py249 ?v2py143 ?v3py103)) (node$b ?v4py60 ?v5py46 ?v6py9)) (not (fun_app$at (fun_app$bi ?v0py284 ?v1py249) ?v4py60)) (not (fun_app$q (rel_tree$c ?v0py284 ?v2py143) ?v5py46)) (not (fun_app$q (rel_tree$c ?v0py284 ?v3py103) ?v6py9)))) :pattern ((fun_app$q (rel_tree$c ?v0py284 (node$ ?v1py249 ?v2py143 ?v3py103)) (node$b ?v4py60 ?v5py46 ?v6py9))) )) :named A286))
(assert (! (forall ((?v0py285 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py250 A_b_fun$)(?v2py144 A_b_fun_tree$)(?v3py104 A_b_fun_tree$)(?v4py61 A_b_fun$)(?v5py47 A_b_fun_tree$)(?v6py10 A_b_fun_tree$)) (! (and (or (not (fun_app$s (rel_tree$d ?v0py285 (node$ ?v1py250 ?v2py144 ?v3py104)) (node$ ?v4py61 ?v5py47 ?v6py10))) (and (fun_app$au (fun_app$bj ?v0py285 ?v1py250) ?v4py61) (fun_app$s (rel_tree$d ?v0py285 ?v2py144) ?v5py47) (fun_app$s (rel_tree$d ?v0py285 ?v3py104) ?v6py10))) (or (fun_app$s (rel_tree$d ?v0py285 (node$ ?v1py250 ?v2py144 ?v3py104)) (node$ ?v4py61 ?v5py47 ?v6py10)) (not (fun_app$au (fun_app$bj ?v0py285 ?v1py250) ?v4py61)) (not (fun_app$s (rel_tree$d ?v0py285 ?v2py144) ?v5py47)) (not (fun_app$s (rel_tree$d ?v0py285 ?v3py104) ?v6py10)))) :pattern ((fun_app$s (rel_tree$d ?v0py285 (node$ ?v1py250 ?v2py144 ?v3py104)) (node$ ?v4py61 ?v5py47 ?v6py10))) )) :named A287))
(assert (! (forall ((?v0py286 A_a_bool_fun_fun$)(?v1py251 A_tree$)(?v2py145 A_tree$)) (! (or (not (fun_app$u (rel_tree$h ?v0py286 ?v1py251) ?v2py145)) (and (= ?v1py251 (node$a (?v3!65 ?v2py145 ?v1py251 ?v0py286) (?v4!64 ?v2py145 ?v1py251 ?v0py286) (?v5!63 ?v2py145 ?v1py251 ?v0py286))) (= ?v2py145 (node$a (?v6!62 ?v2py145 ?v1py251 ?v0py286) (?v7!61 ?v2py145 ?v1py251 ?v0py286) (?v8!60 ?v2py145 ?v1py251 ?v0py286))) (fun_app$as (fun_app$bq ?v0py286 (?v3!65 ?v2py145 ?v1py251 ?v0py286)) (?v6!62 ?v2py145 ?v1py251 ?v0py286)) (fun_app$u (rel_tree$h ?v0py286 (?v4!64 ?v2py145 ?v1py251 ?v0py286)) (?v7!61 ?v2py145 ?v1py251 ?v0py286)) (fun_app$u (rel_tree$h ?v0py286 (?v5!63 ?v2py145 ?v1py251 ?v0py286)) (?v8!60 ?v2py145 ?v1py251 ?v0py286)))) :pattern ((?v4!64 ?v2py145 ?v1py251 ?v0py286)) :pattern ((?v7!61 ?v2py145 ?v1py251 ?v0py286)) :pattern ((?v3!65 ?v2py145 ?v1py251 ?v0py286)) :pattern ((?v5!63 ?v2py145 ?v1py251 ?v0py286)) :pattern ((?v6!62 ?v2py145 ?v1py251 ?v0py286)) :pattern ((?v8!60 ?v2py145 ?v1py251 ?v0py286)) )) :named A288))
(assert (! (forall ((?v0py287 A_b_bool_fun_fun$)(?v1py252 A_tree$)(?v2py146 B_tree$)) (! (or (not (fun_app$q (rel_tree$f ?v0py287 ?v1py252) ?v2py146)) (and (= ?v1py252 (node$a (?v3!71 ?v2py146 ?v1py252 ?v0py287) (?v4!70 ?v2py146 ?v1py252 ?v0py287) (?v5!69 ?v2py146 ?v1py252 ?v0py287))) (= ?v2py146 (node$b (?v6!68 ?v2py146 ?v1py252 ?v0py287) (?v7!67 ?v2py146 ?v1py252 ?v0py287) (?v8!66 ?v2py146 ?v1py252 ?v0py287))) (fun_app$at (fun_app$bn ?v0py287 (?v3!71 ?v2py146 ?v1py252 ?v0py287)) (?v6!68 ?v2py146 ?v1py252 ?v0py287)) (fun_app$q (rel_tree$f ?v0py287 (?v4!70 ?v2py146 ?v1py252 ?v0py287)) (?v7!67 ?v2py146 ?v1py252 ?v0py287)) (fun_app$q (rel_tree$f ?v0py287 (?v5!69 ?v2py146 ?v1py252 ?v0py287)) (?v8!66 ?v2py146 ?v1py252 ?v0py287)))) :pattern ((?v3!71 ?v2py146 ?v1py252 ?v0py287)) :pattern ((?v4!70 ?v2py146 ?v1py252 ?v0py287)) :pattern ((?v5!69 ?v2py146 ?v1py252 ?v0py287)) :pattern ((?v6!68 ?v2py146 ?v1py252 ?v0py287)) :pattern ((?v7!67 ?v2py146 ?v1py252 ?v0py287)) :pattern ((?v8!66 ?v2py146 ?v1py252 ?v0py287)) )) :named A289))
(assert (! (forall ((?v0py288 A_a_b_fun_bool_fun_fun$)(?v1py253 A_tree$)(?v2py147 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$g ?v0py288 ?v1py253) ?v2py147)) (and (= ?v1py253 (node$a (?v3!77 ?v2py147 ?v1py253 ?v0py288) (?v4!76 ?v2py147 ?v1py253 ?v0py288) (?v5!75 ?v2py147 ?v1py253 ?v0py288))) (= ?v2py147 (node$ (?v6!74 ?v2py147 ?v1py253 ?v0py288) (?v7!73 ?v2py147 ?v1py253 ?v0py288) (?v8!72 ?v2py147 ?v1py253 ?v0py288))) (fun_app$au (fun_app$bp ?v0py288 (?v3!77 ?v2py147 ?v1py253 ?v0py288)) (?v6!74 ?v2py147 ?v1py253 ?v0py288)) (fun_app$s (rel_tree$g ?v0py288 (?v4!76 ?v2py147 ?v1py253 ?v0py288)) (?v7!73 ?v2py147 ?v1py253 ?v0py288)) (fun_app$s (rel_tree$g ?v0py288 (?v5!75 ?v2py147 ?v1py253 ?v0py288)) (?v8!72 ?v2py147 ?v1py253 ?v0py288)))) :pattern ((?v3!77 ?v2py147 ?v1py253 ?v0py288)) :pattern ((?v4!76 ?v2py147 ?v1py253 ?v0py288)) :pattern ((?v5!75 ?v2py147 ?v1py253 ?v0py288)) :pattern ((?v6!74 ?v2py147 ?v1py253 ?v0py288)) :pattern ((?v7!73 ?v2py147 ?v1py253 ?v0py288)) :pattern ((?v8!72 ?v2py147 ?v1py253 ?v0py288)) )) :named A290))
(assert (! (forall ((?v0py289 B_a_bool_fun_fun$)(?v1py254 B_tree$)(?v2py148 A_tree$)) (! (or (not (fun_app$u (rel_tree$b ?v0py289 ?v1py254) ?v2py148)) (and (= ?v1py254 (node$b (?v3!83 ?v2py148 ?v1py254 ?v0py289) (?v4!82 ?v2py148 ?v1py254 ?v0py289) (?v5!81 ?v2py148 ?v1py254 ?v0py289))) (= ?v2py148 (node$a (?v6!80 ?v2py148 ?v1py254 ?v0py289) (?v7!79 ?v2py148 ?v1py254 ?v0py289) (?v8!78 ?v2py148 ?v1py254 ?v0py289))) (fun_app$as (fun_app$bg ?v0py289 (?v3!83 ?v2py148 ?v1py254 ?v0py289)) (?v6!80 ?v2py148 ?v1py254 ?v0py289)) (fun_app$u (rel_tree$b ?v0py289 (?v4!82 ?v2py148 ?v1py254 ?v0py289)) (?v7!79 ?v2py148 ?v1py254 ?v0py289)) (fun_app$u (rel_tree$b ?v0py289 (?v5!81 ?v2py148 ?v1py254 ?v0py289)) (?v8!78 ?v2py148 ?v1py254 ?v0py289)))) :pattern ((?v3!83 ?v2py148 ?v1py254 ?v0py289)) :pattern ((?v4!82 ?v2py148 ?v1py254 ?v0py289)) :pattern ((?v5!81 ?v2py148 ?v1py254 ?v0py289)) :pattern ((?v6!80 ?v2py148 ?v1py254 ?v0py289)) :pattern ((?v7!79 ?v2py148 ?v1py254 ?v0py289)) :pattern ((?v8!78 ?v2py148 ?v1py254 ?v0py289)) )) :named A291))
(assert (! (forall ((?v0py290 B_b_bool_fun_fun$)(?v1py255 B_tree$)(?v2py149 B_tree$)) (! (or (not (fun_app$q (rel_tree$ ?v0py290 ?v1py255) ?v2py149)) (and (= ?v1py255 (node$b (?v3!89 ?v2py149 ?v1py255 ?v0py290) (?v4!88 ?v2py149 ?v1py255 ?v0py290) (?v5!87 ?v2py149 ?v1py255 ?v0py290))) (= ?v2py149 (node$b (?v6!86 ?v2py149 ?v1py255 ?v0py290) (?v7!85 ?v2py149 ?v1py255 ?v0py290) (?v8!84 ?v2py149 ?v1py255 ?v0py290))) (fun_app$at (fun_app$bc ?v0py290 (?v3!89 ?v2py149 ?v1py255 ?v0py290)) (?v6!86 ?v2py149 ?v1py255 ?v0py290)) (fun_app$q (rel_tree$ ?v0py290 (?v4!88 ?v2py149 ?v1py255 ?v0py290)) (?v7!85 ?v2py149 ?v1py255 ?v0py290)) (fun_app$q (rel_tree$ ?v0py290 (?v5!87 ?v2py149 ?v1py255 ?v0py290)) (?v8!84 ?v2py149 ?v1py255 ?v0py290)))) :pattern ((?v3!89 ?v2py149 ?v1py255 ?v0py290)) :pattern ((?v4!88 ?v2py149 ?v1py255 ?v0py290)) :pattern ((?v5!87 ?v2py149 ?v1py255 ?v0py290)) :pattern ((?v6!86 ?v2py149 ?v1py255 ?v0py290)) :pattern ((?v7!85 ?v2py149 ?v1py255 ?v0py290)) :pattern ((?v8!84 ?v2py149 ?v1py255 ?v0py290)) )) :named A292))
(assert (! (forall ((?v0py291 B_a_b_fun_bool_fun_fun$)(?v1py256 B_tree$)(?v2py150 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$a ?v0py291 ?v1py256) ?v2py150)) (and (= ?v1py256 (node$b (?v3!95 ?v2py150 ?v1py256 ?v0py291) (?v4!94 ?v2py150 ?v1py256 ?v0py291) (?v5!93 ?v2py150 ?v1py256 ?v0py291))) (= ?v2py150 (node$ (?v6!92 ?v2py150 ?v1py256 ?v0py291) (?v7!91 ?v2py150 ?v1py256 ?v0py291) (?v8!90 ?v2py150 ?v1py256 ?v0py291))) (fun_app$au (fun_app$be ?v0py291 (?v3!95 ?v2py150 ?v1py256 ?v0py291)) (?v6!92 ?v2py150 ?v1py256 ?v0py291)) (fun_app$s (rel_tree$a ?v0py291 (?v4!94 ?v2py150 ?v1py256 ?v0py291)) (?v7!91 ?v2py150 ?v1py256 ?v0py291)) (fun_app$s (rel_tree$a ?v0py291 (?v5!93 ?v2py150 ?v1py256 ?v0py291)) (?v8!90 ?v2py150 ?v1py256 ?v0py291)))) :pattern ((?v3!95 ?v2py150 ?v1py256 ?v0py291)) :pattern ((?v4!94 ?v2py150 ?v1py256 ?v0py291)) :pattern ((?v5!93 ?v2py150 ?v1py256 ?v0py291)) :pattern ((?v6!92 ?v2py150 ?v1py256 ?v0py291)) :pattern ((?v7!91 ?v2py150 ?v1py256 ?v0py291)) :pattern ((?v8!90 ?v2py150 ?v1py256 ?v0py291)) )) :named A293))
(assert (! (forall ((?v0py292 A_b_fun_a_bool_fun_fun$)(?v1py257 A_b_fun_tree$)(?v2py151 A_tree$)) (! (or (not (fun_app$u (rel_tree$e ?v0py292 ?v1py257) ?v2py151)) (and (= ?v1py257 (node$ (?v3!101 ?v2py151 ?v1py257 ?v0py292) (?v4!100 ?v2py151 ?v1py257 ?v0py292) (?v5!99 ?v2py151 ?v1py257 ?v0py292))) (= ?v2py151 (node$a (?v6!98 ?v2py151 ?v1py257 ?v0py292) (?v7!97 ?v2py151 ?v1py257 ?v0py292) (?v8!96 ?v2py151 ?v1py257 ?v0py292))) (fun_app$as (fun_app$bl ?v0py292 (?v3!101 ?v2py151 ?v1py257 ?v0py292)) (?v6!98 ?v2py151 ?v1py257 ?v0py292)) (fun_app$u (rel_tree$e ?v0py292 (?v4!100 ?v2py151 ?v1py257 ?v0py292)) (?v7!97 ?v2py151 ?v1py257 ?v0py292)) (fun_app$u (rel_tree$e ?v0py292 (?v5!99 ?v2py151 ?v1py257 ?v0py292)) (?v8!96 ?v2py151 ?v1py257 ?v0py292)))) :pattern ((?v3!101 ?v2py151 ?v1py257 ?v0py292)) :pattern ((?v4!100 ?v2py151 ?v1py257 ?v0py292)) :pattern ((?v5!99 ?v2py151 ?v1py257 ?v0py292)) :pattern ((?v6!98 ?v2py151 ?v1py257 ?v0py292)) :pattern ((?v7!97 ?v2py151 ?v1py257 ?v0py292)) :pattern ((?v8!96 ?v2py151 ?v1py257 ?v0py292)) )) :named A294))
(assert (! (forall ((?v0py293 A_b_fun_b_bool_fun_fun$)(?v1py258 A_b_fun_tree$)(?v2py152 B_tree$)) (! (or (not (fun_app$q (rel_tree$c ?v0py293 ?v1py258) ?v2py152)) (and (= ?v1py258 (node$ (?v3!107 ?v2py152 ?v1py258 ?v0py293) (?v4!106 ?v2py152 ?v1py258 ?v0py293) (?v5!105 ?v2py152 ?v1py258 ?v0py293))) (= ?v2py152 (node$b (?v6!104 ?v2py152 ?v1py258 ?v0py293) (?v7!103 ?v2py152 ?v1py258 ?v0py293) (?v8!102 ?v2py152 ?v1py258 ?v0py293))) (fun_app$at (fun_app$bi ?v0py293 (?v3!107 ?v2py152 ?v1py258 ?v0py293)) (?v6!104 ?v2py152 ?v1py258 ?v0py293)) (fun_app$q (rel_tree$c ?v0py293 (?v4!106 ?v2py152 ?v1py258 ?v0py293)) (?v7!103 ?v2py152 ?v1py258 ?v0py293)) (fun_app$q (rel_tree$c ?v0py293 (?v5!105 ?v2py152 ?v1py258 ?v0py293)) (?v8!102 ?v2py152 ?v1py258 ?v0py293)))) :pattern ((?v3!107 ?v2py152 ?v1py258 ?v0py293)) :pattern ((?v4!106 ?v2py152 ?v1py258 ?v0py293)) :pattern ((?v5!105 ?v2py152 ?v1py258 ?v0py293)) :pattern ((?v6!104 ?v2py152 ?v1py258 ?v0py293)) :pattern ((?v7!103 ?v2py152 ?v1py258 ?v0py293)) :pattern ((?v8!102 ?v2py152 ?v1py258 ?v0py293)) )) :named A295))
(assert (! (forall ((?v0py294 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py259 A_b_fun_tree$)(?v2py153 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$d ?v0py294 ?v1py259) ?v2py153)) (and (= ?v1py259 (node$ (?v3!113 ?v2py153 ?v1py259 ?v0py294) (?v4!112 ?v2py153 ?v1py259 ?v0py294) (?v5!111 ?v2py153 ?v1py259 ?v0py294))) (= ?v2py153 (node$ (?v6!110 ?v2py153 ?v1py259 ?v0py294) (?v7!109 ?v2py153 ?v1py259 ?v0py294) (?v8!108 ?v2py153 ?v1py259 ?v0py294))) (fun_app$au (fun_app$bj ?v0py294 (?v3!113 ?v2py153 ?v1py259 ?v0py294)) (?v6!110 ?v2py153 ?v1py259 ?v0py294)) (fun_app$s (rel_tree$d ?v0py294 (?v4!112 ?v2py153 ?v1py259 ?v0py294)) (?v7!109 ?v2py153 ?v1py259 ?v0py294)) (fun_app$s (rel_tree$d ?v0py294 (?v5!111 ?v2py153 ?v1py259 ?v0py294)) (?v8!108 ?v2py153 ?v1py259 ?v0py294)))) :pattern ((?v3!113 ?v2py153 ?v1py259 ?v0py294)) :pattern ((?v4!112 ?v2py153 ?v1py259 ?v0py294)) :pattern ((?v5!111 ?v2py153 ?v1py259 ?v0py294)) :pattern ((?v6!110 ?v2py153 ?v1py259 ?v0py294)) :pattern ((?v7!109 ?v2py153 ?v1py259 ?v0py294)) :pattern ((?v8!108 ?v2py153 ?v1py259 ?v0py294)) )) :named A296))
(assert (! (forall ((?v0py295 A_a_bool_fun_fun$)(?v1py260 A$)(?v2py154 A$)(?v3py105 A_tree$)(?v4py62 A_tree$)(?v5py48 A_tree$)(?v6py11 A_tree$)) (! (or (fun_app$u (rel_tree$h ?v0py295 (node$a ?v1py260 ?v3py105 ?v5py48)) (node$a ?v2py154 ?v4py62 ?v6py11)) (not (fun_app$as (fun_app$bq ?v0py295 ?v1py260) ?v2py154)) (not (fun_app$u (rel_tree$h ?v0py295 ?v3py105) ?v4py62)) (not (fun_app$u (rel_tree$h ?v0py295 ?v5py48) ?v6py11))) :pattern ((fun_app$u (rel_tree$h ?v0py295 (node$a ?v1py260 ?v3py105 ?v5py48)) (node$a ?v2py154 ?v4py62 ?v6py11))) )) :named A297))
(assert (! (forall ((?v0py296 A_b_bool_fun_fun$)(?v1py261 A$)(?v2py155 B$)(?v3py106 A_tree$)(?v4py63 B_tree$)(?v5py49 A_tree$)(?v6py12 B_tree$)) (! (or (fun_app$q (rel_tree$f ?v0py296 (node$a ?v1py261 ?v3py106 ?v5py49)) (node$b ?v2py155 ?v4py63 ?v6py12)) (not (fun_app$at (fun_app$bn ?v0py296 ?v1py261) ?v2py155)) (not (fun_app$q (rel_tree$f ?v0py296 ?v3py106) ?v4py63)) (not (fun_app$q (rel_tree$f ?v0py296 ?v5py49) ?v6py12))) :pattern ((fun_app$q (rel_tree$f ?v0py296 (node$a ?v1py261 ?v3py106 ?v5py49)) (node$b ?v2py155 ?v4py63 ?v6py12))) )) :named A298))
(assert (! (forall ((?v0py297 A_a_b_fun_bool_fun_fun$)(?v1py262 A$)(?v2py156 A_b_fun$)(?v3py107 A_tree$)(?v4py64 A_b_fun_tree$)(?v5py50 A_tree$)(?v6py13 A_b_fun_tree$)) (! (or (fun_app$s (rel_tree$g ?v0py297 (node$a ?v1py262 ?v3py107 ?v5py50)) (node$ ?v2py156 ?v4py64 ?v6py13)) (not (fun_app$au (fun_app$bp ?v0py297 ?v1py262) ?v2py156)) (not (fun_app$s (rel_tree$g ?v0py297 ?v3py107) ?v4py64)) (not (fun_app$s (rel_tree$g ?v0py297 ?v5py50) ?v6py13))) :pattern ((fun_app$s (rel_tree$g ?v0py297 (node$a ?v1py262 ?v3py107 ?v5py50)) (node$ ?v2py156 ?v4py64 ?v6py13))) )) :named A299))
(assert (! (forall ((?v0py298 B_a_bool_fun_fun$)(?v1py263 B$)(?v2py157 A$)(?v3py108 B_tree$)(?v4py65 A_tree$)(?v5py51 B_tree$)(?v6py14 A_tree$)) (! (or (fun_app$u (rel_tree$b ?v0py298 (node$b ?v1py263 ?v3py108 ?v5py51)) (node$a ?v2py157 ?v4py65 ?v6py14)) (not (fun_app$as (fun_app$bg ?v0py298 ?v1py263) ?v2py157)) (not (fun_app$u (rel_tree$b ?v0py298 ?v3py108) ?v4py65)) (not (fun_app$u (rel_tree$b ?v0py298 ?v5py51) ?v6py14))) :pattern ((fun_app$u (rel_tree$b ?v0py298 (node$b ?v1py263 ?v3py108 ?v5py51)) (node$a ?v2py157 ?v4py65 ?v6py14))) )) :named A300))
(assert (! (forall ((?v0py299 B_b_bool_fun_fun$)(?v1py264 B$)(?v2py158 B$)(?v3py109 B_tree$)(?v4py66 B_tree$)(?v5py52 B_tree$)(?v6py15 B_tree$)) (! (or (fun_app$q (rel_tree$ ?v0py299 (node$b ?v1py264 ?v3py109 ?v5py52)) (node$b ?v2py158 ?v4py66 ?v6py15)) (not (fun_app$at (fun_app$bc ?v0py299 ?v1py264) ?v2py158)) (not (fun_app$q (rel_tree$ ?v0py299 ?v3py109) ?v4py66)) (not (fun_app$q (rel_tree$ ?v0py299 ?v5py52) ?v6py15))) :pattern ((fun_app$q (rel_tree$ ?v0py299 (node$b ?v1py264 ?v3py109 ?v5py52)) (node$b ?v2py158 ?v4py66 ?v6py15))) )) :named A301))
(assert (! (forall ((?v0py300 B_a_b_fun_bool_fun_fun$)(?v1py265 B$)(?v2py159 A_b_fun$)(?v3py110 B_tree$)(?v4py67 A_b_fun_tree$)(?v5py53 B_tree$)(?v6py16 A_b_fun_tree$)) (! (or (fun_app$s (rel_tree$a ?v0py300 (node$b ?v1py265 ?v3py110 ?v5py53)) (node$ ?v2py159 ?v4py67 ?v6py16)) (not (fun_app$au (fun_app$be ?v0py300 ?v1py265) ?v2py159)) (not (fun_app$s (rel_tree$a ?v0py300 ?v3py110) ?v4py67)) (not (fun_app$s (rel_tree$a ?v0py300 ?v5py53) ?v6py16))) :pattern ((fun_app$s (rel_tree$a ?v0py300 (node$b ?v1py265 ?v3py110 ?v5py53)) (node$ ?v2py159 ?v4py67 ?v6py16))) )) :named A302))
(assert (! (forall ((?v0py301 A_b_fun_a_bool_fun_fun$)(?v1py266 A_b_fun$)(?v2py160 A$)(?v3py111 A_b_fun_tree$)(?v4py68 A_tree$)(?v5py54 A_b_fun_tree$)(?v6py17 A_tree$)) (! (or (fun_app$u (rel_tree$e ?v0py301 (node$ ?v1py266 ?v3py111 ?v5py54)) (node$a ?v2py160 ?v4py68 ?v6py17)) (not (fun_app$as (fun_app$bl ?v0py301 ?v1py266) ?v2py160)) (not (fun_app$u (rel_tree$e ?v0py301 ?v3py111) ?v4py68)) (not (fun_app$u (rel_tree$e ?v0py301 ?v5py54) ?v6py17))) :pattern ((fun_app$u (rel_tree$e ?v0py301 (node$ ?v1py266 ?v3py111 ?v5py54)) (node$a ?v2py160 ?v4py68 ?v6py17))) )) :named A303))
(assert (! (forall ((?v0py302 A_b_fun_b_bool_fun_fun$)(?v1py267 A_b_fun$)(?v2py161 B$)(?v3py112 A_b_fun_tree$)(?v4py69 B_tree$)(?v5py55 A_b_fun_tree$)(?v6py18 B_tree$)) (! (or (fun_app$q (rel_tree$c ?v0py302 (node$ ?v1py267 ?v3py112 ?v5py55)) (node$b ?v2py161 ?v4py69 ?v6py18)) (not (fun_app$at (fun_app$bi ?v0py302 ?v1py267) ?v2py161)) (not (fun_app$q (rel_tree$c ?v0py302 ?v3py112) ?v4py69)) (not (fun_app$q (rel_tree$c ?v0py302 ?v5py55) ?v6py18))) :pattern ((fun_app$q (rel_tree$c ?v0py302 (node$ ?v1py267 ?v3py112 ?v5py55)) (node$b ?v2py161 ?v4py69 ?v6py18))) )) :named A304))
(assert (! (forall ((?v0py303 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py268 A_b_fun$)(?v2py162 A_b_fun$)(?v3py113 A_b_fun_tree$)(?v4py70 A_b_fun_tree$)(?v5py56 A_b_fun_tree$)(?v6py19 A_b_fun_tree$)) (! (or (fun_app$s (rel_tree$d ?v0py303 (node$ ?v1py268 ?v3py113 ?v5py56)) (node$ ?v2py162 ?v4py70 ?v6py19)) (not (fun_app$au (fun_app$bj ?v0py303 ?v1py268) ?v2py162)) (not (fun_app$s (rel_tree$d ?v0py303 ?v3py113) ?v4py70)) (not (fun_app$s (rel_tree$d ?v0py303 ?v5py56) ?v6py19))) :pattern ((fun_app$s (rel_tree$d ?v0py303 (node$ ?v1py268 ?v3py113 ?v5py56)) (node$ ?v2py162 ?v4py70 ?v6py19))) )) :named A305))
(assert (! (forall ((?v0py304 B_b_bool_fun_fun$)(?v1py269 B_tree$)(?v2py163 B_tree$)) (! (or (not (fun_app$q (rel_tree$ ?v0py304 ?v1py269) ?v2py163)) (fun_app$q (rel_tree$ ?v0py304 (left$a ?v1py269)) (left$a ?v2py163))) :pattern ((fun_app$q (rel_tree$ ?v0py304 (left$a ?v1py269)) (left$a ?v2py163))) )) :named A306))
(assert (! (forall ((?v0py305 B_a_b_fun_bool_fun_fun$)(?v1py270 B_tree$)(?v2py164 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$a ?v0py305 ?v1py270) ?v2py164)) (fun_app$s (rel_tree$a ?v0py305 (left$a ?v1py270)) (left$d ?v2py164))) :pattern ((fun_app$s (rel_tree$a ?v0py305 (left$a ?v1py270)) (left$d ?v2py164))) )) :named A307))
(assert (! (forall ((?v0py306 B_a_bool_fun_fun$)(?v1py271 B_tree$)(?v2py165 A_tree$)) (! (or (not (fun_app$u (rel_tree$b ?v0py306 ?v1py271) ?v2py165)) (fun_app$u (rel_tree$b ?v0py306 (left$a ?v1py271)) (left$ ?v2py165))) :pattern ((fun_app$u (rel_tree$b ?v0py306 (left$a ?v1py271)) (left$ ?v2py165))) )) :named A308))
(assert (! (forall ((?v0py307 A_b_fun_b_bool_fun_fun$)(?v1py272 A_b_fun_tree$)(?v2py166 B_tree$)) (! (or (not (fun_app$q (rel_tree$c ?v0py307 ?v1py272) ?v2py166)) (fun_app$q (rel_tree$c ?v0py307 (left$d ?v1py272)) (left$a ?v2py166))) :pattern ((fun_app$q (rel_tree$c ?v0py307 (left$d ?v1py272)) (left$a ?v2py166))) )) :named A309))
(assert (! (forall ((?v0py308 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py273 A_b_fun_tree$)(?v2py167 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$d ?v0py308 ?v1py273) ?v2py167)) (fun_app$s (rel_tree$d ?v0py308 (left$d ?v1py273)) (left$d ?v2py167))) :pattern ((fun_app$s (rel_tree$d ?v0py308 (left$d ?v1py273)) (left$d ?v2py167))) )) :named A310))
(assert (! (forall ((?v0py309 A_b_fun_a_bool_fun_fun$)(?v1py274 A_b_fun_tree$)(?v2py168 A_tree$)) (! (or (not (fun_app$u (rel_tree$e ?v0py309 ?v1py274) ?v2py168)) (fun_app$u (rel_tree$e ?v0py309 (left$d ?v1py274)) (left$ ?v2py168))) :pattern ((fun_app$u (rel_tree$e ?v0py309 (left$d ?v1py274)) (left$ ?v2py168))) )) :named A311))
(assert (! (forall ((?v0py310 A_b_bool_fun_fun$)(?v1py275 A_tree$)(?v2py169 B_tree$)) (! (or (not (fun_app$q (rel_tree$f ?v0py310 ?v1py275) ?v2py169)) (fun_app$q (rel_tree$f ?v0py310 (left$ ?v1py275)) (left$a ?v2py169))) :pattern ((fun_app$q (rel_tree$f ?v0py310 (left$ ?v1py275)) (left$a ?v2py169))) )) :named A312))
(assert (! (forall ((?v0py311 A_a_b_fun_bool_fun_fun$)(?v1py276 A_tree$)(?v2py170 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$g ?v0py311 ?v1py276) ?v2py170)) (fun_app$s (rel_tree$g ?v0py311 (left$ ?v1py276)) (left$d ?v2py170))) :pattern ((fun_app$s (rel_tree$g ?v0py311 (left$ ?v1py276)) (left$d ?v2py170))) )) :named A313))
(assert (! (forall ((?v0py312 A_a_bool_fun_fun$)(?v1py277 A_tree$)(?v2py171 A_tree$)) (! (or (not (fun_app$u (rel_tree$h ?v0py312 ?v1py277) ?v2py171)) (fun_app$u (rel_tree$h ?v0py312 (left$ ?v1py277)) (left$ ?v2py171))) :pattern ((fun_app$u (rel_tree$h ?v0py312 (left$ ?v1py277)) (left$ ?v2py171))) )) :named A314))
(assert (! (forall ((?v0py313 B_b_bool_fun_fun$)(?v1py278 B_tree$)(?v2py172 B_tree$)) (! (or (not (fun_app$q (rel_tree$ ?v0py313 ?v1py278) ?v2py172)) (fun_app$q (rel_tree$ ?v0py313 (right$a ?v1py278)) (right$a ?v2py172))) :pattern ((fun_app$q (rel_tree$ ?v0py313 (right$a ?v1py278)) (right$a ?v2py172))) )) :named A315))
(assert (! (forall ((?v0py314 B_a_b_fun_bool_fun_fun$)(?v1py279 B_tree$)(?v2py173 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$a ?v0py314 ?v1py279) ?v2py173)) (fun_app$s (rel_tree$a ?v0py314 (right$a ?v1py279)) (right$d ?v2py173))) :pattern ((fun_app$s (rel_tree$a ?v0py314 (right$a ?v1py279)) (right$d ?v2py173))) )) :named A316))
(assert (! (forall ((?v0py315 B_a_bool_fun_fun$)(?v1py280 B_tree$)(?v2py174 A_tree$)) (! (or (not (fun_app$u (rel_tree$b ?v0py315 ?v1py280) ?v2py174)) (fun_app$u (rel_tree$b ?v0py315 (right$a ?v1py280)) (right$ ?v2py174))) :pattern ((fun_app$u (rel_tree$b ?v0py315 (right$a ?v1py280)) (right$ ?v2py174))) )) :named A317))
(assert (! (forall ((?v0py316 A_b_fun_b_bool_fun_fun$)(?v1py281 A_b_fun_tree$)(?v2py175 B_tree$)) (! (or (not (fun_app$q (rel_tree$c ?v0py316 ?v1py281) ?v2py175)) (fun_app$q (rel_tree$c ?v0py316 (right$d ?v1py281)) (right$a ?v2py175))) :pattern ((fun_app$q (rel_tree$c ?v0py316 (right$d ?v1py281)) (right$a ?v2py175))) )) :named A318))
(assert (! (forall ((?v0py317 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py282 A_b_fun_tree$)(?v2py176 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$d ?v0py317 ?v1py282) ?v2py176)) (fun_app$s (rel_tree$d ?v0py317 (right$d ?v1py282)) (right$d ?v2py176))) :pattern ((fun_app$s (rel_tree$d ?v0py317 (right$d ?v1py282)) (right$d ?v2py176))) )) :named A319))
(assert (! (forall ((?v0py318 A_b_fun_a_bool_fun_fun$)(?v1py283 A_b_fun_tree$)(?v2py177 A_tree$)) (! (or (not (fun_app$u (rel_tree$e ?v0py318 ?v1py283) ?v2py177)) (fun_app$u (rel_tree$e ?v0py318 (right$d ?v1py283)) (right$ ?v2py177))) :pattern ((fun_app$u (rel_tree$e ?v0py318 (right$d ?v1py283)) (right$ ?v2py177))) )) :named A320))
(assert (! (forall ((?v0py319 A_b_bool_fun_fun$)(?v1py284 A_tree$)(?v2py178 B_tree$)) (! (or (not (fun_app$q (rel_tree$f ?v0py319 ?v1py284) ?v2py178)) (fun_app$q (rel_tree$f ?v0py319 (right$ ?v1py284)) (right$a ?v2py178))) :pattern ((fun_app$q (rel_tree$f ?v0py319 (right$ ?v1py284)) (right$a ?v2py178))) )) :named A321))
(assert (! (forall ((?v0py320 A_a_b_fun_bool_fun_fun$)(?v1py285 A_tree$)(?v2py179 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$g ?v0py320 ?v1py285) ?v2py179)) (fun_app$s (rel_tree$g ?v0py320 (right$ ?v1py285)) (right$d ?v2py179))) :pattern ((fun_app$s (rel_tree$g ?v0py320 (right$ ?v1py285)) (right$d ?v2py179))) )) :named A322))
(assert (! (forall ((?v0py321 A_a_bool_fun_fun$)(?v1py286 A_tree$)(?v2py180 A_tree$)) (! (or (not (fun_app$u (rel_tree$h ?v0py321 ?v1py286) ?v2py180)) (fun_app$u (rel_tree$h ?v0py321 (right$ ?v1py286)) (right$ ?v2py180))) :pattern ((fun_app$u (rel_tree$h ?v0py321 (right$ ?v1py286)) (right$ ?v2py180))) )) :named A323))
(assert (! (forall ((?v0py322 B_b_bool_fun_fun$)(?v1py287 B_tree$)(?v2py181 B_tree$)) (! (or (not (fun_app$q (rel_tree$ ?v0py322 ?v1py287) ?v2py181)) (fun_app$at (fun_app$bc ?v0py322 (root$a ?v1py287)) (root$a ?v2py181))) :pattern ((fun_app$q (rel_tree$ ?v0py322 ?v1py287) ?v2py181)) :pattern ((fun_app$at (fun_app$bc ?v0py322 (root$a ?v1py287)) (root$a ?v2py181))) )) :named A324))
(assert (! (forall ((?v0py323 B_a_b_fun_bool_fun_fun$)(?v1py288 B_tree$)(?v2py182 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$a ?v0py323 ?v1py288) ?v2py182)) (fun_app$au (fun_app$be ?v0py323 (root$a ?v1py288)) (root$d ?v2py182))) :pattern ((fun_app$s (rel_tree$a ?v0py323 ?v1py288) ?v2py182)) :pattern ((fun_app$au (fun_app$be ?v0py323 (root$a ?v1py288)) (root$d ?v2py182))) )) :named A325))
(assert (! (forall ((?v0py324 B_a_bool_fun_fun$)(?v1py289 B_tree$)(?v2py183 A_tree$)) (! (or (not (fun_app$u (rel_tree$b ?v0py324 ?v1py289) ?v2py183)) (fun_app$as (fun_app$bg ?v0py324 (root$a ?v1py289)) (root$ ?v2py183))) :pattern ((fun_app$u (rel_tree$b ?v0py324 ?v1py289) ?v2py183)) :pattern ((fun_app$as (fun_app$bg ?v0py324 (root$a ?v1py289)) (root$ ?v2py183))) )) :named A326))
(assert (! (forall ((?v0py325 A_b_fun_b_bool_fun_fun$)(?v1py290 A_b_fun_tree$)(?v2py184 B_tree$)) (! (or (not (fun_app$q (rel_tree$c ?v0py325 ?v1py290) ?v2py184)) (fun_app$at (fun_app$bi ?v0py325 (root$d ?v1py290)) (root$a ?v2py184))) :pattern ((fun_app$q (rel_tree$c ?v0py325 ?v1py290) ?v2py184)) :pattern ((fun_app$at (fun_app$bi ?v0py325 (root$d ?v1py290)) (root$a ?v2py184))) )) :named A327))
(assert (! (forall ((?v0py326 A_b_fun_a_b_fun_bool_fun_fun$)(?v1py291 A_b_fun_tree$)(?v2py185 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$d ?v0py326 ?v1py291) ?v2py185)) (fun_app$au (fun_app$bj ?v0py326 (root$d ?v1py291)) (root$d ?v2py185))) :pattern ((fun_app$s (rel_tree$d ?v0py326 ?v1py291) ?v2py185)) :pattern ((fun_app$au (fun_app$bj ?v0py326 (root$d ?v1py291)) (root$d ?v2py185))) )) :named A328))
(assert (! (forall ((?v0py327 A_b_fun_a_bool_fun_fun$)(?v1py292 A_b_fun_tree$)(?v2py186 A_tree$)) (! (or (not (fun_app$u (rel_tree$e ?v0py327 ?v1py292) ?v2py186)) (fun_app$as (fun_app$bl ?v0py327 (root$d ?v1py292)) (root$ ?v2py186))) :pattern ((fun_app$u (rel_tree$e ?v0py327 ?v1py292) ?v2py186)) :pattern ((fun_app$as (fun_app$bl ?v0py327 (root$d ?v1py292)) (root$ ?v2py186))) )) :named A329))
(assert (! (forall ((?v0py328 A_b_bool_fun_fun$)(?v1py293 A_tree$)(?v2py187 B_tree$)) (! (or (not (fun_app$q (rel_tree$f ?v0py328 ?v1py293) ?v2py187)) (fun_app$at (fun_app$bn ?v0py328 (root$ ?v1py293)) (root$a ?v2py187))) :pattern ((fun_app$q (rel_tree$f ?v0py328 ?v1py293) ?v2py187)) :pattern ((fun_app$at (fun_app$bn ?v0py328 (root$ ?v1py293)) (root$a ?v2py187))) )) :named A330))
(assert (! (forall ((?v0py329 A_a_b_fun_bool_fun_fun$)(?v1py294 A_tree$)(?v2py188 A_b_fun_tree$)) (! (or (not (fun_app$s (rel_tree$g ?v0py329 ?v1py294) ?v2py188)) (fun_app$au (fun_app$bp ?v0py329 (root$ ?v1py294)) (root$d ?v2py188))) :pattern ((fun_app$s (rel_tree$g ?v0py329 ?v1py294) ?v2py188)) :pattern ((fun_app$au (fun_app$bp ?v0py329 (root$ ?v1py294)) (root$d ?v2py188))) )) :named A331))
(assert (! (forall ((?v0py330 A_a_bool_fun_fun$)(?v1py295 A_tree$)(?v2py189 A_tree$)) (! (or (not (fun_app$u (rel_tree$h ?v0py330 ?v1py295) ?v2py189)) (fun_app$as (fun_app$bq ?v0py330 (root$ ?v1py295)) (root$ ?v2py189))) :pattern ((fun_app$u (rel_tree$h ?v0py330 ?v1py295) ?v2py189)) :pattern ((fun_app$as (fun_app$bq ?v0py330 (root$ ?v1py295)) (root$ ?v2py189))) )) :named A332))
(assert (! (forall ((?v0py331 A_tree$)(?v1py296 A_tree$)(?v2py190 A_b_fun$)(?v3py114 A_b_fun$)) (! (or (= ?v0py331 ?v1py296) (and (member$b (?v4!115 ?v3py114 ?v2py190 ?v1py296 ?v0py331) (set_tree$b ?v0py331)) (member$b (?v5!114 ?v3py114 ?v2py190 ?v1py296 ?v0py331) (set_tree$b ?v1py296)) (= (fun_app$a ?v2py190 (?v4!115 ?v3py114 ?v2py190 ?v1py296 ?v0py331)) (fun_app$a ?v3py114 (?v5!114 ?v3py114 ?v2py190 ?v1py296 ?v0py331))) (not (= (?v4!115 ?v3py114 ?v2py190 ?v1py296 ?v0py331) (?v5!114 ?v3py114 ?v2py190 ?v1py296 ?v0py331)))) (not (= (fun_app$m (map_tree$f ?v2py190) ?v0py331) (fun_app$m (map_tree$f ?v3py114) ?v1py296)))) :pattern ((?v4!115 ?v3py114 ?v2py190 ?v1py296 ?v0py331)) :pattern ((?v5!114 ?v3py114 ?v2py190 ?v1py296 ?v0py331)) )) :named A333))
(assert (! (forall ((?v0py332 A_tree$)(?v1py297 A_b_fun$)(?v2py191 A_b_fun$)) (! (or (= (fun_app$m (map_tree$f ?v1py297) ?v0py332) (fun_app$m (map_tree$f ?v2py191) ?v0py332)) (and (member$b (?v3!116 ?v2py191 ?v1py297 ?v0py332) (set_tree$b ?v0py332)) (not (= (fun_app$a ?v1py297 (?v3!116 ?v2py191 ?v1py297 ?v0py332)) (fun_app$a ?v2py191 (?v3!116 ?v2py191 ?v1py297 ?v0py332)))))) :pattern ((?v3!116 ?v2py191 ?v1py297 ?v0py332)) )) :named A334))
(assert (! (forall ((?v0py333 A_tree$)(?v1py298 A_tree$)(?v2py192 A_b_fun$)(?v3py115 A_b_fun$)) (! (or (= (fun_app$m (map_tree$f ?v2py192) ?v0py333) (fun_app$m (map_tree$f ?v3py115) ?v1py298)) (not (= ?v0py333 ?v1py298)) (and (member$b (?v4!117 ?v3py115 ?v2py192 ?v1py298) (set_tree$b ?v1py298)) (not (= (fun_app$a ?v2py192 (?v4!117 ?v3py115 ?v2py192 ?v1py298)) (fun_app$a ?v3py115 (?v4!117 ?v3py115 ?v2py192 ?v1py298)))))) :pattern ((?v4!117 ?v3py115 ?v2py192 ?v1py298) (fun_app$m (map_tree$f ?v2py192) ?v0py333)) )) :named A335))
(assert (! (forall ((?v0py334 A$)(?v1py299 A_tree$)(?v2py193 A_a_tree_bool_fun_fun$)) (! (or (fun_app$u (fun_app$bb ?v2py193 ?v0py334) ?v1py299) (not (member$b ?v0py334 (set_tree$b ?v1py299))) (not (fun_app$u (fun_app$bb ?v2py193 (?v3!120 ?v2py193)) (node$a (?v3!120 ?v2py193) (?v4!119 ?v2py193) (?v5!118 ?v2py193)))) (and (member$b (?v6!125 ?v2py193) (set_tree$b (?v5!126 ?v2py193))) (fun_app$u (fun_app$bb ?v2py193 (?v6!125 ?v2py193)) (?v5!126 ?v2py193)) (not (fun_app$u (fun_app$bb ?v2py193 (?v6!125 ?v2py193)) (node$a (?v3!128 ?v2py193) (?v4!127 ?v2py193) (?v5!126 ?v2py193))))) (and (member$b (?v6!121 ?v2py193) (set_tree$b (?v4!123 ?v2py193))) (fun_app$u (fun_app$bb ?v2py193 (?v6!121 ?v2py193)) (?v4!123 ?v2py193)) (not (fun_app$u (fun_app$bb ?v2py193 (?v6!121 ?v2py193)) (node$a (?v3!124 ?v2py193) (?v4!123 ?v2py193) (?v5!122 ?v2py193)))))) :pattern ((fun_app$u (fun_app$bb ?v2py193 ?v0py334) ?v1py299)) )) :named A336))
(assert (! (forall ((?v0py335 B$)(?v1py300 B_tree$)(?v2py194 B_b_tree_bool_fun_fun$)) (! (or (fun_app$q (fun_app$az ?v2py194 ?v0py335) ?v1py300) (not (member$ ?v0py335 (set_tree$ ?v1py300))) (not (fun_app$q (fun_app$az ?v2py194 (?v3!131 ?v2py194)) (node$b (?v3!131 ?v2py194) (?v4!130 ?v2py194) (?v5!129 ?v2py194)))) (and (member$ (?v6!132 ?v2py194) (set_tree$ (?v4!134 ?v2py194))) (fun_app$q (fun_app$az ?v2py194 (?v6!132 ?v2py194)) (?v4!134 ?v2py194)) (not (fun_app$q (fun_app$az ?v2py194 (?v6!132 ?v2py194)) (node$b (?v3!135 ?v2py194) (?v4!134 ?v2py194) (?v5!133 ?v2py194))))) (and (member$ (?v6!136 ?v2py194) (set_tree$ (?v5!137 ?v2py194))) (fun_app$q (fun_app$az ?v2py194 (?v6!136 ?v2py194)) (?v5!137 ?v2py194)) (not (fun_app$q (fun_app$az ?v2py194 (?v6!136 ?v2py194)) (node$b (?v3!139 ?v2py194) (?v4!138 ?v2py194) (?v5!137 ?v2py194)))))) :pattern ((fun_app$q (fun_app$az ?v2py194 ?v0py335) ?v1py300)) )) :named A337))
(assert (! (forall ((?v0py336 A_b_fun$)(?v1py301 A_b_fun_tree$)(?v2py195 A_b_fun_a_b_fun_tree_bool_fun_fun$)) (! (or (fun_app$s (fun_app$ba ?v2py195 ?v0py336) ?v1py301) (not (member$a ?v0py336 (set_tree$a ?v1py301))) (not (fun_app$s (fun_app$ba ?v2py195 (?v3!142 ?v2py195)) (node$ (?v3!142 ?v2py195) (?v4!141 ?v2py195) (?v5!140 ?v2py195)))) (and (member$a (?v6!147 ?v2py195) (set_tree$a (?v5!148 ?v2py195))) (fun_app$s (fun_app$ba ?v2py195 (?v6!147 ?v2py195)) (?v5!148 ?v2py195)) (not (fun_app$s (fun_app$ba ?v2py195 (?v6!147 ?v2py195)) (node$ (?v3!150 ?v2py195) (?v4!149 ?v2py195) (?v5!148 ?v2py195))))) (and (member$a (?v6!143 ?v2py195) (set_tree$a (?v4!145 ?v2py195))) (fun_app$s (fun_app$ba ?v2py195 (?v6!143 ?v2py195)) (?v4!145 ?v2py195)) (not (fun_app$s (fun_app$ba ?v2py195 (?v6!143 ?v2py195)) (node$ (?v3!146 ?v2py195) (?v4!145 ?v2py195) (?v5!144 ?v2py195)))))) :pattern ((fun_app$s (fun_app$ba ?v2py195 ?v0py336) ?v1py301)) )) :named A338))
(assert (! (forall ((?v0py337 A$)(?v1py302 A_tree$)) (! (or (= ?v1py302 (node$a ?v0py337 (?v2!152 ?v1py302 ?v0py337) (?v3!151 ?v1py302 ?v0py337))) (not (member$b ?v0py337 (set_tree$b ?v1py302))) (and (= ?v1py302 (node$a (?v2!155 ?v1py302 ?v0py337) (?v3!154 ?v1py302 ?v0py337) (?v4!153 ?v1py302 ?v0py337))) (member$b ?v0py337 (set_tree$b (?v3!154 ?v1py302 ?v0py337)))) (and (= ?v1py302 (node$a (?v2!158 ?v1py302 ?v0py337) (?v3!157 ?v1py302 ?v0py337) (?v4!156 ?v1py302 ?v0py337))) (member$b ?v0py337 (set_tree$b (?v4!156 ?v1py302 ?v0py337))))) :pattern ((?v2!152 ?v1py302 ?v0py337)) :pattern ((?v3!151 ?v1py302 ?v0py337)) :pattern ((?v2!155 ?v1py302 ?v0py337)) :pattern ((?v3!154 ?v1py302 ?v0py337)) :pattern ((?v4!153 ?v1py302 ?v0py337)) :pattern ((?v2!158 ?v1py302 ?v0py337)) :pattern ((?v3!157 ?v1py302 ?v0py337)) :pattern ((?v4!156 ?v1py302 ?v0py337)) )) :named A339))
(assert (! (forall ((?v0py338 B$)(?v1py303 B_tree$)) (! (or (= ?v1py303 (node$b ?v0py338 (?v2!160 ?v1py303 ?v0py338) (?v3!159 ?v1py303 ?v0py338))) (not (member$ ?v0py338 (set_tree$ ?v1py303))) (and (= ?v1py303 (node$b (?v2!163 ?v1py303 ?v0py338) (?v3!162 ?v1py303 ?v0py338) (?v4!161 ?v1py303 ?v0py338))) (member$ ?v0py338 (set_tree$ (?v3!162 ?v1py303 ?v0py338)))) (and (= ?v1py303 (node$b (?v2!166 ?v1py303 ?v0py338) (?v3!165 ?v1py303 ?v0py338) (?v4!164 ?v1py303 ?v0py338))) (member$ ?v0py338 (set_tree$ (?v4!164 ?v1py303 ?v0py338))))) :pattern ((?v2!160 ?v1py303 ?v0py338)) :pattern ((?v3!159 ?v1py303 ?v0py338)) :pattern ((?v2!166 ?v1py303 ?v0py338)) :pattern ((?v3!165 ?v1py303 ?v0py338)) :pattern ((?v4!164 ?v1py303 ?v0py338)) :pattern ((?v2!163 ?v1py303 ?v0py338)) :pattern ((?v3!162 ?v1py303 ?v0py338)) :pattern ((?v4!161 ?v1py303 ?v0py338)) )) :named A340))
(assert (! (forall ((?v0py339 A_b_fun$)(?v1py304 A_b_fun_tree$)) (! (or (= ?v1py304 (node$ ?v0py339 (?v2!168 ?v1py304 ?v0py339) (?v3!167 ?v1py304 ?v0py339))) (not (member$a ?v0py339 (set_tree$a ?v1py304))) (and (= ?v1py304 (node$ (?v2!171 ?v1py304 ?v0py339) (?v3!170 ?v1py304 ?v0py339) (?v4!169 ?v1py304 ?v0py339))) (member$a ?v0py339 (set_tree$a (?v3!170 ?v1py304 ?v0py339)))) (and (= ?v1py304 (node$ (?v2!174 ?v1py304 ?v0py339) (?v3!173 ?v1py304 ?v0py339) (?v4!172 ?v1py304 ?v0py339))) (member$a ?v0py339 (set_tree$a (?v4!172 ?v1py304 ?v0py339))))) :pattern ((?v2!168 ?v1py304 ?v0py339)) :pattern ((?v3!167 ?v1py304 ?v0py339)) :pattern ((?v2!171 ?v1py304 ?v0py339)) :pattern ((?v3!170 ?v1py304 ?v0py339)) :pattern ((?v4!169 ?v1py304 ?v0py339)) :pattern ((?v2!174 ?v1py304 ?v0py339)) :pattern ((?v3!173 ?v1py304 ?v0py339)) :pattern ((?v4!172 ?v1py304 ?v0py339)) )) :named A341))
(assert (! (forall ((?v0py340 A$)(?v1py305 A_tree$)(?v2py196 A$)(?v3py116 A_tree$)) (! (or (not (member$b ?v0py340 (set_tree$b ?v1py305))) (member$b ?v0py340 (set_tree$b (node$a ?v2py196 ?v1py305 ?v3py116)))) :pattern ((member$b ?v0py340 (set_tree$b (node$a ?v2py196 ?v1py305 ?v3py116)))) )) :named A342))
(assert (! (forall ((?v0py341 B$)(?v1py306 B_tree$)(?v2py197 B$)(?v3py117 B_tree$)) (! (or (not (member$ ?v0py341 (set_tree$ ?v1py306))) (member$ ?v0py341 (set_tree$ (node$b ?v2py197 ?v1py306 ?v3py117)))) :pattern ((member$ ?v0py341 (set_tree$ (node$b ?v2py197 ?v1py306 ?v3py117)))) )) :named A343))
(assert (! (forall ((?v0py342 A_b_fun$)(?v1py307 A_b_fun_tree$)(?v2py198 A_b_fun$)(?v3py118 A_b_fun_tree$)) (! (or (not (member$a ?v0py342 (set_tree$a ?v1py307))) (member$a ?v0py342 (set_tree$a (node$ ?v2py198 ?v1py307 ?v3py118)))) :pattern ((member$a ?v0py342 (set_tree$a (node$ ?v2py198 ?v1py307 ?v3py118)))) )) :named A344))
(assert (! (forall ((?v0py343 A$)(?v1py308 A_tree$)(?v2py199 A$)(?v3py119 A_tree$)) (! (or (not (member$b ?v0py343 (set_tree$b ?v1py308))) (member$b ?v0py343 (set_tree$b (node$a ?v2py199 ?v3py119 ?v1py308)))) :pattern ((member$b ?v0py343 (set_tree$b (node$a ?v2py199 ?v3py119 ?v1py308)))) )) :named A345))
(assert (! (forall ((?v0py344 B$)(?v1py309 B_tree$)(?v2py200 B$)(?v3py120 B_tree$)) (! (or (not (member$ ?v0py344 (set_tree$ ?v1py309))) (member$ ?v0py344 (set_tree$ (node$b ?v2py200 ?v3py120 ?v1py309)))) :pattern ((member$ ?v0py344 (set_tree$ (node$b ?v2py200 ?v3py120 ?v1py309)))) )) :named A346))
(assert (! (forall ((?v0py345 A_b_fun$)(?v1py310 A_b_fun_tree$)(?v2py201 A_b_fun$)(?v3py121 A_b_fun_tree$)) (! (or (not (member$a ?v0py345 (set_tree$a ?v1py310))) (member$a ?v0py345 (set_tree$a (node$ ?v2py201 ?v3py121 ?v1py310)))) :pattern ((member$a ?v0py345 (set_tree$a (node$ ?v2py201 ?v3py121 ?v1py310)))) )) :named A347))
(assert (! (forall ((?v0py346 A$)(?v1py311 A_tree$)(?v2py202 A_tree$)) (! (member$b ?v0py346 (set_tree$b (node$a ?v0py346 ?v1py311 ?v2py202))) :pattern ((node$a ?v0py346 ?v1py311 ?v2py202)) )) :named A348))
(assert (! (forall ((?v0py347 B$)(?v1py312 B_tree$)(?v2py203 B_tree$)) (! (member$ ?v0py347 (set_tree$ (node$b ?v0py347 ?v1py312 ?v2py203))) :pattern ((node$b ?v0py347 ?v1py312 ?v2py203)) )) :named A349))
(assert (! (forall ((?v0py348 A_b_fun$)(?v1py313 A_b_fun_tree$)(?v2py204 A_b_fun_tree$)) (! (member$a ?v0py348 (set_tree$a (node$ ?v0py348 ?v1py313 ?v2py204))) :pattern ((node$ ?v0py348 ?v1py313 ?v2py204)) )) :named A350))
(assert (! (forall ((?v0py349 A_b_fun$)(?v1py314 A_b_fun_tree$)) (! (or (not (member$a ?v0py349 (set_tree$a (left$d ?v1py314)))) (member$a ?v0py349 (set_tree$a ?v1py314))) :pattern ((member$a ?v0py349 (set_tree$a (left$d ?v1py314)))) )) :named A351))
(assert (! (forall ((?v0py350 A$)(?v1py315 A_tree$)) (! (or (not (member$b ?v0py350 (set_tree$b (left$ ?v1py315)))) (member$b ?v0py350 (set_tree$b ?v1py315))) :pattern ((member$b ?v0py350 (set_tree$b (left$ ?v1py315)))) )) :named A352))
(assert (! (forall ((?v0py351 A_b_fun_tree$)(?v1py316 A$)) (! (= (ap_tree$ ?v0py351 (pure_tree$c ?v1py316)) (ap_tree$c (pure_tree$i (uu$ ?v1py316)) ?v0py351)) :pattern ((ap_tree$ ?v0py351 (pure_tree$c ?v1py316))) :pattern ((ap_tree$c (pure_tree$i (uu$ ?v1py316)) ?v0py351)) )) :named A353))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 group_026/ematching/tmp/x2015_09_10_16_49_52_978_1009894.smt_in_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
