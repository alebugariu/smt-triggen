(set-info :smt-lib-version 2.6)
(set-info :source | VCC and HAVOC benchmarks. Contributed by Nikolaj Bjorner, Leonardo de Moura, Michal Moskal, and Shaz Qadeer. |)
(set-info :category "industrial")
(set-info :status unsat)
(set-logic UFNIA)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-fun bv_concat (Int Int Int Int) Int)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-fun bv_extract (Int Int Int Int) Int)
(declare-fun pow2 (Int) Int)
(declare-fun true_1 () Int)
(declare-fun false_1 () Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun select1 (Int Int) Int)
(declare-fun store1 (Int Int Int) Int)
(declare-fun NodeSetToRegion (Int) Int)
(declare-fun malloc (Int) Int)
(declare-fun max_u4 () Int)
(declare-fun min_u4 () Int)
(declare-fun NodeFootprint (Int Int Int) Int)
(declare-fun node__reachable_nodes () Int)
(declare-fun ptr2gid (Int) Int)
(declare-fun inv2 (Int Int Int) Int)
(declare-fun inv (Int Int Int) Int)
(declare-fun conv_bool_to_i4 (Int) Int)
(declare-fun region (Int Int) Int)
(declare-fun add_ptr (Int Int Int) Int)
(declare-fun conv_i4_to_i8 (Int) Int)
(declare-fun conv_i8_to_i4 (Int) Int)
(declare-fun max_i8 () Int)
(declare-fun min_i8 () Int)
(declare-fun max_u8 () Int)
(declare-fun min_u8 () Int)
(declare-fun conv_u8_to_ptr (Int) Int)
(declare-fun ld_u8 (Int Int) Int)
(declare-fun ld_i4 (Int Int) Int)
(declare-fun node__parent () Int)
(declare-fun ldnull () Int)
(declare-fun base_zero (Int) Int)
(declare-fun size () Int)
(declare-fun ptr (Int Int) Int)
(declare-fun base (Int) Int)
(declare-fun g__fmode () Int)
(declare-fun g__fmode_1 () Int)
(declare-fun g__wpgmptr () Int)
(declare-fun g__wpgmptr_1 () Int)
(declare-fun g__pgmptr () Int)
(declare-fun g__pgmptr_1 () Int)
(declare-fun g__wenviron () Int)
(declare-fun g__wenviron_1 () Int)
(declare-fun g__environ () Int)
(declare-fun g__environ_1 () Int)
(declare-fun g___wargv () Int)
(declare-fun g___wargv_1 () Int)
(declare-fun g___argv () Int)
(declare-fun g___argv_1 () Int)
(declare-fun g___argc () Int)
(declare-fun g___argc_1 () Int)
(declare-fun g___mb_cur_max () Int)
(declare-fun g___mb_cur_max_1 () Int)
(declare-fun sizeof (Int) Int)
(declare-fun set_to_region (Int) Int)
(declare-fun set_difference (Int Int) Int)
(declare-fun set_union (Int Int) Int)
(declare-fun set_singleton (Int) Int)
(declare-fun set_empty () Int)
(declare-fun memory_id (Int Int) Int)
(declare-fun union (Int Int) Int)
(declare-fun ld_u1 (Int Int) Int)
(declare-fun ld_i8 (Int Int) Int)
(declare-fun ld_u4 (Int Int) Int)
(declare-fun ld_u2 (Int Int) Int)
(declare-fun ld_i2 (Int Int) Int)
(declare-fun ld_i1 (Int Int) Int)
(declare-fun offset (Int) Int)
(declare-fun subtraction (Int Int) Int)
(declare-fun empty () Int)
(declare-fun universe () Int)
(declare-fun global_ghost () Int)
(declare-fun sub_ptr (Int Int) Int)
(declare-fun nullObject () Int)
(declare-fun gid2ptr (Int) Int)
(declare-fun neg_unchk_i8 (Int) Int)
(declare-fun neg_unchk_i4 (Int) Int)
(declare-fun min_i4 () Int)
(declare-fun max_i4 () Int)
(declare-fun max_u2 () Int)
(declare-fun min_u2 () Int)
(declare-fun max_i2 () Int)
(declare-fun min_i2 () Int)
(declare-fun max_u1 () Int)
(declare-fun min_u1 () Int)
(declare-fun max_i1 () Int)
(declare-fun min_i1 () Int)
(declare-fun rem_unchk_u8 (Int Int) Int)
(declare-fun x (Int Int) Int)
(declare-fun rem_unchk_i8 (Int Int) Int)
(declare-fun rem_unchk_u4 (Int Int) Int)
(declare-fun rem_unchk_i4 (Int Int) Int)
(declare-fun div_unchk_u8 (Int Int) Int)
(declare-fun x_1 (Int Int) Int)
(declare-fun div_unchk_i8 (Int Int) Int)
(declare-fun div_unchk_u4 (Int Int) Int)
(declare-fun div_unchk_i4 (Int Int) Int)
(declare-fun mul_unchk_u8 (Int Int) Int)
(declare-fun mul_unchk_i8 (Int Int) Int)
(declare-fun mul_unchk_u4 (Int Int) Int)
(declare-fun mul_unchk_i4 (Int Int) Int)
(declare-fun sub_unchk_u8 (Int Int) Int)
(declare-fun sub_unchk_i8 (Int Int) Int)
(declare-fun sub_unchk_u4 (Int Int) Int)
(declare-fun sub_unchk_i4 (Int Int) Int)
(declare-fun add_unchk_u8 (Int Int) Int)
(declare-fun add_unchk_i8 (Int Int) Int)
(declare-fun add_unchk_u4 (Int Int) Int)
(declare-fun add_unchk_i4 (Int Int) Int)
(declare-fun conv_base_to_i8 (Int) Int)
(declare-fun conv_i8_to_ptr (Int) Int)
(declare-fun conv_u8_to_u8 (Int) Int)
(declare-fun conv_u8_to_i8 (Int) Int)
(declare-fun conv_u8_to_u4 (Int) Int)
(declare-fun conv_u8_to_i4 (Int) Int)
(declare-fun conv_u8_to_u2 (Int) Int)
(declare-fun conv_u8_to_i2 (Int) Int)
(declare-fun conv_u8_to_u1 (Int) Int)
(declare-fun conv_u8_to_i1 (Int) Int)
(declare-fun conv_i8_to_u8 (Int) Int)
(declare-fun conv_i8_to_i8 (Int) Int)
(declare-fun conv_i8_to_u4 (Int) Int)
(declare-fun conv_i8_to_u2 (Int) Int)
(declare-fun conv_i8_to_i2 (Int) Int)
(declare-fun conv_i8_to_u1 (Int) Int)
(declare-fun conv_i8_to_i1 (Int) Int)
(declare-fun conv_u4_to_u8 (Int) Int)
(declare-fun conv_u4_to_i8 (Int) Int)
(declare-fun conv_u4_to_u4 (Int) Int)
(declare-fun conv_u4_to_i4 (Int) Int)
(declare-fun conv_u4_to_u2 (Int) Int)
(declare-fun conv_u4_to_i2 (Int) Int)
(declare-fun conv_u4_to_u1 (Int) Int)
(declare-fun conv_u4_to_i1 (Int) Int)
(declare-fun conv_i4_to_u8 (Int) Int)
(declare-fun conv_i4_to_u4 (Int) Int)
(declare-fun conv_i4_to_i4 (Int) Int)
(declare-fun conv_i4_to_u2 (Int) Int)
(declare-fun conv_i4_to_i2 (Int) Int)
(declare-fun conv_i4_to_u1 (Int) Int)
(declare-fun conv_i4_to_i1 (Int) Int)
(declare-fun st_u4 (Int Int Int) Int)
(declare-fun st_i8 (Int Int Int) Int)
(declare-fun st_u2 (Int Int Int) Int)
(declare-fun st_u1 (Int Int Int) Int)
(declare-fun st_i4 (Int Int Int) Int)
(declare-fun st_u8 (Int Int Int) Int)
(declare-fun st_i2 (Int Int Int) Int)
(declare-fun st_i1 (Int Int Int) Int)
(declare-fun and_1 (Int Int) Int)
(declare-fun xor_1 (Int Int) Int)
(declare-fun or_1 (Int Int) Int)
(declare-fun not_1 (Int) Int)
(declare-fun shr (Int Int) Int)
(declare-fun shl (Int Int) Int)
(declare-fun sign_extend_63_64 (Int) Int)
(declare-fun sign_extend_62_64 (Int) Int)
(declare-fun sign_extend_61_64 (Int) Int)
(declare-fun sign_extend_60_64 (Int) Int)
(declare-fun sign_extend_59_64 (Int) Int)
(declare-fun sign_extend_58_64 (Int) Int)
(declare-fun sign_extend_57_64 (Int) Int)
(declare-fun sign_extend_56_64 (Int) Int)
(declare-fun sign_extend_55_64 (Int) Int)
(declare-fun sign_extend_54_64 (Int) Int)
(declare-fun sign_extend_53_64 (Int) Int)
(declare-fun sign_extend_52_64 (Int) Int)
(declare-fun sign_extend_51_64 (Int) Int)
(declare-fun sign_extend_50_64 (Int) Int)
(declare-fun sign_extend_49_64 (Int) Int)
(declare-fun sign_extend_48_64 (Int) Int)
(declare-fun sign_extend_47_64 (Int) Int)
(declare-fun sign_extend_46_64 (Int) Int)
(declare-fun sign_extend_45_64 (Int) Int)
(declare-fun sign_extend_44_64 (Int) Int)
(declare-fun sign_extend_43_64 (Int) Int)
(declare-fun sign_extend_42_64 (Int) Int)
(declare-fun sign_extend_41_64 (Int) Int)
(declare-fun sign_extend_40_64 (Int) Int)
(declare-fun sign_extend_39_64 (Int) Int)
(declare-fun sign_extend_38_64 (Int) Int)
(declare-fun sign_extend_37_64 (Int) Int)
(declare-fun sign_extend_36_64 (Int) Int)
(declare-fun sign_extend_35_64 (Int) Int)
(declare-fun sign_extend_34_64 (Int) Int)
(declare-fun sign_extend_33_64 (Int) Int)
(declare-fun sign_extend_32_64 (Int) Int)
(declare-fun sign_extend_32_32 (Int) Int)
(declare-fun sign_extend_31_64 (Int) Int)
(declare-fun sign_extend_31_32 (Int) Int)
(declare-fun sign_extend_30_64 (Int) Int)
(declare-fun sign_extend_30_32 (Int) Int)
(declare-fun sign_extend_29_64 (Int) Int)
(declare-fun sign_extend_29_32 (Int) Int)
(declare-fun sign_extend_28_64 (Int) Int)
(declare-fun sign_extend_28_32 (Int) Int)
(declare-fun sign_extend_27_64 (Int) Int)
(declare-fun sign_extend_27_32 (Int) Int)
(declare-fun sign_extend_26_64 (Int) Int)
(declare-fun sign_extend_26_32 (Int) Int)
(declare-fun sign_extend_25_64 (Int) Int)
(declare-fun sign_extend_25_32 (Int) Int)
(declare-fun sign_extend_24_64 (Int) Int)
(declare-fun sign_extend_24_32 (Int) Int)
(declare-fun sign_extend_23_64 (Int) Int)
(declare-fun sign_extend_23_32 (Int) Int)
(declare-fun sign_extend_22_64 (Int) Int)
(declare-fun sign_extend_22_32 (Int) Int)
(declare-fun sign_extend_21_64 (Int) Int)
(declare-fun sign_extend_21_32 (Int) Int)
(declare-fun sign_extend_20_64 (Int) Int)
(declare-fun sign_extend_20_32 (Int) Int)
(declare-fun sign_extend_19_64 (Int) Int)
(declare-fun sign_extend_19_32 (Int) Int)
(declare-fun sign_extend_18_64 (Int) Int)
(declare-fun sign_extend_18_32 (Int) Int)
(declare-fun sign_extend_17_64 (Int) Int)
(declare-fun sign_extend_17_32 (Int) Int)
(declare-fun sign_extend_16_64 (Int) Int)
(declare-fun sign_extend_16_32 (Int) Int)
(declare-fun sign_extend_15_64 (Int) Int)
(declare-fun sign_extend_15_32 (Int) Int)
(declare-fun sign_extend_14_64 (Int) Int)
(declare-fun sign_extend_14_32 (Int) Int)
(declare-fun sign_extend_13_64 (Int) Int)
(declare-fun sign_extend_13_32 (Int) Int)
(declare-fun sign_extend_12_64 (Int) Int)
(declare-fun sign_extend_12_32 (Int) Int)
(declare-fun sign_extend_11_64 (Int) Int)
(declare-fun sign_extend_11_32 (Int) Int)
(declare-fun sign_extend_10_64 (Int) Int)
(declare-fun sign_extend_10_32 (Int) Int)
(declare-fun sign_extend_9_64 (Int) Int)
(declare-fun sign_extend_9_32 (Int) Int)
(declare-fun sign_extend_8_64 (Int) Int)
(declare-fun sign_extend_8_32 (Int) Int)
(declare-fun sign_extend_7_64 (Int) Int)
(declare-fun sign_extend_7_32 (Int) Int)
(declare-fun sign_extend_6_64 (Int) Int)
(declare-fun sign_extend_6_32 (Int) Int)
(declare-fun sign_extend_5_64 (Int) Int)
(declare-fun sign_extend_5_32 (Int) Int)
(declare-fun sign_extend_4_64 (Int) Int)
(declare-fun sign_extend_4_32 (Int) Int)
(declare-fun sign_extend_3_64 (Int) Int)
(declare-fun sign_extend_3_32 (Int) Int)
(declare-fun sign_extend_2_64 (Int) Int)
(declare-fun sign_extend_2_32 (Int) Int)
(declare-fun sign_extend_1_64 (Int) Int)
(declare-fun sign_extend_1_32 (Int) Int)
(declare-fun t () Int)
(declare-fun mem () Int)
(declare-fun d () Int)
(declare-fun gmem_5 () Int)
(declare-fun mem_4 () Int)
(declare-fun gmem () Int)
(declare-fun new_node () Int)
(declare-fun temp11_0 () Int)
(declare-fun temp11_1 () Int)
(declare-fun x_0 () Int)
(declare-fun x_1_1 () Int)
(declare-fun gmem_4 () Int)
(declare-fun temp10_0 () Int)
(declare-fun temp10_1 () Int)
(declare-fun temp9_0 () Int)
(declare-fun temp9_1 () Int)
(declare-fun mem_3 () Int)
(declare-fun calleeWrites_0 () Int)
(declare-fun calleeWrites_1 () Int)
(declare-fun gmem_0 () Int)
(declare-fun call1538formal__retval_0 () Int)
(declare-fun gmem_1 () Int)
(declare-fun mem_1 () Int)
(declare-fun temp9 () Int)
(declare-fun call1538formal___writes_0 () Int)
(declare-fun localAllocated_0 () Int)
(declare-fun allocated_0 () Int)
(declare-fun writes_0 () Int)
(declare-fun mem_0 () Int)
(declare-fun temp11 () Int)
(declare-fun x_2 () Int)
(declare-fun gmem_3 () Int)
(declare-fun mem_2 () Int)
(declare-fun temp10 () Int)
(declare-fun gmem_2 () Int)
(declare-fun call1421formal___writes_0 () Int)
(declare-fun call1421formal_t_0 () Int)
(declare-fun x_3 (Int Int) Bool)
(declare-fun only_region_changed_or_new_trans (Int Int Int Int Int) Bool)
(declare-fun overlaps (Int Int) Bool)
(declare-fun contains (Int Int) Bool)
(declare-fun set_subset (Int Int) Bool)
(declare-fun valid (Int Int Int) Bool)
(declare-fun is (Int Int) Bool)
(declare-fun disjoint_types (Int Int) Bool)
(declare-fun set_disjoint (Int Int) Bool)
(declare-fun set_equal (Int Int) Bool)
(declare-fun only_region_changed_or_new_nontrans (Int Int Int Int Int) Bool)
(declare-fun only_region_changed_or_new (Int Int Int Int Int) Bool)
(declare-fun alloc_grows (Int Int) Bool)
(declare-fun only_single_ghost_changed (Int Int Int Int Int Int) Bool)
(declare-fun only_region_changed (Int Int Int) Bool)
(declare-fun simple_subregion (Int Int) Bool)
(declare-fun next_mem (Int Int) Bool)
(declare-fun zero_region (Int Int Int) Bool)
(declare-fun same_region (Int Int Int Int Int) Bool)
(declare-fun same_mem (Int Int Int Int) Bool)
(declare-fun good_mem (Int) Bool)
(declare-fun conv_i4_to_bool (Int) Bool)
(declare-fun good_gmem (Int) Bool)
(declare-fun z3name!15 (Int Int Int) Int)
(declare-fun ?n!3 (Int Int Int) Int)
(declare-fun ?p!9 (Int Int Int Int) Int)
(declare-fun ?p!5 (Int Int Int Int) Int)
(declare-fun ?p!17 (Int Int Int) Int)
(declare-fun ?n2!8 (Int Int Int Int) Int)
(declare-fun ?p!13 (Int Int) Int)
(declare-fun z3name!22 (Int Int Int) Int)
(declare-fun ?n!19 (Int Int) Int)
(declare-fun ?o!11 (Int Int) Int)
(declare-fun ?p!16 (Int Int) Int)
(declare-fun ?p!18 (Int Int Int) Int)
(declare-fun ?p!6 (Int Int Int) Int)
(declare-fun ?o!10 (Int Int) Int)
(declare-fun ?o!12 (Int Int) Int)
(declare-fun z3name!21 (Int Int Int) Int)
(declare-fun ?p!14 (Int Int) Int)
(declare-fun ?off!2 (Int Int Int Int) Int)
(declare-fun ?n!20 (Int Int) Int)
(declare-fun ?p!4 (Int Int Int) Int)
(declare-fun ?p!7 (Int Int) Int)
(declare-fun z3name!0 () Int)
(declare-fun z3name!1 () Int)
(declare-fun ?p!23 () Int)
(assert (! (= (pow2 0) 1) :named A0_0))
(assert (! (forall ((?Apy0 Int)(?ipy0 Int)(?jpy0 Int)(?vpy0 Int)) (! (or (= ?ipy0 ?jpy0) (= (select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0) (select1 ?Apy0 ?jpy0))) :pattern ((select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0)) )) :named A0_1))
(assert (! (forall ((?Apy1 Int)(?ipy1 Int)(?vpy1 Int)) (! (= (select1 (store1 ?Apy1 ?ipy1 ?vpy1) ?ipy1) ?vpy1) :pattern ((store1 ?Apy1 ?ipy1 ?vpy1)) )) :named A0_2))
(assert (! (forall ((?Apy2 Int)(?opy0 Int)(?fpy0 Int)(?ppy0 Int)(?gpy0 Int)(?vpy2 Int)) (! (or (= ?fpy0 ?gpy0) (= (select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0) (select2 ?Apy2 ?ppy0 ?gpy0))) :pattern ((select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0)) )) :named A0_3))
(assert (! (forall ((?Apy3 Int)(?opy1 Int)(?fpy1 Int)(?ppy1 Int)(?gpy1 Int)(?vpy3 Int)) (! (or (= ?opy1 ?ppy1) (= (select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1) (select2 ?Apy3 ?ppy1 ?gpy1))) :pattern ((select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1)) )) :named A0_4))
(assert (! (forall ((?Apy4 Int)(?opy2 Int)(?fpy2 Int)(?vpy4 Int)) (! (= (select2 (store2 ?Apy4 ?opy2 ?fpy2 ?vpy4) ?opy2 ?fpy2) ?vpy4) :pattern ((store2 ?Apy4 ?opy2 ?fpy2 ?vpy4)) )) :named A0_5))
(assert (! (forall ((?npy0 Int)) (! (or (<= ?npy0 0) (= (pow2 ?npy0) (* 2 (pow2 (+ (- 1) ?npy0))))) :pattern ((pow2 ?npy0)) )) :named A0_6))
(assert (! (forall ((?tpy0 Int)(?upy0 Int)(?vpy5 Int)) (! (or (not (x_3 ?tpy0 ?upy0)) (not (x_3 ?upy0 ?vpy5)) (x_3 ?tpy0 ?vpy5)) :pattern ((x_3 ?tpy0 ?upy0) (x_3 ?upy0 ?vpy5)) )) :named A0_7))
(assert (! (forall ((?tpy1 Int)(?upy1 Int)) (! (or (not (x_3 ?tpy1 ?upy1)) (not (x_3 ?upy1 ?tpy1)) (= ?tpy1 ?upy1)) :pattern ((x_3 ?tpy1 ?upy1) (x_3 ?upy1 ?tpy1)) )) :named A0_8))
(assert (! (forall ((?tpy2 Int)) (! (x_3 ?tpy2 ?tpy2) :pattern ((x_3 ?tpy2 ?tpy2)) )) :named A0_9))
(assert (! (forall ((?vpy6 Int)(?apy0 Int)(?bpy0 Int)) (! (or (<= ?bpy0 0) (<= 0 (bv_concat 0 ?bpy0 ?vpy6 ?apy0))) :pattern ((bv_concat 0 ?bpy0 ?vpy6 ?apy0)) )) :named A0_10))
(assert (! (forall ((?vpy7 Int)(?lpy0 Int)(?apy1 Int)(?bpy1 Int)) (! (or (not (<= 0 ?vpy7)) (not (= ?lpy0 (+ ?apy1 ?bpy1))) (= (bv_concat 0 ?bpy1 (bv_extract ?vpy7 ?lpy0 0 ?apy1) ?apy1) ?vpy7) (<= (pow2 ?apy1) ?vpy7)) :pattern ((bv_concat 0 ?bpy1 (bv_extract ?vpy7 ?lpy0 0 ?apy1) ?apy1)) )) :named A0_11))
(assert (! (forall ((?vpy8 Int)(?lpy1 Int)) (! (= (bv_extract ?vpy8 ?lpy1 0 ?lpy1) ?vpy8) :pattern ((bv_extract ?vpy8 ?lpy1 0 ?lpy1)) )) :named A0_12))
(assert (! (forall ((?vpy9 Int)(?lvpy0 Int)(?wpy0 Int)(?lwpy0 Int)(?lvwpy0 Int)(?apy2 Int)(?bpy2 Int)) (! (or (not (<= ?bpy2 ?lwpy0)) (= (bv_extract (bv_concat ?vpy9 ?lvpy0 ?wpy0 ?lwpy0) ?lvwpy0 ?apy2 ?bpy2) (bv_extract ?wpy0 ?lwpy0 ?apy2 ?bpy2))) :pattern ((bv_extract (bv_concat ?vpy9 ?lvpy0 ?wpy0 ?lwpy0) ?lvwpy0 ?apy2 ?bpy2)) )) :named A0_13))
(assert (! (forall ((?vpy10 Int)(?lvpy1 Int)(?wpy1 Int)(?lwpy1 Int)(?lvwpy1 Int)(?apy3 Int)(?bpy3 Int)) (! (or (not (<= 0 (+ ?apy3 (* (- 1) ?lwpy1)))) (= (bv_extract (bv_concat ?vpy10 ?lvpy1 ?wpy1 ?lwpy1) ?lvwpy1 ?apy3 ?bpy3) (bv_extract ?vpy10 ?lvpy1 (+ ?apy3 (* (- 1) ?lwpy1)) (+ ?bpy3 (* (- 1) ?lwpy1))))) :pattern ((bv_extract (bv_concat ?vpy10 ?lvpy1 ?wpy1 ?lwpy1) ?lvwpy1 ?apy3 ?bpy3)) )) :named A0_14))
(assert (! (forall ((?vpy11 Int)(?lvpy2 Int)(?x_2py0 Int)(?lxvpy0 Int)(?wpy2 Int)(?apy4 Int)(?bpy4 Int)) (! (or (not (<= ?x_2py0 ?apy4)) (= (bv_extract (bv_concat (bv_extract ?vpy11 ?lvpy2 ?x_2py0 ?lvpy2) ?lxvpy0 ?wpy2 ?x_2py0) ?lvpy2 ?apy4 ?bpy4) (bv_extract ?vpy11 ?lvpy2 ?apy4 ?bpy4)) (not (= ?lxvpy0 (+ ?lvpy2 (* (- 1) ?x_2py0))))) :pattern ((bv_extract (bv_concat (bv_extract ?vpy11 ?lvpy2 ?x_2py0 ?lvpy2) ?lxvpy0 ?wpy2 ?x_2py0) ?lvpy2 ?apy4 ?bpy4)) )) :named A0_15))
(assert (! (forall ((?vpy12 Int)(?lvpy3 Int)(?x_2py1 Int)(?lxvpy1 Int)(?wpy3 Int)(?lwpy2 Int)(?lwypy0 Int)(?ypy0 Int)(?apy5 Int)(?bpy5 Int)) (! (or (not (= ?lwypy0 (+ ?wpy3 ?ypy0))) (= (bv_extract (bv_concat (bv_extract ?vpy12 ?lvpy3 ?x_2py1 ?lvpy3) ?lxvpy1 (bv_concat ?wpy3 ?lwpy2 (bv_extract ?vpy12 ?lvpy3 0 ?ypy0) ?ypy0) ?lwypy0) ?lvpy3 ?apy5 ?bpy5) (bv_extract ?vpy12 ?lvpy3 ?apy5 ?bpy5)) (not (= ?lxvpy1 (+ ?lvpy3 (* (- 1) ?x_2py1)))) (not (= ?lwpy2 (+ ?x_2py1 (* (- 1) ?ypy0)))) (and (not (<= ?x_2py1 ?apy5)) (not (<= ?bpy5 ?ypy0)))) :pattern ((bv_extract (bv_concat (bv_extract ?vpy12 ?lvpy3 ?x_2py1 ?lvpy3) ?lxvpy1 (bv_concat ?wpy3 ?lwpy2 (bv_extract ?vpy12 ?lvpy3 0 ?ypy0) ?ypy0) ?lwypy0) ?lvpy3 ?apy5 ?bpy5)) )) :named A0_16))
(assert (! (not (= false_1 true_1)) :named A0_17))
(assert (! (= (+ (conv_base_to_i8 (base ldnull)) (offset ldnull)) 0) :named A1_0))
(assert (! (= (conv_bool_to_i4 z3name!0) 1) :named A1_1))
(assert (! (= (conv_bool_to_i4 z3name!1) 0) :named A1_2))
(assert (! (= (conv_i8_to_ptr 0) ldnull) :named A1_3))
(assert (! (= (conv_u8_to_ptr 0) ldnull) :named A1_4))
(assert (! (= g___argc (ptr g___argc_1 0)) :named A1_5))
(assert (! (= g___argv (ptr g___argv_1 0)) :named A1_6))
(assert (! (= g___mb_cur_max (ptr g___mb_cur_max_1 0)) :named A1_7))
(assert (! (= g___wargv (ptr g___wargv_1 0)) :named A1_8))
(assert (! (= g__environ (ptr g__environ_1 0)) :named A1_9))
(assert (! (= g__fmode (ptr g__fmode_1 0)) :named A1_10))
(assert (! (= g__pgmptr (ptr g__pgmptr_1 0)) :named A1_11))
(assert (! (= g__wenviron (ptr g__wenviron_1 0)) :named A1_12))
(assert (! (= g__wpgmptr (ptr g__wpgmptr_1 0)) :named A1_13))
(assert (! (= ldnull (ptr nullObject 0)) :named A1_14))
(assert (! (= max_i1 127) :named A1_15))
(assert (! (= max_i2 32767) :named A1_16))
(assert (! (= max_i4 2147483647) :named A1_17))
(assert (! (= max_i8 9223372036854775807) :named A1_18))
(assert (! (= max_u1 255) :named A1_19))
(assert (! (= max_u2 65535) :named A1_20))
(assert (! (= max_u4 4294967295) :named A1_21))
(assert (! (= max_u8 18446744073709551615) :named A1_22))
(assert (! (= min_i1 (- 128)) :named A1_23))
(assert (! (= min_i2 (- 32768)) :named A1_24))
(assert (! (= min_i4 (- 2147483648)) :named A1_25))
(assert (! (= min_i8 (- 9223372036854775808)) :named A1_26))
(assert (! (= min_u1 0) :named A1_27))
(assert (! (= min_u2 0) :named A1_28))
(assert (! (= min_u4 0) :named A1_29))
(assert (! (= min_u8 0) :named A1_30))
(assert (! (= z3name!0 1) :named A1_31))
(assert (! (= z3name!1 0) :named A1_32))
(assert (! (and (not (= ldnull size)) (not (= ldnull global_ghost)) (not (= ldnull node__parent)) (not (= ldnull node__reachable_nodes)) (not (= ldnull g___mb_cur_max)) (not (= ldnull g___mb_cur_max_1)) (not (= ldnull g___argc)) (not (= ldnull g___argc_1)) (not (= ldnull g___argv)) (not (= ldnull g___argv_1)) (not (= ldnull g___wargv)) (not (= ldnull g___wargv_1)) (not (= ldnull g__environ)) (not (= ldnull g__environ_1)) (not (= ldnull g__wenviron)) (not (= ldnull g__wenviron_1)) (not (= ldnull g__pgmptr)) (not (= ldnull g__pgmptr_1)) (not (= ldnull g__wpgmptr)) (not (= ldnull g__wpgmptr_1)) (not (= ldnull g__fmode)) (not (= ldnull g__fmode_1)) (not (= size global_ghost)) (not (= size node__parent)) (not (= size node__reachable_nodes)) (not (= size g___mb_cur_max)) (not (= size g___mb_cur_max_1)) (not (= size g___argc)) (not (= size g___argc_1)) (not (= size g___argv)) (not (= size g___argv_1)) (not (= size g___wargv)) (not (= size g___wargv_1)) (not (= size g__environ)) (not (= size g__environ_1)) (not (= size g__wenviron)) (not (= size g__wenviron_1)) (not (= size g__pgmptr)) (not (= size g__pgmptr_1)) (not (= size g__wpgmptr)) (not (= size g__wpgmptr_1)) (not (= size g__fmode)) (not (= size g__fmode_1)) (not (= global_ghost node__parent)) (not (= global_ghost node__reachable_nodes)) (not (= global_ghost g___mb_cur_max)) (not (= global_ghost g___mb_cur_max_1)) (not (= global_ghost g___argc)) (not (= global_ghost g___argc_1)) (not (= global_ghost g___argv)) (not (= global_ghost g___argv_1)) (not (= global_ghost g___wargv)) (not (= global_ghost g___wargv_1)) (not (= global_ghost g__environ)) (not (= global_ghost g__environ_1)) (not (= global_ghost g__wenviron)) (not (= global_ghost g__wenviron_1)) (not (= global_ghost g__pgmptr)) (not (= global_ghost g__pgmptr_1)) (not (= global_ghost g__wpgmptr)) (not (= global_ghost g__wpgmptr_1)) (not (= global_ghost g__fmode)) (not (= global_ghost g__fmode_1)) (not (= node__parent node__reachable_nodes)) (not (= node__parent g___mb_cur_max)) (not (= node__parent g___mb_cur_max_1)) (not (= node__parent g___argc)) (not (= node__parent g___argc_1)) (not (= node__parent g___argv)) (not (= node__parent g___argv_1)) (not (= node__parent g___wargv)) (not (= node__parent g___wargv_1)) (not (= node__parent g__environ)) (not (= node__parent g__environ_1)) (not (= node__parent g__wenviron)) (not (= node__parent g__wenviron_1)) (not (= node__parent g__pgmptr)) (not (= node__parent g__pgmptr_1)) (not (= node__parent g__wpgmptr)) (not (= node__parent g__wpgmptr_1)) (not (= node__parent g__fmode)) (not (= node__parent g__fmode_1)) (not (= node__reachable_nodes g___mb_cur_max)) (not (= node__reachable_nodes g___mb_cur_max_1)) (not (= node__reachable_nodes g___argc)) (not (= node__reachable_nodes g___argc_1)) (not (= node__reachable_nodes g___argv)) (not (= node__reachable_nodes g___argv_1)) (not (= node__reachable_nodes g___wargv)) (not (= node__reachable_nodes g___wargv_1)) (not (= node__reachable_nodes g__environ)) (not (= node__reachable_nodes g__environ_1)) (not (= node__reachable_nodes g__wenviron)) (not (= node__reachable_nodes g__wenviron_1)) (not (= node__reachable_nodes g__pgmptr)) (not (= node__reachable_nodes g__pgmptr_1)) (not (= node__reachable_nodes g__wpgmptr)) (not (= node__reachable_nodes g__wpgmptr_1)) (not (= node__reachable_nodes g__fmode)) (not (= node__reachable_nodes g__fmode_1)) (not (= g___mb_cur_max g___mb_cur_max_1)) (not (= g___mb_cur_max g___argc)) (not (= g___mb_cur_max g___argc_1)) (not (= g___mb_cur_max g___argv)) (not (= g___mb_cur_max g___argv_1)) (not (= g___mb_cur_max g___wargv)) (not (= g___mb_cur_max g___wargv_1)) (not (= g___mb_cur_max g__environ)) (not (= g___mb_cur_max g__environ_1)) (not (= g___mb_cur_max g__wenviron)) (not (= g___mb_cur_max g__wenviron_1)) (not (= g___mb_cur_max g__pgmptr)) (not (= g___mb_cur_max g__pgmptr_1)) (not (= g___mb_cur_max g__wpgmptr)) (not (= g___mb_cur_max g__wpgmptr_1)) (not (= g___mb_cur_max g__fmode)) (not (= g___mb_cur_max g__fmode_1)) (not (= g___mb_cur_max_1 g___argc)) (not (= g___mb_cur_max_1 g___argc_1)) (not (= g___mb_cur_max_1 g___argv)) (not (= g___mb_cur_max_1 g___argv_1)) (not (= g___mb_cur_max_1 g___wargv)) (not (= g___mb_cur_max_1 g___wargv_1)) (not (= g___mb_cur_max_1 g__environ)) (not (= g___mb_cur_max_1 g__environ_1)) (not (= g___mb_cur_max_1 g__wenviron)) (not (= g___mb_cur_max_1 g__wenviron_1)) (not (= g___mb_cur_max_1 g__pgmptr)) (not (= g___mb_cur_max_1 g__pgmptr_1)) (not (= g___mb_cur_max_1 g__wpgmptr)) (not (= g___mb_cur_max_1 g__wpgmptr_1)) (not (= g___mb_cur_max_1 g__fmode)) (not (= g___mb_cur_max_1 g__fmode_1)) (not (= g___argc g___argc_1)) (not (= g___argc g___argv)) (not (= g___argc g___argv_1)) (not (= g___argc g___wargv)) (not (= g___argc g___wargv_1)) (not (= g___argc g__environ)) (not (= g___argc g__environ_1)) (not (= g___argc g__wenviron)) (not (= g___argc g__wenviron_1)) (not (= g___argc g__pgmptr)) (not (= g___argc g__pgmptr_1)) (not (= g___argc g__wpgmptr)) (not (= g___argc g__wpgmptr_1)) (not (= g___argc g__fmode)) (not (= g___argc g__fmode_1)) (not (= g___argc_1 g___argv)) (not (= g___argc_1 g___argv_1)) (not (= g___argc_1 g___wargv)) (not (= g___argc_1 g___wargv_1)) (not (= g___argc_1 g__environ)) (not (= g___argc_1 g__environ_1)) (not (= g___argc_1 g__wenviron)) (not (= g___argc_1 g__wenviron_1)) (not (= g___argc_1 g__pgmptr)) (not (= g___argc_1 g__pgmptr_1)) (not (= g___argc_1 g__wpgmptr)) (not (= g___argc_1 g__wpgmptr_1)) (not (= g___argc_1 g__fmode)) (not (= g___argc_1 g__fmode_1)) (not (= g___argv g___argv_1)) (not (= g___argv g___wargv)) (not (= g___argv g___wargv_1)) (not (= g___argv g__environ)) (not (= g___argv g__environ_1)) (not (= g___argv g__wenviron)) (not (= g___argv g__wenviron_1)) (not (= g___argv g__pgmptr)) (not (= g___argv g__pgmptr_1)) (not (= g___argv g__wpgmptr)) (not (= g___argv g__wpgmptr_1)) (not (= g___argv g__fmode)) (not (= g___argv g__fmode_1)) (not (= g___argv_1 g___wargv)) (not (= g___argv_1 g___wargv_1)) (not (= g___argv_1 g__environ)) (not (= g___argv_1 g__environ_1)) (not (= g___argv_1 g__wenviron)) (not (= g___argv_1 g__wenviron_1)) (not (= g___argv_1 g__pgmptr)) (not (= g___argv_1 g__pgmptr_1)) (not (= g___argv_1 g__wpgmptr)) (not (= g___argv_1 g__wpgmptr_1)) (not (= g___argv_1 g__fmode)) (not (= g___argv_1 g__fmode_1)) (not (= g___wargv g___wargv_1)) (not (= g___wargv g__environ)) (not (= g___wargv g__environ_1)) (not (= g___wargv g__wenviron)) (not (= g___wargv g__wenviron_1)) (not (= g___wargv g__pgmptr)) (not (= g___wargv g__pgmptr_1)) (not (= g___wargv g__wpgmptr)) (not (= g___wargv g__wpgmptr_1)) (not (= g___wargv g__fmode)) (not (= g___wargv g__fmode_1)) (not (= g___wargv_1 g__environ)) (not (= g___wargv_1 g__environ_1)) (not (= g___wargv_1 g__wenviron)) (not (= g___wargv_1 g__wenviron_1)) (not (= g___wargv_1 g__pgmptr)) (not (= g___wargv_1 g__pgmptr_1)) (not (= g___wargv_1 g__wpgmptr)) (not (= g___wargv_1 g__wpgmptr_1)) (not (= g___wargv_1 g__fmode)) (not (= g___wargv_1 g__fmode_1)) (not (= g__environ g__environ_1)) (not (= g__environ g__wenviron)) (not (= g__environ g__wenviron_1)) (not (= g__environ g__pgmptr)) (not (= g__environ g__pgmptr_1)) (not (= g__environ g__wpgmptr)) (not (= g__environ g__wpgmptr_1)) (not (= g__environ g__fmode)) (not (= g__environ g__fmode_1)) (not (= g__environ_1 g__wenviron)) (not (= g__environ_1 g__wenviron_1)) (not (= g__environ_1 g__pgmptr)) (not (= g__environ_1 g__pgmptr_1)) (not (= g__environ_1 g__wpgmptr)) (not (= g__environ_1 g__wpgmptr_1)) (not (= g__environ_1 g__fmode)) (not (= g__environ_1 g__fmode_1)) (not (= g__wenviron g__wenviron_1)) (not (= g__wenviron g__pgmptr)) (not (= g__wenviron g__pgmptr_1)) (not (= g__wenviron g__wpgmptr)) (not (= g__wenviron g__wpgmptr_1)) (not (= g__wenviron g__fmode)) (not (= g__wenviron g__fmode_1)) (not (= g__wenviron_1 g__pgmptr)) (not (= g__wenviron_1 g__pgmptr_1)) (not (= g__wenviron_1 g__wpgmptr)) (not (= g__wenviron_1 g__wpgmptr_1)) (not (= g__wenviron_1 g__fmode)) (not (= g__wenviron_1 g__fmode_1)) (not (= g__pgmptr g__pgmptr_1)) (not (= g__pgmptr g__wpgmptr)) (not (= g__pgmptr g__wpgmptr_1)) (not (= g__pgmptr g__fmode)) (not (= g__pgmptr g__fmode_1)) (not (= g__pgmptr_1 g__wpgmptr)) (not (= g__pgmptr_1 g__wpgmptr_1)) (not (= g__pgmptr_1 g__fmode)) (not (= g__pgmptr_1 g__fmode_1)) (not (= g__wpgmptr g__wpgmptr_1)) (not (= g__wpgmptr g__fmode)) (not (= g__wpgmptr g__fmode_1)) (not (= g__wpgmptr_1 g__fmode)) (not (= g__wpgmptr_1 g__fmode_1)) (not (= g__fmode g__fmode_1))) :named A1_33))
(assert (! (forall ((?apy6 Int)(?bpy6 Int)(?opy3 Int)) (! (and (or (= (select1 ?apy6 ?opy3) 1) (= (select1 ?bpy6 ?opy3) 1) (not (= (select1 (set_union ?apy6 ?bpy6) ?opy3) 1))) (or (= (select1 (set_union ?apy6 ?bpy6) ?opy3) 1) (and (not (= (select1 ?apy6 ?opy3) 1)) (not (= (select1 ?bpy6 ?opy3) 1))))) :pattern ((select1 (set_union ?apy6 ?bpy6) ?opy3)) )) :named A1_34))
(assert (! (forall ((?apy7 Int)(?bpy7 Int)(?opy4 Int)) (! (and (or (not (= (select1 (set_difference ?apy7 ?bpy7) ?opy4) 1)) (and (= (select1 ?apy7 ?opy4) 1) (not (= (select1 ?bpy7 ?opy4) 1)))) (or (= (select1 ?bpy7 ?opy4) 1) (= (select1 (set_difference ?apy7 ?bpy7) ?opy4) 1) (not (= (select1 ?apy7 ?opy4) 1)))) :pattern ((select1 (set_difference ?apy7 ?bpy7) ?opy4)) )) :named A1_35))
(assert (! (forall ((?apy8 Int)(?bpy8 Int)) (! (and (or (not (set_disjoint ?apy8 ?bpy8)) (forall ((?opy5 Int)) (! (or (not (= (select1 ?apy8 ?opy5) 1)) (not (= (select1 ?bpy8 ?opy5) 1))) :pattern ((select1 ?apy8 ?opy5)) :pattern ((select1 ?bpy8 ?opy5)) ))) (or (set_disjoint ?apy8 ?bpy8) (and (= (select1 ?apy8 (?o!12 ?bpy8 ?apy8)) 1) (= (select1 ?bpy8 (?o!12 ?bpy8 ?apy8)) 1)))) :pattern ((set_disjoint ?apy8 ?bpy8)) )) :named A1_36))
(assert (! (forall ((?apy9 Int)(?bpy9 Int)) (! (and (or (not (set_equal ?apy9 ?bpy9)) (forall ((?opy6 Int)) (! (and (or (not (= (select1 ?apy9 ?opy6) 1)) (= (select1 ?bpy9 ?opy6) 1)) (or (= (select1 ?apy9 ?opy6) 1) (not (= (select1 ?bpy9 ?opy6) 1)))) :pattern ((select1 ?apy9 ?opy6)) :pattern ((select1 ?bpy9 ?opy6)) ))) (or (set_equal ?apy9 ?bpy9) (and (or (= (select1 ?apy9 (?o!11 ?bpy9 ?apy9)) 1) (= (select1 ?bpy9 (?o!11 ?bpy9 ?apy9)) 1)) (or (not (= (select1 ?apy9 (?o!11 ?bpy9 ?apy9)) 1)) (not (= (select1 ?bpy9 (?o!11 ?bpy9 ?apy9)) 1)))))) :pattern ((set_equal ?apy9 ?bpy9)) )) :named A1_37))
(assert (! (forall ((?apy10 Int)(?bpy10 Int)) (! (and (or (not (set_subset ?apy10 ?bpy10)) (forall ((?opy7 Int)) (! (or (not (= (select1 ?apy10 ?opy7) 1)) (= (select1 ?bpy10 ?opy7) 1)) :pattern ((select1 ?apy10 ?opy7)) :pattern ((select1 ?bpy10 ?opy7)) ))) (or (set_subset ?apy10 ?bpy10) (and (= (select1 ?apy10 (?o!10 ?bpy10 ?apy10)) 1) (not (= (select1 ?bpy10 (?o!10 ?bpy10 ?apy10)) 1))))) :pattern ((set_subset ?apy10 ?bpy10)) )) :named A1_38))
(assert (! (forall ((?apy11 Int)(?bpy11 Int)) (! (or (not (set_subset ?apy11 ?bpy11)) (contains (NodeSetToRegion ?apy11) (NodeSetToRegion ?bpy11))) :pattern ((contains (NodeSetToRegion ?apy11) (NodeSetToRegion ?bpy11))) )) :named A1_39))
(assert (! (forall ((?apy12 Int)) (! (= (select2 ?apy12 (ptr2gid (ptr (base global_ghost) 0)) size) 0) :pattern ((select2 ?apy12 (ptr2gid (ptr (base global_ghost) 0)) size)) )) :named A1_40))
(assert (! (forall ((?a_1py0 Int)) (! (= (select2 ?a_1py0 (ptr2gid (ptr (base g___argc) 0)) size) 4) :pattern ((select2 ?a_1py0 (ptr2gid (ptr (base g___argc) 0)) size)) )) :named A1_41))
(assert (! (forall ((?a_1py1 Int)) (! (= (select2 ?a_1py1 (ptr2gid (ptr (base g___argv) 0)) size) 8) :pattern ((select2 ?a_1py1 (ptr2gid (ptr (base g___argv) 0)) size)) )) :named A1_42))
(assert (! (forall ((?a_1py2 Int)) (! (= (select2 ?a_1py2 (ptr2gid (ptr (base g___mb_cur_max) 0)) size) 4) :pattern ((select2 ?a_1py2 (ptr2gid (ptr (base g___mb_cur_max) 0)) size)) )) :named A1_43))
(assert (! (forall ((?a_1py3 Int)) (! (= (select2 ?a_1py3 (ptr2gid (ptr (base g___wargv) 0)) size) 8) :pattern ((select2 ?a_1py3 (ptr2gid (ptr (base g___wargv) 0)) size)) )) :named A1_44))
(assert (! (forall ((?a_1py4 Int)) (! (= (select2 ?a_1py4 (ptr2gid (ptr (base g__environ) 0)) size) 8) :pattern ((select2 ?a_1py4 (ptr2gid (ptr (base g__environ) 0)) size)) )) :named A1_45))
(assert (! (forall ((?a_1py5 Int)) (! (= (select2 ?a_1py5 (ptr2gid (ptr (base g__fmode) 0)) size) 4) :pattern ((select2 ?a_1py5 (ptr2gid (ptr (base g__fmode) 0)) size)) )) :named A1_46))
(assert (! (forall ((?a_1py6 Int)) (! (= (select2 ?a_1py6 (ptr2gid (ptr (base g__pgmptr) 0)) size) 8) :pattern ((select2 ?a_1py6 (ptr2gid (ptr (base g__pgmptr) 0)) size)) )) :named A1_47))
(assert (! (forall ((?a_1py7 Int)) (! (= (select2 ?a_1py7 (ptr2gid (ptr (base g__wenviron) 0)) size) 8) :pattern ((select2 ?a_1py7 (ptr2gid (ptr (base g__wenviron) 0)) size)) )) :named A1_48))
(assert (! (forall ((?a_1py8 Int)) (! (= (select2 ?a_1py8 (ptr2gid (ptr (base g__wpgmptr) 0)) size) 8) :pattern ((select2 ?a_1py8 (ptr2gid (ptr (base g__wpgmptr) 0)) size)) )) :named A1_49))
(assert (! (forall ((?allocpy0 Int)(?ppy2 Int)(?lenpy0 Int)) (! (and (or (not (valid ?allocpy0 ?ppy2 ?lenpy0)) (and (not (= (base ?ppy2) nullObject)) (<= 0 ?lenpy0) (<= 0 (offset ?ppy2)) (<= (+ (offset ?ppy2) ?lenpy0) (select2 ?allocpy0 (ptr2gid (ptr (base ?ppy2) 0)) size)))) (or (valid ?allocpy0 ?ppy2 ?lenpy0) (= (base ?ppy2) nullObject) (not (<= 0 ?lenpy0)) (not (<= 0 (offset ?ppy2))) (not (<= (+ (offset ?ppy2) ?lenpy0) (select2 ?allocpy0 (ptr2gid (ptr (base ?ppy2) 0)) size))))) :pattern ((valid ?allocpy0 ?ppy2 ?lenpy0)) )) :named A1_50))
(assert (! (forall ((?base_1py0 Int)(?off1py0 Int)(?len1py0 Int)(?off2py0 Int)(?len2py0 Int)) (! (or (overlaps (region (ptr ?base_1py0 ?off1py0) ?len1py0) (region (ptr ?base_1py0 ?off2py0) ?len2py0)) (and (or (not (<= 0 ?len1py0)) (not (<= ?off1py0 ?off2py0)) (<= (+ ?off1py0 ?len1py0) ?off2py0)) (or (not (<= 0 ?len2py0)) (not (<= ?off2py0 ?off1py0)) (<= (+ ?off2py0 ?len2py0) ?off1py0)))) :pattern ((overlaps (region (ptr ?base_1py0 ?off1py0) ?len1py0) (region (ptr ?base_1py0 ?off2py0) ?len2py0))) )) :named A1_51))
(assert (! (forall ((?bigpy0 Int)(?biglpy0 Int)(?smallpy0 Int)(?smalllpy0 Int)) (! (and (or (not (contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0))) (and (= (base ?bigpy0) (base ?smallpy0)) (<= (offset ?bigpy0) (offset ?smallpy0)) (<= (offset ?smallpy0) (+ (offset ?bigpy0) ?biglpy0)) (<= (offset ?bigpy0) (+ (offset ?smallpy0) ?smalllpy0)) (<= (+ (offset ?smallpy0) ?smalllpy0) (+ (offset ?bigpy0) ?biglpy0)))) (or (contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0)) (not (= (base ?bigpy0) (base ?smallpy0))) (not (<= (offset ?bigpy0) (offset ?smallpy0))) (not (<= (offset ?smallpy0) (+ (offset ?bigpy0) ?biglpy0))) (not (<= (offset ?bigpy0) (+ (offset ?smallpy0) ?smalllpy0))) (not (<= (+ (offset ?smallpy0) ?smalllpy0) (+ (offset ?bigpy0) ?biglpy0))))) :pattern ((contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0))) )) :named A1_52))
(assert (! (forall ((?ipy2 Int)(?jpy1 Int)) (! (or (<= ?ipy2 0) (<= ?jpy1 0) (and (not (<= (* (x_1 ?ipy2 ?jpy1) ?jpy1) (+ ?ipy2 (* (- 1) ?jpy1)))) (<= (* (x_1 ?ipy2 ?jpy1) ?jpy1) ?ipy2))) :pattern ((x_1 ?ipy2 ?jpy1)) )) :named A1_53))
(assert (! (forall ((?ipy3 Int)(?jpy2 Int)) (! (or (not (<= 0 ?ipy3)) (<= (x_1 ?ipy3 ?jpy2) ?ipy3) (<= ?jpy2 0)) :pattern ((x_1 ?ipy3 ?jpy2)) )) :named A1_54))
(assert (! (forall ((?ipy4 Int)(?rpy0 Int)) (! (= (base (ptr ?rpy0 ?ipy4)) ?rpy0) :pattern ((ptr ?rpy0 ?ipy4)) )) :named A1_55))
(assert (! (forall ((?ipy5 Int)(?rpy1 Int)) (! (= (offset (ptr ?rpy1 ?ipy5)) ?ipy5) :pattern ((ptr ?rpy1 ?ipy5)) )) :named A1_56))
(assert (! (forall ((?ipy6 Int)) (! (or (= ?ipy6 0) (= (x_1 ?ipy6 ?ipy6) 1)) :pattern ((x_1 ?ipy6 ?ipy6)) )) :named A1_57))
(assert (! (forall ((?mpy0 Int)(?ppy3 Int)(?lenpy1 Int)(?leftpy0 Int)(?rightpy0 Int)) (! (= (bv_extract (ld_u4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0) (bv_extract (ld_i4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0)) :pattern ((bv_extract (ld_u4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0) (bv_extract (ld_i4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0)) )) :named A1_58))
(assert (! (forall ((?mpy1 Int)(?ppy4 Int)) (! (or (not (good_mem ?mpy1)) (and (<= min_i1 (ld_i1 ?mpy1 ?ppy4)) (<= (ld_i1 ?mpy1 ?ppy4) max_i1))) :pattern ((ld_i1 ?mpy1 ?ppy4)) )) :named A1_59))
(assert (! (forall ((?mpy2 Int)(?ppy5 Int)) (! (or (not (good_mem ?mpy2)) (and (<= min_i2 (ld_i2 ?mpy2 ?ppy5)) (<= (ld_i2 ?mpy2 ?ppy5) max_i2))) :pattern ((ld_i2 ?mpy2 ?ppy5)) )) :named A1_60))
(assert (! (forall ((?mpy3 Int)(?ppy6 Int)) (! (or (not (good_mem ?mpy3)) (and (<= min_i4 (ld_i4 ?mpy3 ?ppy6)) (<= (ld_i4 ?mpy3 ?ppy6) max_i4))) :pattern ((ld_i4 ?mpy3 ?ppy6)) )) :named A1_61))
(assert (! (forall ((?mpy4 Int)(?ppy7 Int)) (! (or (not (good_mem ?mpy4)) (and (<= min_i8 (ld_i8 ?mpy4 ?ppy7)) (<= (ld_i8 ?mpy4 ?ppy7) max_i8))) :pattern ((ld_i8 ?mpy4 ?ppy7)) )) :named A1_62))
(assert (! (forall ((?mpy5 Int)(?ppy8 Int)) (! (or (not (good_mem ?mpy5)) (and (<= min_u1 (ld_u1 ?mpy5 ?ppy8)) (<= (ld_u1 ?mpy5 ?ppy8) max_u1))) :pattern ((ld_u1 ?mpy5 ?ppy8)) )) :named A1_63))
(assert (! (forall ((?mpy6 Int)(?ppy9 Int)) (! (or (not (good_mem ?mpy6)) (and (<= min_u2 (ld_u2 ?mpy6 ?ppy9)) (<= (ld_u2 ?mpy6 ?ppy9) max_u2))) :pattern ((ld_u2 ?mpy6 ?ppy9)) )) :named A1_64))
(assert (! (forall ((?mpy7 Int)(?ppy10 Int)) (! (or (not (good_mem ?mpy7)) (and (<= min_u4 (ld_u4 ?mpy7 ?ppy10)) (<= (ld_u4 ?mpy7 ?ppy10) max_u4))) :pattern ((ld_u4 ?mpy7 ?ppy10)) )) :named A1_65))
(assert (! (forall ((?mpy8 Int)(?ppy11 Int)) (! (or (not (good_mem ?mpy8)) (and (<= min_u8 (ld_u8 ?mpy8 ?ppy11)) (<= (ld_u8 ?mpy8 ?ppy11) max_u8))) :pattern ((ld_u8 ?mpy8 ?ppy11)) )) :named A1_66))
(assert (! (forall ((?mpy9 Int)(?p1py0 Int)(?p2py0 Int)(?lenpy2 Int)) (! (or (and (<= 0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9)) (not (<= ?lenpy2 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9))) (not (= (ld_i1 ?mpy9 (add_ptr ?p1py0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9) 1)) (ld_i1 ?mpy9 (add_ptr ?p2py0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9) 1))))) (same_mem ?mpy9 ?p1py0 ?p2py0 ?lenpy2)) :pattern ((?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9)) :pattern ((same_mem ?mpy9 ?p1py0 ?p2py0 ?lenpy2)) )) :named A1_67))
(assert (! (forall ((?mdstpy0 Int)(?dstpy0 Int)(?msrcpy0 Int)(?srcpy0 Int)(?lenpy3 Int)) (! (or (not (same_region ?mdstpy0 ?dstpy0 ?msrcpy0 ?srcpy0 ?lenpy3)) (and (forall ((?ppy12 Int)) (! (or (not (contains (region ?ppy12 1) (region ?dstpy0 ?lenpy3))) (= (ld_i1 ?mdstpy0 ?ppy12) (ld_i1 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy12 ?dstpy0) 1)))) :pattern ((ld_i1 ?mdstpy0 ?ppy12)) )) (forall ((?ppy13 Int)) (! (or (not (contains (region ?ppy13 1) (region ?dstpy0 ?lenpy3))) (= (ld_u1 ?mdstpy0 ?ppy13) (ld_u1 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy13 ?dstpy0) 1)))) :pattern ((ld_u1 ?mdstpy0 ?ppy13)) )) (forall ((?ppy14 Int)) (! (or (not (contains (region ?ppy14 2) (region ?dstpy0 ?lenpy3))) (= (ld_i2 ?mdstpy0 ?ppy14) (ld_i2 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy14 ?dstpy0) 1)))) :pattern ((ld_i2 ?mdstpy0 ?ppy14)) )) (forall ((?ppy15 Int)) (! (or (not (contains (region ?ppy15 2) (region ?dstpy0 ?lenpy3))) (= (ld_u2 ?mdstpy0 ?ppy15) (ld_u2 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy15 ?dstpy0) 1)))) :pattern ((ld_u2 ?mdstpy0 ?ppy15)) )) (forall ((?ppy16 Int)) (! (or (not (contains (region ?ppy16 4) (region ?dstpy0 ?lenpy3))) (= (ld_i4 ?mdstpy0 ?ppy16) (ld_i4 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy16 ?dstpy0) 1)))) :pattern ((ld_i4 ?mdstpy0 ?ppy16)) )) (forall ((?ppy17 Int)) (! (or (not (contains (region ?ppy17 4) (region ?dstpy0 ?lenpy3))) (= (ld_u4 ?mdstpy0 ?ppy17) (ld_u4 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy17 ?dstpy0) 1)))) :pattern ((ld_u4 ?mdstpy0 ?ppy17)) )) (forall ((?ppy18 Int)) (! (or (not (contains (region ?ppy18 8) (region ?dstpy0 ?lenpy3))) (= (ld_i8 ?mdstpy0 ?ppy18) (ld_i8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy18 ?dstpy0) 1)))) :pattern ((ld_i8 ?mdstpy0 ?ppy18)) )) (forall ((?ppy19 Int)) (! (or (not (contains (region ?ppy19 8) (region ?dstpy0 ?lenpy3))) (= (ld_u8 ?mdstpy0 ?ppy19) (ld_u8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy19 ?dstpy0) 1)))) :pattern ((ld_u8 ?mdstpy0 ?ppy19)) )) (forall ((?ppy20 Int)) (! (or (not (contains (region ?ppy20 8) (region ?dstpy0 ?lenpy3))) (= (conv_u8_to_ptr (ld_u8 ?mdstpy0 ?ppy20)) (conv_u8_to_ptr (ld_u8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy20 ?dstpy0) 1))))) :pattern ((conv_u8_to_ptr (ld_u8 ?mdstpy0 ?ppy20))) )))) :pattern ((same_region ?mdstpy0 ?dstpy0 ?msrcpy0 ?srcpy0 ?lenpy3)) )) :named A1_68))
(assert (! (forall ((?mem_5py0 Int)(?gmem_6py0 Int)(?npy1 Int)) (! (= (conv_bool_to_i4 (z3name!21 ?npy1 ?gmem_6py0 ?mem_5py0)) (conv_bool_to_i4 (z3name!22 ?npy1 ?gmem_6py0 ?mem_5py0))) :pattern ((inv ?mem_5py0 ?gmem_6py0 ?npy1)) )) :named A1_69))
(assert (! (forall ((?mem_5py1 Int)(?gmem_6py1 Int)(?npy2 Int)) (! (= (inv ?mem_5py1 ?gmem_6py1 ?npy2) (conv_bool_to_i4 (z3name!15 ?npy2 ?gmem_6py1 ?mem_5py1))) :pattern ((inv ?mem_5py1 ?gmem_6py1 ?npy2)) )) :named A1_70))
(assert (! (forall ((?mem_5py2 Int)(?gmem_6py2 Int)(?ppy21 Int)) (! (= (NodeFootprint ?mem_5py2 ?gmem_6py2 ?ppy21) (NodeSetToRegion (select2 ?gmem_6py2 (ptr2gid ?ppy21) node__reachable_nodes))) :pattern ((NodeFootprint ?mem_5py2 ?gmem_6py2 ?ppy21)) )) :named A1_71))
(assert (! (forall ((?mem_6py0 Int)(?rpy2 Int)(?lenpy4 Int)) (! (or (not (zero_region ?mem_6py0 ?rpy2 ?lenpy4)) (and (forall ((?ppy22 Int)) (! (or (not (contains (region ?ppy22 1) (region ?rpy2 ?lenpy4))) (= (ld_i1 ?mem_6py0 ?ppy22) 0)) :pattern ((ld_i1 ?mem_6py0 ?ppy22)) )) (forall ((?ppy23 Int)) (! (or (not (contains (region ?ppy23 1) (region ?rpy2 ?lenpy4))) (= (ld_u1 ?mem_6py0 ?ppy23) 0)) :pattern ((ld_u1 ?mem_6py0 ?ppy23)) )) (forall ((?ppy24 Int)) (! (or (not (contains (region ?ppy24 2) (region ?rpy2 ?lenpy4))) (= (ld_i2 ?mem_6py0 ?ppy24) 0)) :pattern ((ld_i2 ?mem_6py0 ?ppy24)) )) (forall ((?ppy25 Int)) (! (or (not (contains (region ?ppy25 2) (region ?rpy2 ?lenpy4))) (= (ld_u2 ?mem_6py0 ?ppy25) 0)) :pattern ((ld_u2 ?mem_6py0 ?ppy25)) )) (forall ((?ppy26 Int)) (! (or (not (contains (region ?ppy26 4) (region ?rpy2 ?lenpy4))) (= (ld_i4 ?mem_6py0 ?ppy26) 0)) :pattern ((ld_i4 ?mem_6py0 ?ppy26)) )) (forall ((?ppy27 Int)) (! (or (not (contains (region ?ppy27 4) (region ?rpy2 ?lenpy4))) (= (ld_u4 ?mem_6py0 ?ppy27) 0)) :pattern ((ld_u4 ?mem_6py0 ?ppy27)) )) (forall ((?ppy28 Int)) (! (or (not (contains (region ?ppy28 8) (region ?rpy2 ?lenpy4))) (= (ld_i8 ?mem_6py0 ?ppy28) 0)) :pattern ((ld_i8 ?mem_6py0 ?ppy28)) )) (forall ((?ppy29 Int)) (! (or (not (contains (region ?ppy29 8) (region ?rpy2 ?lenpy4))) (= (ld_u8 ?mem_6py0 ?ppy29) 0)) :pattern ((ld_u8 ?mem_6py0 ?ppy29)) )) (forall ((?ppy30 Int)) (! (or (not (contains (region ?ppy30 8) (region ?rpy2 ?lenpy4))) (= (conv_u8_to_ptr (ld_u8 ?mem_6py0 ?ppy30)) ldnull)) :pattern ((conv_u8_to_ptr (ld_u8 ?mem_6py0 ?ppy30))) )))) :pattern ((zero_region ?mem_6py0 ?rpy2 ?lenpy4)) )) :named A1_72))
(assert (! (forall ((?mem_6py1 Int)(?r1py0 Int)(?len1py1 Int)(?r2py0 Int)(?len2py1 Int)) (! (or (not (contains (region ?r2py0 ?len2py1) (region ?r1py0 ?len1py1))) (not (zero_region ?mem_6py1 ?r1py0 ?len1py1)) (zero_region ?mem_6py1 ?r2py0 ?len2py1)) :pattern ((contains (region ?r2py0 ?len2py1) (region ?r1py0 ?len1py1)) (zero_region ?mem_6py1 ?r1py0 ?len1py1)) )) :named A1_73))
(assert (! (forall ((?npy3 Int)(?spy0 Int)) (! (or (not (= (select1 ?spy0 ?npy3) 1)) (contains (region ?npy3 24) (NodeSetToRegion ?spy0))) :pattern ((select1 ?spy0 ?npy3) (NodeSetToRegion ?spy0)) )) :named A1_74))
(assert (! (forall ((?opy8 Int)) (! (not (= (select1 set_empty ?opy8) 1)) :pattern ((select1 set_empty ?opy8)) )) :named A1_75))
(assert (! (forall ((?oldallocpy0 Int)(?newallocpy0 Int)) (! (and (or (not (alloc_grows ?oldallocpy0 ?newallocpy0)) (forall ((?ppy31 Int)) (! (or (= (select2 ?oldallocpy0 (ptr2gid (ptr ?ppy31 0)) size) 0) (= (select2 ?oldallocpy0 (ptr2gid (ptr ?ppy31 0)) size) (select2 ?newallocpy0 (ptr2gid (ptr ?ppy31 0)) size))) :pattern ((select2 ?newallocpy0 (ptr2gid (ptr ?ppy31 0)) size)) ))) (or (alloc_grows ?oldallocpy0 ?newallocpy0) (and (not (= (select2 ?oldallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size) 0)) (not (= (select2 ?oldallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size) (select2 ?newallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size)))))) :pattern ((alloc_grows ?oldallocpy0 ?newallocpy0)) )) :named A1_76))
(assert (! (forall ((?oldmempy0 Int)(?oldgmempy0 Int)(?newmempy0 Int)(?newgmempy0 Int)(?chgRegionpy0 Int)(?npy4 Int)) (! (or (not (only_region_changed_or_new_trans ?chgRegionpy0 ?oldgmempy0 ?newgmempy0 ?oldmempy0 ?newmempy0)) (overlaps ?chgRegionpy0 (NodeFootprint ?oldmempy0 ?oldgmempy0 ?npy4)) (= (inv ?oldmempy0 ?oldgmempy0 ?npy4) (inv ?newmempy0 ?newgmempy0 ?npy4))) :pattern ((inv ?oldmempy0 ?oldgmempy0 ?npy4) (inv ?newmempy0 ?newgmempy0 ?npy4) (only_region_changed_or_new_trans ?chgRegionpy0 ?oldgmempy0 ?newgmempy0 ?oldmempy0 ?newmempy0)) )) :named A1_77))
(assert (! (forall ((?oldmempy1 Int)(?oldgmempy1 Int)(?newmempy1 Int)(?newgmempy1 Int)(?chgRegionpy1 Int)(?ppy32 Int)) (! (or (not (only_region_changed_or_new_trans ?chgRegionpy1 ?oldgmempy1 ?newgmempy1 ?oldmempy1 ?newmempy1)) (overlaps ?chgRegionpy1 (NodeFootprint ?oldmempy1 ?oldgmempy1 ?ppy32)) (= (NodeFootprint ?oldmempy1 ?oldgmempy1 ?ppy32) (NodeFootprint ?newmempy1 ?newgmempy1 ?ppy32))) :pattern ((NodeFootprint ?oldmempy1 ?oldgmempy1 ?ppy32) (NodeFootprint ?newmempy1 ?newgmempy1 ?ppy32) (only_region_changed_or_new_trans ?chgRegionpy1 ?oldgmempy1 ?newgmempy1 ?oldmempy1 ?newmempy1)) )) :named A1_78))
(assert (! (forall ((?ppy33 Int)(?mpy10 Int)(?vpy13 Int)) (! (= (ld_i1 (st_i1 ?mpy10 ?ppy33 ?vpy13) ?ppy33) ?vpy13) :pattern ((st_i1 ?mpy10 ?ppy33 ?vpy13)) )) :named A1_79))
(assert (! (forall ((?ppy34 Int)(?mpy11 Int)(?vpy14 Int)) (! (= (ld_i2 (st_i2 ?mpy11 ?ppy34 ?vpy14) ?ppy34) ?vpy14) :pattern ((st_i2 ?mpy11 ?ppy34 ?vpy14)) )) :named A1_80))
(assert (! (forall ((?ppy35 Int)(?mpy12 Int)(?vpy15 Int)) (! (= (ld_i4 (st_i4 ?mpy12 ?ppy35 ?vpy15) ?ppy35) ?vpy15) :pattern ((st_i4 ?mpy12 ?ppy35 ?vpy15)) )) :named A1_81))
(assert (! (forall ((?ppy36 Int)(?mpy13 Int)(?vpy16 Int)) (! (= (ld_i8 (st_i8 ?mpy13 ?ppy36 ?vpy16) ?ppy36) ?vpy16) :pattern ((st_i8 ?mpy13 ?ppy36 ?vpy16)) )) :named A1_82))
(assert (! (forall ((?ppy37 Int)(?mpy14 Int)(?vpy17 Int)) (! (= (ld_u1 (st_u1 ?mpy14 ?ppy37 ?vpy17) ?ppy37) ?vpy17) :pattern ((st_u1 ?mpy14 ?ppy37 ?vpy17)) )) :named A1_83))
(assert (! (forall ((?ppy38 Int)(?mpy15 Int)(?vpy18 Int)) (! (= (ld_u2 (st_u2 ?mpy15 ?ppy38 ?vpy18) ?ppy38) ?vpy18) :pattern ((st_u2 ?mpy15 ?ppy38 ?vpy18)) )) :named A1_84))
(assert (! (forall ((?ppy39 Int)(?mpy16 Int)(?vpy19 Int)) (! (= (ld_u4 (st_u4 ?mpy16 ?ppy39 ?vpy19) ?ppy39) ?vpy19) :pattern ((st_u4 ?mpy16 ?ppy39 ?vpy19)) )) :named A1_85))
(assert (! (forall ((?ppy40 Int)(?mpy17 Int)(?vpy20 Int)) (! (= (ld_u8 (st_u8 ?mpy17 ?ppy40 ?vpy20) ?ppy40) ?vpy20) :pattern ((st_u8 ?mpy17 ?ppy40 ?vpy20)) )) :named A1_86))
(assert (! (forall ((?ppy41 Int)(?opy9 Int)(?szpy0 Int)) (! (= (add_ptr ?ppy41 ?opy9 ?szpy0) (ptr (base ?ppy41) (+ (offset ?ppy41) (* ?szpy0 ?opy9)))) :pattern ((add_ptr ?ppy41 ?opy9 ?szpy0)) )) :named A1_87))
(assert (! (forall ((?ppy42 Int)(?qpy0 Int)) (! (or (not (= (base ?ppy42) (base ?qpy0))) (= (sub_ptr ?ppy42 ?qpy0) (+ (offset ?ppy42) (* (- 1) (offset ?qpy0))))) :pattern ((sub_ptr ?ppy42 ?qpy0)) )) :named A1_88))
(assert (! (forall ((?ppy43 Int)) (! (= (base_zero ?ppy43) (ptr (base ?ppy43) 0)) :pattern ((base_zero ?ppy43)) )) :named A1_89))
(assert (! (forall ((?ppy44 Int)) (! (= (gid2ptr (ptr2gid ?ppy44)) ?ppy44) :pattern ((ptr2gid ?ppy44)) )) :named A1_90))
(assert (! (forall ((?ppy45 Int)) (! (= (ptr (base ?ppy45) (offset ?ppy45)) ?ppy45) :pattern ((base ?ppy45)) :pattern ((offset ?ppy45)) )) :named A1_91))
(assert (! (forall ((?ppy46 Int)) (! (= (+ (conv_base_to_i8 (base (conv_i8_to_ptr ?ppy46))) (offset (conv_i8_to_ptr ?ppy46))) ?ppy46) :pattern ((conv_i8_to_ptr ?ppy46)) )) :named A1_92))
(assert (! (forall ((?ppy47 Int)) (! (= (+ (conv_base_to_i8 (base (conv_u8_to_ptr ?ppy47))) (offset (conv_u8_to_ptr ?ppy47))) ?ppy47) :pattern ((conv_u8_to_ptr ?ppy47)) )) :named A1_93))
(assert (! (forall ((?ppy48 Int)) (! (= (conv_i8_to_ptr (+ (conv_base_to_i8 (base ?ppy48)) (offset ?ppy48))) ?ppy48) :pattern ((base ?ppy48)) :pattern ((offset ?ppy48)) )) :named A1_94))
(assert (! (forall ((?ppy49 Int)) (! (= (conv_u8_to_ptr (+ (conv_base_to_i8 (base ?ppy49)) (offset ?ppy49))) ?ppy49) :pattern ((base ?ppy49)) :pattern ((offset ?ppy49)) )) :named A1_95))
(assert (! (forall ((?p1py1 Int)(?p2py1 Int)(?mpy18 Int)(?vpy21 Int)) (! (or (overlaps (region ?p1py1 1) (region ?p2py1 1)) (= (ld_i1 (st_i1 ?mpy18 ?p1py1 ?vpy21) ?p2py1) (ld_i1 ?mpy18 ?p2py1))) :pattern ((ld_i1 (st_i1 ?mpy18 ?p1py1 ?vpy21) ?p2py1)) )) :named A1_96))
(assert (! (forall ((?p1py2 Int)(?p2py2 Int)(?mpy19 Int)(?vpy22 Int)) (! (or (overlaps (region ?p1py2 1) (region ?p2py2 1)) (= (ld_i1 (st_u1 ?mpy19 ?p1py2 ?vpy22) ?p2py2) (ld_i1 ?mpy19 ?p2py2))) :pattern ((ld_i1 (st_u1 ?mpy19 ?p1py2 ?vpy22) ?p2py2)) )) :named A1_97))
(assert (! (forall ((?p1py3 Int)(?p2py3 Int)(?mpy20 Int)(?vpy23 Int)) (! (or (overlaps (region ?p1py3 1) (region ?p2py3 1)) (= (ld_u1 (st_i1 ?mpy20 ?p1py3 ?vpy23) ?p2py3) (ld_u1 ?mpy20 ?p2py3))) :pattern ((ld_u1 (st_i1 ?mpy20 ?p1py3 ?vpy23) ?p2py3)) )) :named A1_98))
(assert (! (forall ((?p1py4 Int)(?p2py4 Int)(?mpy21 Int)(?vpy24 Int)) (! (or (overlaps (region ?p1py4 1) (region ?p2py4 1)) (= (ld_u1 (st_u1 ?mpy21 ?p1py4 ?vpy24) ?p2py4) (ld_u1 ?mpy21 ?p2py4))) :pattern ((ld_u1 (st_u1 ?mpy21 ?p1py4 ?vpy24) ?p2py4)) )) :named A1_99))
(assert (! (forall ((?p1py5 Int)(?p2py5 Int)(?mpy22 Int)(?vpy25 Int)) (! (or (overlaps (region ?p1py5 1) (region ?p2py5 2)) (= (ld_i2 (st_i1 ?mpy22 ?p1py5 ?vpy25) ?p2py5) (ld_i2 ?mpy22 ?p2py5))) :pattern ((ld_i2 (st_i1 ?mpy22 ?p1py5 ?vpy25) ?p2py5)) )) :named A1_100))
(assert (! (forall ((?p1py6 Int)(?p2py6 Int)(?mpy23 Int)(?vpy26 Int)) (! (or (overlaps (region ?p1py6 1) (region ?p2py6 2)) (= (ld_i2 (st_u1 ?mpy23 ?p1py6 ?vpy26) ?p2py6) (ld_i2 ?mpy23 ?p2py6))) :pattern ((ld_i2 (st_u1 ?mpy23 ?p1py6 ?vpy26) ?p2py6)) )) :named A1_101))
(assert (! (forall ((?p1py7 Int)(?p2py7 Int)(?mpy24 Int)(?vpy27 Int)) (! (or (overlaps (region ?p1py7 1) (region ?p2py7 2)) (= (ld_u2 (st_i1 ?mpy24 ?p1py7 ?vpy27) ?p2py7) (ld_u2 ?mpy24 ?p2py7))) :pattern ((ld_u2 (st_i1 ?mpy24 ?p1py7 ?vpy27) ?p2py7)) )) :named A1_102))
(assert (! (forall ((?p1py8 Int)(?p2py8 Int)(?mpy25 Int)(?vpy28 Int)) (! (or (overlaps (region ?p1py8 1) (region ?p2py8 2)) (= (ld_u2 (st_u1 ?mpy25 ?p1py8 ?vpy28) ?p2py8) (ld_u2 ?mpy25 ?p2py8))) :pattern ((ld_u2 (st_u1 ?mpy25 ?p1py8 ?vpy28) ?p2py8)) )) :named A1_103))
(assert (! (forall ((?p1py9 Int)(?p2py9 Int)(?mpy26 Int)(?vpy29 Int)) (! (or (overlaps (region ?p1py9 1) (region ?p2py9 4)) (= (ld_i4 (st_i1 ?mpy26 ?p1py9 ?vpy29) ?p2py9) (ld_i4 ?mpy26 ?p2py9))) :pattern ((ld_i4 (st_i1 ?mpy26 ?p1py9 ?vpy29) ?p2py9)) )) :named A1_104))
(assert (! (forall ((?p1py10 Int)(?p2py10 Int)(?mpy27 Int)(?vpy30 Int)) (! (or (overlaps (region ?p1py10 1) (region ?p2py10 4)) (= (ld_i4 (st_u1 ?mpy27 ?p1py10 ?vpy30) ?p2py10) (ld_i4 ?mpy27 ?p2py10))) :pattern ((ld_i4 (st_u1 ?mpy27 ?p1py10 ?vpy30) ?p2py10)) )) :named A1_105))
(assert (! (forall ((?p1py11 Int)(?p2py11 Int)(?mpy28 Int)(?vpy31 Int)) (! (or (overlaps (region ?p1py11 1) (region ?p2py11 4)) (= (ld_u4 (st_i1 ?mpy28 ?p1py11 ?vpy31) ?p2py11) (ld_u4 ?mpy28 ?p2py11))) :pattern ((ld_u4 (st_i1 ?mpy28 ?p1py11 ?vpy31) ?p2py11)) )) :named A1_106))
(assert (! (forall ((?p1py12 Int)(?p2py12 Int)(?mpy29 Int)(?vpy32 Int)) (! (or (overlaps (region ?p1py12 1) (region ?p2py12 4)) (= (ld_u4 (st_u1 ?mpy29 ?p1py12 ?vpy32) ?p2py12) (ld_u4 ?mpy29 ?p2py12))) :pattern ((ld_u4 (st_u1 ?mpy29 ?p1py12 ?vpy32) ?p2py12)) )) :named A1_107))
(assert (! (forall ((?p1py13 Int)(?p2py13 Int)(?mpy30 Int)(?vpy33 Int)) (! (or (overlaps (region ?p1py13 1) (region ?p2py13 8)) (= (ld_i8 (st_i1 ?mpy30 ?p1py13 ?vpy33) ?p2py13) (ld_i8 ?mpy30 ?p2py13))) :pattern ((ld_i8 (st_i1 ?mpy30 ?p1py13 ?vpy33) ?p2py13)) )) :named A1_108))
(assert (! (forall ((?p1py14 Int)(?p2py14 Int)(?mpy31 Int)(?vpy34 Int)) (! (or (overlaps (region ?p1py14 1) (region ?p2py14 8)) (= (ld_i8 (st_u1 ?mpy31 ?p1py14 ?vpy34) ?p2py14) (ld_i8 ?mpy31 ?p2py14))) :pattern ((ld_i8 (st_u1 ?mpy31 ?p1py14 ?vpy34) ?p2py14)) )) :named A1_109))
(assert (! (forall ((?p1py15 Int)(?p2py15 Int)(?mpy32 Int)(?vpy35 Int)) (! (or (overlaps (region ?p1py15 1) (region ?p2py15 8)) (= (ld_u8 (st_i1 ?mpy32 ?p1py15 ?vpy35) ?p2py15) (ld_u8 ?mpy32 ?p2py15))) :pattern ((ld_u8 (st_i1 ?mpy32 ?p1py15 ?vpy35) ?p2py15)) )) :named A1_110))
(assert (! (forall ((?p1py16 Int)(?p2py16 Int)(?mpy33 Int)(?vpy36 Int)) (! (or (overlaps (region ?p1py16 1) (region ?p2py16 8)) (= (ld_u8 (st_u1 ?mpy33 ?p1py16 ?vpy36) ?p2py16) (ld_u8 ?mpy33 ?p2py16))) :pattern ((ld_u8 (st_u1 ?mpy33 ?p1py16 ?vpy36) ?p2py16)) )) :named A1_111))
(assert (! (forall ((?p1py17 Int)(?p2py17 Int)(?mpy34 Int)(?vpy37 Int)) (! (or (overlaps (region ?p1py17 2) (region ?p2py17 1)) (= (ld_i1 (st_i2 ?mpy34 ?p1py17 ?vpy37) ?p2py17) (ld_i1 ?mpy34 ?p2py17))) :pattern ((ld_i1 (st_i2 ?mpy34 ?p1py17 ?vpy37) ?p2py17)) )) :named A1_112))
(assert (! (forall ((?p1py18 Int)(?p2py18 Int)(?mpy35 Int)(?vpy38 Int)) (! (or (overlaps (region ?p1py18 2) (region ?p2py18 1)) (= (ld_i1 (st_u2 ?mpy35 ?p1py18 ?vpy38) ?p2py18) (ld_i1 ?mpy35 ?p2py18))) :pattern ((ld_i1 (st_u2 ?mpy35 ?p1py18 ?vpy38) ?p2py18)) )) :named A1_113))
(assert (! (forall ((?p1py19 Int)(?p2py19 Int)(?mpy36 Int)(?vpy39 Int)) (! (or (overlaps (region ?p1py19 2) (region ?p2py19 1)) (= (ld_u1 (st_i2 ?mpy36 ?p1py19 ?vpy39) ?p2py19) (ld_u1 ?mpy36 ?p2py19))) :pattern ((ld_u1 (st_i2 ?mpy36 ?p1py19 ?vpy39) ?p2py19)) )) :named A1_114))
(assert (! (forall ((?p1py20 Int)(?p2py20 Int)(?mpy37 Int)(?vpy40 Int)) (! (or (overlaps (region ?p1py20 2) (region ?p2py20 1)) (= (ld_u1 (st_u2 ?mpy37 ?p1py20 ?vpy40) ?p2py20) (ld_u1 ?mpy37 ?p2py20))) :pattern ((ld_u1 (st_u2 ?mpy37 ?p1py20 ?vpy40) ?p2py20)) )) :named A1_115))
(assert (! (forall ((?p1py21 Int)(?p2py21 Int)(?mpy38 Int)(?vpy41 Int)) (! (or (overlaps (region ?p1py21 2) (region ?p2py21 2)) (= (ld_i2 (st_i2 ?mpy38 ?p1py21 ?vpy41) ?p2py21) (ld_i2 ?mpy38 ?p2py21))) :pattern ((ld_i2 (st_i2 ?mpy38 ?p1py21 ?vpy41) ?p2py21)) )) :named A1_116))
(assert (! (forall ((?p1py22 Int)(?p2py22 Int)(?mpy39 Int)(?vpy42 Int)) (! (or (overlaps (region ?p1py22 2) (region ?p2py22 2)) (= (ld_i2 (st_u2 ?mpy39 ?p1py22 ?vpy42) ?p2py22) (ld_i2 ?mpy39 ?p2py22))) :pattern ((ld_i2 (st_u2 ?mpy39 ?p1py22 ?vpy42) ?p2py22)) )) :named A1_117))
(assert (! (forall ((?p1py23 Int)(?p2py23 Int)(?mpy40 Int)(?vpy43 Int)) (! (or (overlaps (region ?p1py23 2) (region ?p2py23 2)) (= (ld_u2 (st_i2 ?mpy40 ?p1py23 ?vpy43) ?p2py23) (ld_u2 ?mpy40 ?p2py23))) :pattern ((ld_u2 (st_i2 ?mpy40 ?p1py23 ?vpy43) ?p2py23)) )) :named A1_118))
(assert (! (forall ((?p1py24 Int)(?p2py24 Int)(?mpy41 Int)(?vpy44 Int)) (! (or (overlaps (region ?p1py24 2) (region ?p2py24 2)) (= (ld_u2 (st_u2 ?mpy41 ?p1py24 ?vpy44) ?p2py24) (ld_u2 ?mpy41 ?p2py24))) :pattern ((ld_u2 (st_u2 ?mpy41 ?p1py24 ?vpy44) ?p2py24)) )) :named A1_119))
(assert (! (forall ((?p1py25 Int)(?p2py25 Int)(?mpy42 Int)(?vpy45 Int)) (! (or (overlaps (region ?p1py25 2) (region ?p2py25 4)) (= (ld_i4 (st_i2 ?mpy42 ?p1py25 ?vpy45) ?p2py25) (ld_i4 ?mpy42 ?p2py25))) :pattern ((ld_i4 (st_i2 ?mpy42 ?p1py25 ?vpy45) ?p2py25)) )) :named A1_120))
(assert (! (forall ((?p1py26 Int)(?p2py26 Int)(?mpy43 Int)(?vpy46 Int)) (! (or (overlaps (region ?p1py26 2) (region ?p2py26 4)) (= (ld_i4 (st_u2 ?mpy43 ?p1py26 ?vpy46) ?p2py26) (ld_i4 ?mpy43 ?p2py26))) :pattern ((ld_i4 (st_u2 ?mpy43 ?p1py26 ?vpy46) ?p2py26)) )) :named A1_121))
(assert (! (forall ((?p1py27 Int)(?p2py27 Int)(?mpy44 Int)(?vpy47 Int)) (! (or (overlaps (region ?p1py27 2) (region ?p2py27 4)) (= (ld_u4 (st_i2 ?mpy44 ?p1py27 ?vpy47) ?p2py27) (ld_u4 ?mpy44 ?p2py27))) :pattern ((ld_u4 (st_i2 ?mpy44 ?p1py27 ?vpy47) ?p2py27)) )) :named A1_122))
(assert (! (forall ((?p1py28 Int)(?p2py28 Int)(?mpy45 Int)(?vpy48 Int)) (! (or (overlaps (region ?p1py28 2) (region ?p2py28 4)) (= (ld_u4 (st_u2 ?mpy45 ?p1py28 ?vpy48) ?p2py28) (ld_u4 ?mpy45 ?p2py28))) :pattern ((ld_u4 (st_u2 ?mpy45 ?p1py28 ?vpy48) ?p2py28)) )) :named A1_123))
(assert (! (forall ((?p1py29 Int)(?p2py29 Int)(?mpy46 Int)(?vpy49 Int)) (! (or (overlaps (region ?p1py29 2) (region ?p2py29 8)) (= (ld_i8 (st_i2 ?mpy46 ?p1py29 ?vpy49) ?p2py29) (ld_i8 ?mpy46 ?p2py29))) :pattern ((ld_i8 (st_i2 ?mpy46 ?p1py29 ?vpy49) ?p2py29)) )) :named A1_124))
(assert (! (forall ((?p1py30 Int)(?p2py30 Int)(?mpy47 Int)(?vpy50 Int)) (! (or (overlaps (region ?p1py30 2) (region ?p2py30 8)) (= (ld_i8 (st_u2 ?mpy47 ?p1py30 ?vpy50) ?p2py30) (ld_i8 ?mpy47 ?p2py30))) :pattern ((ld_i8 (st_u2 ?mpy47 ?p1py30 ?vpy50) ?p2py30)) )) :named A1_125))
(assert (! (forall ((?p1py31 Int)(?p2py31 Int)(?mpy48 Int)(?vpy51 Int)) (! (or (overlaps (region ?p1py31 2) (region ?p2py31 8)) (= (ld_u8 (st_i2 ?mpy48 ?p1py31 ?vpy51) ?p2py31) (ld_u8 ?mpy48 ?p2py31))) :pattern ((ld_u8 (st_i2 ?mpy48 ?p1py31 ?vpy51) ?p2py31)) )) :named A1_126))
(assert (! (forall ((?p1py32 Int)(?p2py32 Int)(?mpy49 Int)(?vpy52 Int)) (! (or (overlaps (region ?p1py32 2) (region ?p2py32 8)) (= (ld_u8 (st_u2 ?mpy49 ?p1py32 ?vpy52) ?p2py32) (ld_u8 ?mpy49 ?p2py32))) :pattern ((ld_u8 (st_u2 ?mpy49 ?p1py32 ?vpy52) ?p2py32)) )) :named A1_127))
(assert (! (forall ((?p1py33 Int)(?p2py33 Int)(?mpy50 Int)(?vpy53 Int)) (! (or (overlaps (region ?p1py33 4) (region ?p2py33 1)) (= (ld_i1 (st_i4 ?mpy50 ?p1py33 ?vpy53) ?p2py33) (ld_i1 ?mpy50 ?p2py33))) :pattern ((ld_i1 (st_i4 ?mpy50 ?p1py33 ?vpy53) ?p2py33)) )) :named A1_128))
(assert (! (forall ((?p1py34 Int)(?p2py34 Int)(?mpy51 Int)(?vpy54 Int)) (! (or (overlaps (region ?p1py34 4) (region ?p2py34 1)) (= (ld_i1 (st_u4 ?mpy51 ?p1py34 ?vpy54) ?p2py34) (ld_i1 ?mpy51 ?p2py34))) :pattern ((ld_i1 (st_u4 ?mpy51 ?p1py34 ?vpy54) ?p2py34)) )) :named A1_129))
(assert (! (forall ((?p1py35 Int)(?p2py35 Int)(?mpy52 Int)(?vpy55 Int)) (! (or (overlaps (region ?p1py35 4) (region ?p2py35 1)) (= (ld_u1 (st_i4 ?mpy52 ?p1py35 ?vpy55) ?p2py35) (ld_u1 ?mpy52 ?p2py35))) :pattern ((ld_u1 (st_i4 ?mpy52 ?p1py35 ?vpy55) ?p2py35)) )) :named A1_130))
(assert (! (forall ((?p1py36 Int)(?p2py36 Int)(?mpy53 Int)(?vpy56 Int)) (! (or (overlaps (region ?p1py36 4) (region ?p2py36 1)) (= (ld_u1 (st_u4 ?mpy53 ?p1py36 ?vpy56) ?p2py36) (ld_u1 ?mpy53 ?p2py36))) :pattern ((ld_u1 (st_u4 ?mpy53 ?p1py36 ?vpy56) ?p2py36)) )) :named A1_131))
(assert (! (forall ((?p1py37 Int)(?p2py37 Int)(?mpy54 Int)(?vpy57 Int)) (! (or (overlaps (region ?p1py37 4) (region ?p2py37 2)) (= (ld_i2 (st_i4 ?mpy54 ?p1py37 ?vpy57) ?p2py37) (ld_i2 ?mpy54 ?p2py37))) :pattern ((ld_i2 (st_i4 ?mpy54 ?p1py37 ?vpy57) ?p2py37)) )) :named A1_132))
(assert (! (forall ((?p1py38 Int)(?p2py38 Int)(?mpy55 Int)(?vpy58 Int)) (! (or (overlaps (region ?p1py38 4) (region ?p2py38 2)) (= (ld_i2 (st_u4 ?mpy55 ?p1py38 ?vpy58) ?p2py38) (ld_i2 ?mpy55 ?p2py38))) :pattern ((ld_i2 (st_u4 ?mpy55 ?p1py38 ?vpy58) ?p2py38)) )) :named A1_133))
(assert (! (forall ((?p1py39 Int)(?p2py39 Int)(?mpy56 Int)(?vpy59 Int)) (! (or (overlaps (region ?p1py39 4) (region ?p2py39 2)) (= (ld_u2 (st_i4 ?mpy56 ?p1py39 ?vpy59) ?p2py39) (ld_u2 ?mpy56 ?p2py39))) :pattern ((ld_u2 (st_i4 ?mpy56 ?p1py39 ?vpy59) ?p2py39)) )) :named A1_134))
(assert (! (forall ((?p1py40 Int)(?p2py40 Int)(?mpy57 Int)(?vpy60 Int)) (! (or (overlaps (region ?p1py40 4) (region ?p2py40 2)) (= (ld_u2 (st_u4 ?mpy57 ?p1py40 ?vpy60) ?p2py40) (ld_u2 ?mpy57 ?p2py40))) :pattern ((ld_u2 (st_u4 ?mpy57 ?p1py40 ?vpy60) ?p2py40)) )) :named A1_135))
(assert (! (forall ((?p1py41 Int)(?p2py41 Int)(?mpy58 Int)(?vpy61 Int)) (! (or (overlaps (region ?p1py41 4) (region ?p2py41 4)) (= (ld_i4 (st_i4 ?mpy58 ?p1py41 ?vpy61) ?p2py41) (ld_i4 ?mpy58 ?p2py41))) :pattern ((ld_i4 (st_i4 ?mpy58 ?p1py41 ?vpy61) ?p2py41)) )) :named A1_136))
(assert (! (forall ((?p1py42 Int)(?p2py42 Int)(?mpy59 Int)(?vpy62 Int)) (! (or (overlaps (region ?p1py42 4) (region ?p2py42 4)) (= (ld_i4 (st_u4 ?mpy59 ?p1py42 ?vpy62) ?p2py42) (ld_i4 ?mpy59 ?p2py42))) :pattern ((ld_i4 (st_u4 ?mpy59 ?p1py42 ?vpy62) ?p2py42)) )) :named A1_137))
(assert (! (forall ((?p1py43 Int)(?p2py43 Int)(?mpy60 Int)(?vpy63 Int)) (! (or (overlaps (region ?p1py43 4) (region ?p2py43 4)) (= (ld_u4 (st_i4 ?mpy60 ?p1py43 ?vpy63) ?p2py43) (ld_u4 ?mpy60 ?p2py43))) :pattern ((ld_u4 (st_i4 ?mpy60 ?p1py43 ?vpy63) ?p2py43)) )) :named A1_138))
(assert (! (forall ((?p1py44 Int)(?p2py44 Int)(?mpy61 Int)(?vpy64 Int)) (! (or (overlaps (region ?p1py44 4) (region ?p2py44 4)) (= (ld_u4 (st_u4 ?mpy61 ?p1py44 ?vpy64) ?p2py44) (ld_u4 ?mpy61 ?p2py44))) :pattern ((ld_u4 (st_u4 ?mpy61 ?p1py44 ?vpy64) ?p2py44)) )) :named A1_139))
(assert (! (forall ((?p1py45 Int)(?p2py45 Int)(?mpy62 Int)(?vpy65 Int)) (! (or (overlaps (region ?p1py45 4) (region ?p2py45 8)) (= (ld_i8 (st_i4 ?mpy62 ?p1py45 ?vpy65) ?p2py45) (ld_i8 ?mpy62 ?p2py45))) :pattern ((ld_i8 (st_i4 ?mpy62 ?p1py45 ?vpy65) ?p2py45)) )) :named A1_140))
(assert (! (forall ((?p1py46 Int)(?p2py46 Int)(?mpy63 Int)(?vpy66 Int)) (! (or (overlaps (region ?p1py46 4) (region ?p2py46 8)) (= (ld_i8 (st_u4 ?mpy63 ?p1py46 ?vpy66) ?p2py46) (ld_i8 ?mpy63 ?p2py46))) :pattern ((ld_i8 (st_u4 ?mpy63 ?p1py46 ?vpy66) ?p2py46)) )) :named A1_141))
(assert (! (forall ((?p1py47 Int)(?p2py47 Int)(?mpy64 Int)(?vpy67 Int)) (! (or (overlaps (region ?p1py47 4) (region ?p2py47 8)) (= (ld_u8 (st_i4 ?mpy64 ?p1py47 ?vpy67) ?p2py47) (ld_u8 ?mpy64 ?p2py47))) :pattern ((ld_u8 (st_i4 ?mpy64 ?p1py47 ?vpy67) ?p2py47)) )) :named A1_142))
(assert (! (forall ((?p1py48 Int)(?p2py48 Int)(?mpy65 Int)(?vpy68 Int)) (! (or (overlaps (region ?p1py48 4) (region ?p2py48 8)) (= (ld_u8 (st_u4 ?mpy65 ?p1py48 ?vpy68) ?p2py48) (ld_u8 ?mpy65 ?p2py48))) :pattern ((ld_u8 (st_u4 ?mpy65 ?p1py48 ?vpy68) ?p2py48)) )) :named A1_143))
(assert (! (forall ((?p1py49 Int)(?p2py49 Int)(?mpy66 Int)(?vpy69 Int)) (! (or (overlaps (region ?p1py49 8) (region ?p2py49 1)) (= (ld_i1 (st_i8 ?mpy66 ?p1py49 ?vpy69) ?p2py49) (ld_i1 ?mpy66 ?p2py49))) :pattern ((ld_i1 (st_i8 ?mpy66 ?p1py49 ?vpy69) ?p2py49)) )) :named A1_144))
(assert (! (forall ((?p1py50 Int)(?p2py50 Int)(?mpy67 Int)(?vpy70 Int)) (! (or (overlaps (region ?p1py50 8) (region ?p2py50 1)) (= (ld_i1 (st_u8 ?mpy67 ?p1py50 ?vpy70) ?p2py50) (ld_i1 ?mpy67 ?p2py50))) :pattern ((ld_i1 (st_u8 ?mpy67 ?p1py50 ?vpy70) ?p2py50)) )) :named A1_145))
(assert (! (forall ((?p1py51 Int)(?p2py51 Int)(?mpy68 Int)(?vpy71 Int)) (! (or (overlaps (region ?p1py51 8) (region ?p2py51 1)) (= (ld_u1 (st_i8 ?mpy68 ?p1py51 ?vpy71) ?p2py51) (ld_u1 ?mpy68 ?p2py51))) :pattern ((ld_u1 (st_i8 ?mpy68 ?p1py51 ?vpy71) ?p2py51)) )) :named A1_146))
(assert (! (forall ((?p1py52 Int)(?p2py52 Int)(?mpy69 Int)(?vpy72 Int)) (! (or (overlaps (region ?p1py52 8) (region ?p2py52 1)) (= (ld_u1 (st_u8 ?mpy69 ?p1py52 ?vpy72) ?p2py52) (ld_u1 ?mpy69 ?p2py52))) :pattern ((ld_u1 (st_u8 ?mpy69 ?p1py52 ?vpy72) ?p2py52)) )) :named A1_147))
(assert (! (forall ((?p1py53 Int)(?p2py53 Int)(?mpy70 Int)(?vpy73 Int)) (! (or (overlaps (region ?p1py53 8) (region ?p2py53 2)) (= (ld_i2 (st_i8 ?mpy70 ?p1py53 ?vpy73) ?p2py53) (ld_i2 ?mpy70 ?p2py53))) :pattern ((ld_i2 (st_i8 ?mpy70 ?p1py53 ?vpy73) ?p2py53)) )) :named A1_148))
(assert (! (forall ((?p1py54 Int)(?p2py54 Int)(?mpy71 Int)(?vpy74 Int)) (! (or (overlaps (region ?p1py54 8) (region ?p2py54 2)) (= (ld_i2 (st_u8 ?mpy71 ?p1py54 ?vpy74) ?p2py54) (ld_i2 ?mpy71 ?p2py54))) :pattern ((ld_i2 (st_u8 ?mpy71 ?p1py54 ?vpy74) ?p2py54)) )) :named A1_149))
(assert (! (forall ((?p1py55 Int)(?p2py55 Int)(?mpy72 Int)(?vpy75 Int)) (! (or (overlaps (region ?p1py55 8) (region ?p2py55 2)) (= (ld_u2 (st_i8 ?mpy72 ?p1py55 ?vpy75) ?p2py55) (ld_u2 ?mpy72 ?p2py55))) :pattern ((ld_u2 (st_i8 ?mpy72 ?p1py55 ?vpy75) ?p2py55)) )) :named A1_150))
(assert (! (forall ((?p1py56 Int)(?p2py56 Int)(?mpy73 Int)(?vpy76 Int)) (! (or (overlaps (region ?p1py56 8) (region ?p2py56 2)) (= (ld_u2 (st_u8 ?mpy73 ?p1py56 ?vpy76) ?p2py56) (ld_u2 ?mpy73 ?p2py56))) :pattern ((ld_u2 (st_u8 ?mpy73 ?p1py56 ?vpy76) ?p2py56)) )) :named A1_151))
(assert (! (forall ((?p1py57 Int)(?p2py57 Int)(?mpy74 Int)(?vpy77 Int)) (! (or (overlaps (region ?p1py57 8) (region ?p2py57 4)) (= (ld_i4 (st_i8 ?mpy74 ?p1py57 ?vpy77) ?p2py57) (ld_i4 ?mpy74 ?p2py57))) :pattern ((ld_i4 (st_i8 ?mpy74 ?p1py57 ?vpy77) ?p2py57)) )) :named A1_152))
(assert (! (forall ((?p1py58 Int)(?p2py58 Int)(?mpy75 Int)(?vpy78 Int)) (! (or (overlaps (region ?p1py58 8) (region ?p2py58 4)) (= (ld_i4 (st_u8 ?mpy75 ?p1py58 ?vpy78) ?p2py58) (ld_i4 ?mpy75 ?p2py58))) :pattern ((ld_i4 (st_u8 ?mpy75 ?p1py58 ?vpy78) ?p2py58)) )) :named A1_153))
(assert (! (forall ((?p1py59 Int)(?p2py59 Int)(?mpy76 Int)(?vpy79 Int)) (! (or (overlaps (region ?p1py59 8) (region ?p2py59 4)) (= (ld_u4 (st_i8 ?mpy76 ?p1py59 ?vpy79) ?p2py59) (ld_u4 ?mpy76 ?p2py59))) :pattern ((ld_u4 (st_i8 ?mpy76 ?p1py59 ?vpy79) ?p2py59)) )) :named A1_154))
(assert (! (forall ((?p1py60 Int)(?p2py60 Int)(?mpy77 Int)(?vpy80 Int)) (! (or (overlaps (region ?p1py60 8) (region ?p2py60 4)) (= (ld_u4 (st_u8 ?mpy77 ?p1py60 ?vpy80) ?p2py60) (ld_u4 ?mpy77 ?p2py60))) :pattern ((ld_u4 (st_u8 ?mpy77 ?p1py60 ?vpy80) ?p2py60)) )) :named A1_155))
(assert (! (forall ((?p1py61 Int)(?p2py61 Int)(?mpy78 Int)(?vpy81 Int)) (! (or (overlaps (region ?p1py61 8) (region ?p2py61 8)) (= (ld_i8 (st_i8 ?mpy78 ?p1py61 ?vpy81) ?p2py61) (ld_i8 ?mpy78 ?p2py61))) :pattern ((ld_i8 (st_i8 ?mpy78 ?p1py61 ?vpy81) ?p2py61)) )) :named A1_156))
(assert (! (forall ((?p1py62 Int)(?p2py62 Int)(?mpy79 Int)(?vpy82 Int)) (! (or (overlaps (region ?p1py62 8) (region ?p2py62 8)) (= (ld_i8 (st_u8 ?mpy79 ?p1py62 ?vpy82) ?p2py62) (ld_i8 ?mpy79 ?p2py62))) :pattern ((ld_i8 (st_u8 ?mpy79 ?p1py62 ?vpy82) ?p2py62)) )) :named A1_157))
(assert (! (forall ((?p1py63 Int)(?p2py63 Int)(?mpy80 Int)(?vpy83 Int)) (! (or (overlaps (region ?p1py63 8) (region ?p2py63 8)) (= (ld_u8 (st_i8 ?mpy80 ?p1py63 ?vpy83) ?p2py63) (ld_u8 ?mpy80 ?p2py63))) :pattern ((ld_u8 (st_i8 ?mpy80 ?p1py63 ?vpy83) ?p2py63)) )) :named A1_158))
(assert (! (forall ((?p1py64 Int)(?p2py64 Int)(?mpy81 Int)(?vpy84 Int)) (! (or (overlaps (region ?p1py64 8) (region ?p2py64 8)) (= (ld_u8 (st_u8 ?mpy81 ?p1py64 ?vpy84) ?p2py64) (ld_u8 ?mpy81 ?p2py64))) :pattern ((ld_u8 (st_u8 ?mpy81 ?p1py64 ?vpy84) ?p2py64)) )) :named A1_159))
(assert (! (forall ((?ptr1py0 Int)(?len1py2 Int)(?ptr2py0 Int)(?len2py2 Int)) (! (or (not (overlaps (region ?ptr1py0 ?len1py2) (region ?ptr2py0 ?len2py2))) (and (= (base ?ptr1py0) (base ?ptr2py0)) (or (and (<= 0 ?len2py2) (<= (offset ?ptr2py0) (offset ?ptr1py0)) (not (<= (+ (offset ?ptr2py0) ?len2py2) (offset ?ptr1py0)))) (and (<= 0 ?len1py2) (<= (offset ?ptr1py0) (offset ?ptr2py0)) (not (<= (+ (offset ?ptr1py0) ?len1py2) (offset ?ptr2py0))))))) :pattern ((overlaps (region ?ptr1py0 ?len1py2) (region ?ptr2py0 ?len2py2))) )) :named A1_160))
(assert (! (forall ((?rpy3 Int)(?npy5 Int)(?oldgmem_1py0 Int)(?newgmem_1py0 Int)(?oldmem_1py0 Int)(?newmem_1py0 Int)) (! (and (or (not (= ?oldmem_1py0 ?newmem_1py0)) (only_single_ghost_changed ?rpy3 ?npy5 ?oldgmem_1py0 ?newgmem_1py0 ?oldmem_1py0 ?newmem_1py0) (and (or (not (overlaps (region (?p!9 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3) 1) ?rpy3)) (not (= (?n2!8 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3) ?npy5))) (not (= (select2 ?oldgmem_1py0 (ptr2gid (?p!9 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3)) (?n2!8 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3)) (select2 ?newgmem_1py0 (ptr2gid (?p!9 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3)) (?n2!8 ?newgmem_1py0 ?oldgmem_1py0 ?npy5 ?rpy3)))))) (or (and (forall ((?ppy50 Int)(?n2py0 Int)) (! (or (= (select2 ?oldgmem_1py0 (ptr2gid ?ppy50) ?n2py0) (select2 ?newgmem_1py0 (ptr2gid ?ppy50) ?n2py0)) (and (overlaps (region ?ppy50 1) ?rpy3) (= ?n2py0 ?npy5))) :pattern ((select2 ?newgmem_1py0 (ptr2gid ?ppy50) ?n2py0)) )) (= ?oldmem_1py0 ?newmem_1py0)) (not (only_single_ghost_changed ?rpy3 ?npy5 ?oldgmem_1py0 ?newgmem_1py0 ?oldmem_1py0 ?newmem_1py0)))) :pattern ((only_single_ghost_changed ?rpy3 ?npy5 ?oldgmem_1py0 ?newgmem_1py0 ?oldmem_1py0 ?newmem_1py0)) )) :named A1_161))
(assert (! (forall ((?rpy4 Int)(?opy10 Int)) (! (and (or (not (= (select1 (set_singleton ?rpy4) ?opy10) 1)) (= ?rpy4 ?opy10)) (or (not (= ?rpy4 ?opy10)) (= (select1 (set_singleton ?rpy4) ?opy10) 1))) :pattern ((select1 (set_singleton ?rpy4) ?opy10)) )) :named A1_162))
(assert (! (forall ((?rpy5 Int)(?oldgmem_1py1 Int)(?newgmem_1py1 Int)(?oldmem_1py1 Int)(?newmem_1py1 Int)) (! (or (not (only_region_changed_or_new ?rpy5 ?oldgmem_1py1 ?newgmem_1py1 ?oldmem_1py1 ?newmem_1py1)) (and (forall ((?ppy51 Int)(?npy6 Int)) (! (or (= ?npy6 size) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy51) 0)) size) 0) (overlaps (region ?ppy51 1) ?rpy5) (= (select2 ?oldgmem_1py1 (ptr2gid ?ppy51) ?npy6) (select2 ?newgmem_1py1 (ptr2gid ?ppy51) ?npy6))) :pattern ((select2 ?newgmem_1py1 (ptr2gid ?ppy51) ?npy6)) )) (forall ((?ppy52 Int)) (! (or (= (ld_i1 ?oldmem_1py1 ?ppy52) (ld_i1 ?newmem_1py1 ?ppy52)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy52) 0)) size) 0) (overlaps (region ?ppy52 1) ?rpy5)) :pattern ((ld_i1 ?newmem_1py1 ?ppy52)) )) (forall ((?ppy53 Int)) (! (or (= (ld_u1 ?oldmem_1py1 ?ppy53) (ld_u1 ?newmem_1py1 ?ppy53)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy53) 0)) size) 0) (overlaps (region ?ppy53 1) ?rpy5)) :pattern ((ld_u1 ?newmem_1py1 ?ppy53)) )) (forall ((?ppy54 Int)) (! (or (= (ld_i2 ?oldmem_1py1 ?ppy54) (ld_i2 ?newmem_1py1 ?ppy54)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy54) 0)) size) 0) (overlaps (region ?ppy54 2) ?rpy5)) :pattern ((ld_i2 ?newmem_1py1 ?ppy54)) )) (forall ((?ppy55 Int)) (! (or (= (ld_u2 ?oldmem_1py1 ?ppy55) (ld_u2 ?newmem_1py1 ?ppy55)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy55) 0)) size) 0) (overlaps (region ?ppy55 2) ?rpy5)) :pattern ((ld_u2 ?newmem_1py1 ?ppy55)) )) (forall ((?ppy56 Int)) (! (or (= (ld_i4 ?oldmem_1py1 ?ppy56) (ld_i4 ?newmem_1py1 ?ppy56)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy56) 0)) size) 0) (overlaps (region ?ppy56 4) ?rpy5)) :pattern ((ld_i4 ?newmem_1py1 ?ppy56)) )) (forall ((?ppy57 Int)) (! (or (= (ld_u4 ?oldmem_1py1 ?ppy57) (ld_u4 ?newmem_1py1 ?ppy57)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy57) 0)) size) 0) (overlaps (region ?ppy57 4) ?rpy5)) :pattern ((ld_u4 ?newmem_1py1 ?ppy57)) )) (forall ((?ppy58 Int)) (! (or (= (ld_i8 ?oldmem_1py1 ?ppy58) (ld_i8 ?newmem_1py1 ?ppy58)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy58) 0)) size) 0) (overlaps (region ?ppy58 8) ?rpy5)) :pattern ((ld_i8 ?newmem_1py1 ?ppy58)) )) (forall ((?ppy59 Int)) (! (or (= (ld_u8 ?oldmem_1py1 ?ppy59) (ld_u8 ?newmem_1py1 ?ppy59)) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy59) 0)) size) 0) (overlaps (region ?ppy59 8) ?rpy5)) :pattern ((ld_u8 ?newmem_1py1 ?ppy59)) )) (forall ((?ppy60 Int)) (! (or (= (conv_u8_to_ptr (ld_u8 ?oldmem_1py1 ?ppy60)) (conv_u8_to_ptr (ld_u8 ?newmem_1py1 ?ppy60))) (= (select2 ?oldgmem_1py1 (ptr2gid (ptr (base ?ppy60) 0)) size) 0) (overlaps (region ?ppy60 8) ?rpy5)) :pattern ((conv_u8_to_ptr (ld_u8 ?newmem_1py1 ?ppy60))) )))) :pattern ((only_region_changed_or_new ?rpy5 ?oldgmem_1py1 ?newgmem_1py1 ?oldmem_1py1 ?newmem_1py1)) )) :named A1_163))
(assert (! (forall ((?rpy6 Int)(?oldgmem_1py2 Int)(?newgmem_1py2 Int)(?oldmem_1py2 Int)(?newmem_1py2 Int)) (! (or (not (only_region_changed_or_new ?rpy6 ?oldgmem_1py2 ?newgmem_1py2 ?oldmem_1py2 ?newmem_1py2)) (next_mem ?oldmem_1py2 ?newmem_1py2)) :pattern ((only_region_changed_or_new ?rpy6 ?oldgmem_1py2 ?newgmem_1py2 ?oldmem_1py2 ?newmem_1py2)) )) :named A1_164))
(assert (! (forall ((?rpy7 Int)(?oldgmem_1py3 Int)(?newgmem_1py3 Int)(?oldmem_1py3 Int)(?newmem_1py3 Int)) (! (or (not (only_region_changed_or_new ?rpy7 ?oldgmem_1py3 ?newgmem_1py3 ?oldmem_1py3 ?newmem_1py3)) (not (alloc_grows ?oldgmem_1py3 ?newgmem_1py3)) (only_region_changed_or_new_nontrans ?rpy7 ?oldgmem_1py3 ?newgmem_1py3 ?oldmem_1py3 ?newmem_1py3)) :pattern ((only_region_changed_or_new ?rpy7 ?oldgmem_1py3 ?newgmem_1py3 ?oldmem_1py3 ?newmem_1py3)) )) :named A1_165))
(assert (! (forall ((?rpy8 Int)(?oldgmem_1py4 Int)(?newgmem_1py4 Int)(?oldmem_1py4 Int)(?newmem_1py4 Int)) (! (or (not (only_region_changed_or_new_nontrans ?rpy8 ?oldgmem_1py4 ?newgmem_1py4 ?oldmem_1py4 ?newmem_1py4)) (only_region_changed_or_new_trans ?rpy8 ?oldgmem_1py4 ?newgmem_1py4 ?oldmem_1py4 ?newmem_1py4)) :pattern ((only_region_changed_or_new_nontrans ?rpy8 ?oldgmem_1py4 ?newgmem_1py4 ?oldmem_1py4 ?newmem_1py4)) )) :named A1_166))
(assert (! (forall ((?rpy9 Int)(?oldgmem_1py5 Int)(?newgmem_1py5 Int)(?oldmem_1py5 Int)(?newmem_1py5 Int)) (! (or (only_region_changed_or_new ?rpy9 ?oldgmem_1py5 ?newgmem_1py5 ?oldmem_1py5 ?newmem_1py5) (and (not (= (?n!3 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9) size)) (not (= (select2 ?oldgmem_1py5 (ptr2gid (ptr (base (?p!4 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9)) 0)) size) 0)) (not (contains (region (?p!4 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9) 1) ?rpy9)) (not (= (select2 ?oldgmem_1py5 (ptr2gid (?p!4 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9)) (?n!3 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9)) (select2 ?newgmem_1py5 (ptr2gid (?p!4 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9)) (?n!3 ?newgmem_1py5 ?oldgmem_1py5 ?rpy9))))) (and (not (= (select2 ?oldgmem_1py5 (ptr2gid (ptr (base (?p!5 ?newmem_1py5 ?oldmem_1py5 ?oldgmem_1py5 ?rpy9)) 0)) size) 0)) (not (contains (region (?p!5 ?newmem_1py5 ?oldmem_1py5 ?oldgmem_1py5 ?rpy9) 1) ?rpy9)) (not (= (ld_u1 ?oldmem_1py5 (?p!5 ?newmem_1py5 ?oldmem_1py5 ?oldgmem_1py5 ?rpy9)) (ld_u1 ?newmem_1py5 (?p!5 ?newmem_1py5 ?oldmem_1py5 ?oldgmem_1py5 ?rpy9)))))) :pattern ((only_region_changed_or_new ?rpy9 ?oldgmem_1py5 ?newgmem_1py5 ?oldmem_1py5 ?newmem_1py5)) )) :named A1_167))
(assert (! (forall ((?rpy10 Int)(?oldmem_1py6 Int)(?newmem_1py6 Int)) (! (or (and (not (contains (region (?p!6 ?newmem_1py6 ?oldmem_1py6 ?rpy10) 1) ?rpy10)) (not (= (ld_u1 ?oldmem_1py6 (?p!6 ?newmem_1py6 ?oldmem_1py6 ?rpy10)) (ld_u1 ?newmem_1py6 (?p!6 ?newmem_1py6 ?oldmem_1py6 ?rpy10))))) (only_region_changed ?rpy10 ?oldmem_1py6 ?newmem_1py6)) :pattern ((only_region_changed ?rpy10 ?oldmem_1py6 ?newmem_1py6)) )) :named A1_168))
(assert (! (forall ((?rpy11 Int)(?oldmem_1py7 Int)(?newmem_1py7 Int)) (! (or (not (only_region_changed ?rpy11 ?oldmem_1py7 ?newmem_1py7)) (and (forall ((?ppy61 Int)) (! (or (overlaps (region ?ppy61 1) ?rpy11) (= (ld_i1 ?oldmem_1py7 ?ppy61) (ld_i1 ?newmem_1py7 ?ppy61))) :pattern ((ld_i1 ?newmem_1py7 ?ppy61)) )) (forall ((?ppy62 Int)) (! (or (overlaps (region ?ppy62 1) ?rpy11) (= (ld_u1 ?oldmem_1py7 ?ppy62) (ld_u1 ?newmem_1py7 ?ppy62))) :pattern ((ld_u1 ?newmem_1py7 ?ppy62)) )) (forall ((?ppy63 Int)) (! (or (overlaps (region ?ppy63 2) ?rpy11) (= (ld_i2 ?oldmem_1py7 ?ppy63) (ld_i2 ?newmem_1py7 ?ppy63))) :pattern ((ld_i2 ?newmem_1py7 ?ppy63)) )) (forall ((?ppy64 Int)) (! (or (overlaps (region ?ppy64 2) ?rpy11) (= (ld_u2 ?oldmem_1py7 ?ppy64) (ld_u2 ?newmem_1py7 ?ppy64))) :pattern ((ld_u2 ?newmem_1py7 ?ppy64)) )) (forall ((?ppy65 Int)) (! (or (overlaps (region ?ppy65 4) ?rpy11) (= (ld_i4 ?oldmem_1py7 ?ppy65) (ld_i4 ?newmem_1py7 ?ppy65))) :pattern ((ld_i4 ?newmem_1py7 ?ppy65)) )) (forall ((?ppy66 Int)) (! (or (overlaps (region ?ppy66 4) ?rpy11) (= (ld_u4 ?oldmem_1py7 ?ppy66) (ld_u4 ?newmem_1py7 ?ppy66))) :pattern ((ld_u4 ?newmem_1py7 ?ppy66)) )) (forall ((?ppy67 Int)) (! (or (overlaps (region ?ppy67 8) ?rpy11) (= (ld_i8 ?oldmem_1py7 ?ppy67) (ld_i8 ?newmem_1py7 ?ppy67))) :pattern ((ld_i8 ?newmem_1py7 ?ppy67)) )) (forall ((?ppy68 Int)) (! (or (overlaps (region ?ppy68 8) ?rpy11) (= (ld_u8 ?oldmem_1py7 ?ppy68) (ld_u8 ?newmem_1py7 ?ppy68))) :pattern ((ld_u8 ?newmem_1py7 ?ppy68)) )) (forall ((?ppy69 Int)) (! (or (overlaps (region ?ppy69 8) ?rpy11) (= (conv_u8_to_ptr (ld_u8 ?oldmem_1py7 ?ppy69)) (conv_u8_to_ptr (ld_u8 ?newmem_1py7 ?ppy69)))) :pattern ((conv_u8_to_ptr (ld_u8 ?newmem_1py7 ?ppy69))) )))) :pattern ((only_region_changed ?rpy11 ?oldmem_1py7 ?newmem_1py7)) )) :named A1_169))
(assert (! (forall ((?rpy12 Int)(?oldmem_1py8 Int)(?newmem_1py8 Int)) (! (or (not (only_region_changed ?rpy12 ?oldmem_1py8 ?newmem_1py8)) (next_mem ?oldmem_1py8 ?newmem_1py8)) :pattern ((only_region_changed ?rpy12 ?oldmem_1py8 ?newmem_1py8)) )) :named A1_170))
(assert (! (forall ((?rpy13 Int)(?spy1 Int)) (! (and (or (not (contains (set_to_region ?spy1) ?rpy13)) (forall ((?ppy70 Int)) (! (or (not (= (select1 ?spy1 ?ppy70) 1)) (overlaps (region ?ppy70 1) ?rpy13)) :pattern ((select1 ?spy1 ?ppy70)) :pattern ((region ?ppy70 1)) ))) (or (contains (set_to_region ?spy1) ?rpy13) (and (= (select1 ?spy1 (?p!13 ?spy1 ?rpy13)) 1) (not (overlaps (region (?p!13 ?spy1 ?rpy13) 1) ?rpy13))))) :pattern ((contains (set_to_region ?spy1) ?rpy13)) )) :named A1_171))
(assert (! (forall ((?rpy14 Int)(?spy2 Int)) (! (and (or (not (overlaps (set_to_region ?spy2) ?rpy14)) (and (= (select1 ?spy2 (?p!14 ?spy2 ?rpy14)) 1) (overlaps (region (?p!14 ?spy2 ?rpy14) 1) ?rpy14))) (or (overlaps (set_to_region ?spy2) ?rpy14) (forall ((?ppy71 Int)) (! (or (not (= (select1 ?spy2 ?ppy71) 1)) (not (overlaps (region ?ppy71 1) ?rpy14))) :pattern ((select1 ?spy2 ?ppy71)) :pattern ((region ?ppy71 1)) )))) :pattern ((overlaps (set_to_region ?spy2) ?rpy14)) )) :named A1_172))
(assert (! (forall ((?rpy15 Int)(?spy3 Int)) (! (and (or (not (overlaps ?rpy15 (set_to_region ?spy3))) (and (= (select1 ?spy3 (?p!14 ?spy3 ?rpy15)) 1) (overlaps (region (?p!14 ?spy3 ?rpy15) 1) ?rpy15))) (or (overlaps ?rpy15 (set_to_region ?spy3)) (forall ((?ppy72 Int)) (! (or (not (= (select1 ?spy3 ?ppy72) 1)) (not (overlaps (region ?ppy72 1) ?rpy15))) :pattern ((select1 ?spy3 ?ppy72)) :pattern ((region ?ppy72 1)) )))) :pattern ((overlaps ?rpy15 (set_to_region ?spy3))) )) :named A1_173))
(assert (! (forall ((?rpy16 Int)) (! (= (subtraction ?rpy16 ?rpy16) empty) :pattern ((subtraction ?rpy16 ?rpy16)) )) :named A1_174))
(assert (! (forall ((?rpy17 Int)) (! (= (subtraction ?rpy17 empty) ?rpy17) :pattern ((subtraction ?rpy17 empty)) )) :named A1_175))
(assert (! (forall ((?rpy18 Int)) (! (= (subtraction ?rpy18 universe) empty) :pattern ((subtraction ?rpy18 universe)) )) :named A1_176))
(assert (! (forall ((?rpy19 Int)) (! (= (subtraction empty ?rpy19) empty) :pattern ((subtraction empty ?rpy19)) )) :named A1_177))
(assert (! (forall ((?rpy20 Int)) (! (= (union ?rpy20 ?rpy20) ?rpy20) :pattern ((union ?rpy20 ?rpy20)) )) :named A1_178))
(assert (! (forall ((?rpy21 Int)) (! (= (union ?rpy21 empty) ?rpy21) :pattern ((union ?rpy21 empty)) )) :named A1_179))
(assert (! (forall ((?rpy22 Int)) (! (= (union ?rpy22 universe) universe) :pattern ((union ?rpy22 universe)) )) :named A1_180))
(assert (! (forall ((?rpy23 Int)) (! (= (union empty ?rpy23) ?rpy23) :pattern ((union empty ?rpy23)) )) :named A1_181))
(assert (! (forall ((?rpy24 Int)) (! (= (union universe ?rpy24) universe) :pattern ((union universe ?rpy24)) )) :named A1_182))
(assert (! (forall ((?rpy25 Int)) (! (contains ?rpy25 ?rpy25) :pattern ((contains ?rpy25 ?rpy25)) )) :named A1_183))
(assert (! (forall ((?rpy26 Int)) (! (contains ?rpy26 universe) :pattern ((contains ?rpy26 universe)) )) :named A1_184))
(assert (! (forall ((?rpy27 Int)) (! (contains empty ?rpy27) :pattern ((contains empty ?rpy27)) )) :named A1_185))
(assert (! (forall ((?rpy28 Int)) (! (not (overlaps ?rpy28 empty)) :pattern ((overlaps ?rpy28 empty)) )) :named A1_186))
(assert (! (forall ((?rpy29 Int)) (! (not (overlaps empty ?rpy29)) :pattern ((overlaps empty ?rpy29)) )) :named A1_187))
(assert (! (forall ((?rpy30 Int)) (! (or (= ?rpy30 empty) (overlaps ?rpy30 ?rpy30)) :pattern ((overlaps ?rpy30 ?rpy30)) )) :named A1_188))
(assert (! (forall ((?rpy31 Int)) (! (or (= ?rpy31 empty) (overlaps ?rpy31 universe)) :pattern ((overlaps ?rpy31 universe)) )) :named A1_189))
(assert (! (forall ((?rpy32 Int)) (! (or (= ?rpy32 empty) (overlaps universe ?rpy32)) :pattern ((overlaps universe ?rpy32)) )) :named A1_190))
(assert (! (forall ((?rpy33 Int)) (! (or (not (contains ?rpy33 empty)) (= ?rpy33 empty)) :pattern ((contains ?rpy33 empty)) )) :named A1_191))
(assert (! (forall ((?rpy34 Int)) (! (or (not (contains universe ?rpy34)) (= ?rpy34 universe)) :pattern ((contains universe ?rpy34)) )) :named A1_192))
(assert (! (forall ((?rpy35 Int)) (! (simple_subregion ?rpy35 ?rpy35) :pattern ((simple_subregion ?rpy35 ?rpy35)) )) :named A1_193))
(assert (! (forall ((?r1py1 Int)(?oldgmem_1py6 Int)(?newgmem_1py6 Int)(?oldmem_1py9 Int)(?newmem_1py9 Int)) (! (or (not (only_region_changed_or_new_trans ?r1py1 ?oldgmem_1py6 ?newgmem_1py6 ?oldmem_1py9 ?newmem_1py9)) (not (<= (memory_id ?newgmem_1py6 ?newmem_1py9) (memory_id ?oldgmem_1py6 ?oldmem_1py9))) (and (= ?oldgmem_1py6 ?newgmem_1py6) (= ?oldmem_1py9 ?newmem_1py9))) :pattern ((only_region_changed_or_new_trans ?r1py1 ?oldgmem_1py6 ?newgmem_1py6 ?oldmem_1py9 ?newmem_1py9)) )) :named A1_194))
(assert (! (forall ((?r1py2 Int)(?r2py1 Int)(?gmem1py0 Int)(?gmem2py0 Int)(?gmem3py0 Int)(?mem1py0 Int)(?mem2py0 Int)(?mem3py0 Int)) (! (or (not (only_region_changed_or_new_trans ?r1py2 ?gmem1py0 ?gmem2py0 ?mem1py0 ?mem2py0)) (not (only_region_changed_or_new_nontrans ?r2py1 ?gmem2py0 ?gmem3py0 ?mem2py0 ?mem3py0)) (only_region_changed_or_new_trans (union ?r1py2 ?r2py1) ?gmem1py0 ?gmem3py0 ?mem1py0 ?mem3py0)) :pattern ((only_region_changed_or_new_trans ?r1py2 ?gmem1py0 ?gmem2py0 ?mem1py0 ?mem2py0) (only_region_changed_or_new_nontrans ?r2py1 ?gmem2py0 ?gmem3py0 ?mem2py0 ?mem3py0)) )) :named A1_195))
(assert (! (forall ((?r1py3 Int)(?r2py2 Int)(?r3py0 Int)) (! (= (subtraction (union ?r1py3 ?r2py2) (union ?r1py3 ?r3py0)) (subtraction ?r2py2 (union ?r1py3 ?r3py0))) :pattern ((subtraction (union ?r1py3 ?r2py2) (union ?r1py3 ?r3py0))) )) :named A1_196))
(assert (! (forall ((?r1py4 Int)(?r2py3 Int)(?r3py1 Int)) (! (and (or (overlaps ?r1py4 ?r3py1) (overlaps ?r2py3 ?r3py1) (not (overlaps (union ?r1py4 ?r2py3) ?r3py1))) (or (overlaps (union ?r1py4 ?r2py3) ?r3py1) (and (not (overlaps ?r1py4 ?r3py1)) (not (overlaps ?r2py3 ?r3py1))))) :pattern ((overlaps (union ?r1py4 ?r2py3) ?r3py1)) )) :named A1_197))
(assert (! (forall ((?r1py5 Int)(?r2py4 Int)(?r3py2 Int)) (! (and (or (overlaps ?r3py2 ?r1py5) (overlaps ?r3py2 ?r2py4) (not (overlaps ?r3py2 (union ?r1py5 ?r2py4)))) (or (overlaps ?r3py2 (union ?r1py5 ?r2py4)) (and (not (overlaps ?r3py2 ?r1py5)) (not (overlaps ?r3py2 ?r2py4))))) :pattern ((overlaps ?r3py2 (union ?r1py5 ?r2py4))) )) :named A1_198))
(assert (! (forall ((?r1py6 Int)(?r2py5 Int)(?r3py3 Int)) (! (or (contains ?r1py6 (union ?r2py5 ?r3py3)) (and (not (contains ?r1py6 ?r2py5)) (not (contains ?r1py6 ?r3py3)))) :pattern ((contains ?r1py6 (union ?r2py5 ?r3py3))) )) :named A1_199))
(assert (! (forall ((?r1py7 Int)(?r2py6 Int)(?r3py4 Int)) (! (or (not (contains ?r1py7 ?r2py6)) (overlaps ?r1py7 ?r3py4) (contains ?r1py7 (subtraction ?r2py6 ?r3py4))) :pattern ((contains ?r1py7 (subtraction ?r2py6 ?r3py4))) )) :named A1_200))
(assert (! (forall ((?r1py8 Int)(?r2py7 Int)(?r3py5 Int)) (! (or (not (contains ?r1py8 ?r3py5)) (contains (subtraction ?r1py8 ?r2py7) ?r3py5)) :pattern ((contains (subtraction ?r1py8 ?r2py7) ?r3py5)) )) :named A1_201))
(assert (! (forall ((?r1py9 Int)(?r2py8 Int)(?r3py6 Int)) (! (or (not (contains ?r1py9 ?r3py6)) (not (contains ?r2py8 ?r3py6)) (contains (union ?r1py9 ?r2py8) ?r3py6)) :pattern ((contains (union ?r1py9 ?r2py8) ?r3py6)) )) :named A1_202))
(assert (! (forall ((?r1py10 Int)(?r2py9 Int)(?r3py7 Int)) (! (or (not (contains ?r3py7 ?r2py9)) (not (overlaps (subtraction ?r1py10 ?r2py9) ?r3py7))) :pattern ((overlaps (subtraction ?r1py10 ?r2py9) ?r3py7)) )) :named A1_203))
(assert (! (forall ((?r1py11 Int)(?r2py10 Int)(?r3py8 Int)) (! (or (not (contains ?r3py8 ?r2py10)) (not (overlaps ?r3py8 (subtraction ?r1py11 ?r2py10)))) :pattern ((overlaps ?r3py8 (subtraction ?r1py11 ?r2py10))) )) :named A1_204))
(assert (! (forall ((?r1py12 Int)(?r2py11 Int)(?r3py9 Int)) (! (or (not (simple_subregion ?r1py12 ?r2py11)) (not (simple_subregion (subtraction ?r3py9 ?r1py12) ?r2py11)) (simple_subregion ?r3py9 ?r2py11)) :pattern ((simple_subregion ?r1py12 ?r2py11) (simple_subregion (subtraction ?r3py9 ?r1py12) ?r2py11)) )) :named A1_205))
(assert (! (forall ((?r1py13 Int)(?r2py12 Int)(?r3py10 Int)) (! (or (overlaps ?r1py13 ?r3py10) (not (overlaps (subtraction ?r1py13 ?r2py12) ?r3py10))) :pattern ((overlaps (subtraction ?r1py13 ?r2py12) ?r3py10)) )) :named A1_206))
(assert (! (forall ((?r1py14 Int)(?r2py13 Int)(?r3py11 Int)) (! (or (overlaps ?r3py11 ?r1py14) (not (overlaps ?r3py11 (subtraction ?r1py14 ?r2py13)))) :pattern ((overlaps ?r3py11 (subtraction ?r1py14 ?r2py13))) )) :named A1_207))
(assert (! (forall ((?r1py15 Int)(?r2py14 Int)(?r3py12 Int)) (! (simple_subregion (union ?r2py14 ?r3py12) (union ?r2py14 ?r3py12)) :pattern ((contains ?r1py15 (union ?r2py14 ?r3py12))) )) :named A1_208))
(assert (! (forall ((?r1py16 Int)(?r2py15 Int)(?r3py13 Int)) (! (or (not (simple_subregion (union ?r1py16 ?r2py15) ?r3py13)) (and (simple_subregion ?r1py16 ?r3py13) (simple_subregion ?r2py15 ?r3py13))) :pattern ((simple_subregion (union ?r1py16 ?r2py15) ?r3py13)) )) :named A1_209))
(assert (! (forall ((?r1py17 Int)(?r2py16 Int)) (! (or (not (simple_subregion ?r1py17 ?r2py16)) (contains ?r1py17 ?r2py16)) :pattern ((simple_subregion ?r1py17 ?r2py16) (contains ?r1py17 ?r2py16)) )) :named A1_210))
(assert (! (forall ((?spy4 Int)(?ppy73 Int)) (! (or (contains (region ?ppy73 1) (NodeSetToRegion ?spy4)) (forall ((?npy7 Int)) (! (or (not (= (select1 ?spy4 ?npy7) 1)) (not (overlaps (region ?ppy73 1) (region ?npy7 24)))) :pattern ((select1 ?spy4 ?npy7)) ))) :pattern ((contains (region ?ppy73 1) (NodeSetToRegion ?spy4))) )) :named A1_211))
(assert (! (forall ((?spy5 Int)(?rpy36 Int)) (! (or (not (overlaps (NodeSetToRegion ?spy5) ?rpy36)) (and (= (select1 ?spy5 (?n!19 ?rpy36 ?spy5)) 1) (overlaps (region (?n!19 ?rpy36 ?spy5) 24) ?rpy36))) :pattern ((overlaps (NodeSetToRegion ?spy5) ?rpy36)) )) :named A1_212))
(assert (! (forall ((?spy6 Int)(?rpy37 Int)) (! (or (not (overlaps ?rpy37 (NodeSetToRegion ?spy6))) (and (= (select1 ?spy6 (?n!20 ?rpy37 ?spy6)) 1) (overlaps ?rpy37 (region (?n!20 ?rpy37 ?spy6) 24)))) :pattern ((overlaps ?rpy37 (NodeSetToRegion ?spy6))) )) :named A1_213))
(assert (! (forall ((?spy7 Int)(?szpy1 Int)(?offpy0 Int)(?ppy74 Int)) (! (or (not (<= min_u8 ?szpy1)) (not (<= ?szpy1 max_u8)) (not (<= min_i8 ?offpy0)) (not (<= ?offpy0 max_i8)) (not (= (select1 ?spy7 ?ppy74) 1)) (not (<= 0 ?offpy0)) (not (<= ?szpy1 24)) (not (<= (+ ?offpy0 (conv_i4_to_i8 (conv_i8_to_i4 ?szpy1))) 24)) (contains (region (add_ptr ?ppy74 ?offpy0 1) ?szpy1) (NodeSetToRegion ?spy7)) (<= ?szpy1 0)) :pattern ((contains (region (add_ptr ?ppy74 ?offpy0 1) ?szpy1) (NodeSetToRegion ?spy7))) )) :named A1_214))
(assert (! (forall ((?spy8 Int)(?szpy2 Int)(?ppy75 Int)) (! (or (<= ?szpy2 0) (not (= (select1 ?spy8 ?ppy75) 1)) (not (<= min_u8 ?szpy2)) (not (<= ?szpy2 max_u8)) (not (<= ?szpy2 24)) (contains (region ?ppy75 ?szpy2) (NodeSetToRegion ?spy8))) :pattern ((contains (region ?ppy75 ?szpy2) (NodeSetToRegion ?spy8))) )) :named A1_215))
(assert (! (forall ((?tpy3 Int)(?p1py65 Int)(?p2py65 Int)(?l1py0 Int)(?l2py0 Int)(?o1py0 Int)(?o2py0 Int)) (! (or (not (<= 0 ?l1py0)) (not (<= 0 ?o1py0)) (not (<= 0 ?o2py0)) (not (is ?p2py65 ?tpy3)) (not (<= 0 ?l2py0)) (not (<= (+ ?l2py0 ?o2py0) (sizeof ?tpy3))) (not (overlaps (region (add_ptr ?p1py65 ?o1py0 1) ?l1py0) (region (add_ptr ?p2py65 ?o2py0 1) ?l2py0))) (not (is ?p1py65 ?tpy3)) (not (<= (+ ?l1py0 ?o1py0) (sizeof ?tpy3))) (= ?p1py65 ?p2py65)) :pattern ((is ?p1py65 ?tpy3) (is ?p2py65 ?tpy3) (overlaps (region (add_ptr ?p1py65 ?o1py0 1) ?l1py0) (region (add_ptr ?p2py65 ?o2py0 1) ?l2py0))) )) :named A1_216))
(assert (! (forall ((?tpy4 Int)(?p1py66 Int)(?p2py66 Int)(?l1py1 Int)(?l2py1 Int)) (! (or (not (<= 0 ?l1py1)) (not (<= 0 ?l2py1)) (= ?p1py66 ?p2py66) (not (is ?p2py66 ?tpy4)) (not (<= ?l2py1 (sizeof ?tpy4))) (not (overlaps (region ?p1py66 ?l1py1) (region ?p2py66 ?l2py1))) (not (is ?p1py66 ?tpy4)) (not (<= ?l1py1 (sizeof ?tpy4)))) :pattern ((is ?p1py66 ?tpy4) (is ?p2py66 ?tpy4) (overlaps (region ?p1py66 ?l1py1) (region ?p2py66 ?l2py1))) )) :named A1_217))
(assert (! (forall ((?t1py0 Int)(?t2py0 Int)(?p1py67 Int)(?p2py67 Int)(?l1py2 Int)(?l2py2 Int)(?o1py1 Int)(?o2py1 Int)) (! (or (not (<= 0 ?l1py2)) (not (<= 0 ?o1py1)) (not (<= 0 ?o2py1)) (not (is ?p1py67 ?t1py0)) (not (is ?p2py67 ?t2py0)) (not (disjoint_types ?t1py0 ?t2py0)) (not (<= 0 ?l2py2)) (not (<= (+ ?l1py2 ?o1py1) (sizeof ?t1py0))) (not (<= (+ ?l2py2 ?o2py1) (sizeof ?t2py0))) (not (overlaps (region (add_ptr ?p1py67 ?o1py1 1) ?l1py2) (region (add_ptr ?p2py67 ?o2py1 1) ?l2py2)))) :pattern ((is ?p1py67 ?t1py0) (is ?p2py67 ?t2py0) (disjoint_types ?t1py0 ?t2py0) (overlaps (region (add_ptr ?p1py67 ?o1py1 1) ?l1py2) (region (add_ptr ?p2py67 ?o2py1 1) ?l2py2))) )) :named A1_218))
(assert (! (forall ((?t1py1 Int)(?t2py1 Int)(?p1py68 Int)(?p2py68 Int)(?l1py3 Int)(?l2py3 Int)) (! (or (not (<= 0 ?l1py3)) (not (<= 0 ?l2py3)) (not (is ?p1py68 ?t1py1)) (not (is ?p2py68 ?t2py1)) (not (disjoint_types ?t1py1 ?t2py1)) (not (<= ?l1py3 (sizeof ?t1py1))) (not (<= ?l2py3 (sizeof ?t2py1))) (not (overlaps (region ?p1py68 ?l1py3) (region ?p2py68 ?l2py3)))) :pattern ((is ?p1py68 ?t1py1) (is ?p2py68 ?t2py1) (disjoint_types ?t1py1 ?t2py1) (overlaps (region ?p1py68 ?l1py3) (region ?p2py68 ?l2py3))) )) :named A1_219))
(assert (! (forall ((?vpy85 Int)) (! (or (= ?vpy85 0) (conv_i4_to_bool ?vpy85)) :pattern ((conv_i4_to_bool ?vpy85)) )) :named A1_220))
(assert (! (forall ((?x_2py2 Int)(?ypy1 Int)) (! (= (and_1 ?x_2py2 ?ypy1) (and_1 ?ypy1 ?x_2py2)) :pattern ((and_1 ?x_2py2 ?ypy1)) )) :named A1_221))
(assert (! (forall ((?x_2py3 Int)(?ypy2 Int)) (! (= (or_1 ?x_2py3 ?ypy2) (or_1 ?ypy2 ?x_2py3)) :pattern ((or_1 ?x_2py3 ?ypy2)) )) :named A1_222))
(assert (! (forall ((?x_2py4 Int)(?ypy3 Int)) (! (= (x ?x_2py4 ?ypy3) (+ ?x_2py4 (* (- 1) (x_1 ?x_2py4 ?ypy3) ?ypy3))) :pattern ((x ?x_2py4 ?ypy3)) :pattern ((x_1 ?x_2py4 ?ypy3)) )) :named A1_223))
(assert (! (forall ((?x_2py5 Int)(?ypy4 Int)) (! (= (x ?x_2py5 ?ypy4) (rem_unchk_u4 ?x_2py5 ?ypy4)) :pattern ((rem_unchk_u4 ?x_2py5 ?ypy4)) )) :named A1_224))
(assert (! (forall ((?x_2py6 Int)(?ypy5 Int)) (! (= (x ?x_2py6 ?ypy5) (rem_unchk_u8 ?x_2py6 ?ypy5)) :pattern ((rem_unchk_u8 ?x_2py6 ?ypy5)) )) :named A1_225))
(assert (! (forall ((?x_2py7 Int)(?ypy6 Int)) (! (= (x_1 ?x_2py7 ?ypy6) (div_unchk_u4 ?x_2py7 ?ypy6)) :pattern ((div_unchk_u4 ?x_2py7 ?ypy6)) )) :named A1_226))
(assert (! (forall ((?x_2py8 Int)(?ypy7 Int)) (! (= (x_1 ?x_2py8 ?ypy7) (div_unchk_u8 ?x_2py8 ?ypy7)) :pattern ((div_unchk_u8 ?x_2py8 ?ypy7)) )) :named A1_227))
(assert (! (forall ((?x_2py9 Int)(?ypy8 Int)) (! (= (xor_1 ?x_2py9 ?ypy8) (xor_1 ?ypy8 ?x_2py9)) :pattern ((xor_1 ?x_2py9 ?ypy8)) )) :named A1_228))
(assert (! (forall ((?x_2py10 Int)(?ypy9 Int)) (! (and (<= min_i4 (add_unchk_i4 ?x_2py10 ?ypy9)) (<= (add_unchk_i4 ?x_2py10 ?ypy9) max_i4)) :pattern ((add_unchk_i4 ?x_2py10 ?ypy9)) )) :named A1_229))
(assert (! (forall ((?x_2py11 Int)(?ypy10 Int)) (! (and (<= min_i4 (div_unchk_i4 ?x_2py11 ?ypy10)) (<= (div_unchk_i4 ?x_2py11 ?ypy10) max_i4)) :pattern ((div_unchk_i4 ?x_2py11 ?ypy10)) )) :named A1_230))
(assert (! (forall ((?x_2py12 Int)(?ypy11 Int)) (! (and (<= min_i4 (mul_unchk_i4 ?x_2py12 ?ypy11)) (<= (mul_unchk_i4 ?x_2py12 ?ypy11) max_i4)) :pattern ((mul_unchk_i4 ?x_2py12 ?ypy11)) )) :named A1_231))
(assert (! (forall ((?x_2py13 Int)(?ypy12 Int)) (! (and (<= min_i4 (rem_unchk_i4 ?x_2py13 ?ypy12)) (<= (rem_unchk_i4 ?x_2py13 ?ypy12) max_i4)) :pattern ((rem_unchk_i4 ?x_2py13 ?ypy12)) )) :named A1_232))
(assert (! (forall ((?x_2py14 Int)(?ypy13 Int)) (! (and (<= min_i4 (sub_unchk_i4 ?x_2py14 ?ypy13)) (<= (sub_unchk_i4 ?x_2py14 ?ypy13) max_i4)) :pattern ((sub_unchk_i4 ?x_2py14 ?ypy13)) )) :named A1_233))
(assert (! (forall ((?x_2py15 Int)(?ypy14 Int)) (! (and (<= min_i8 (add_unchk_i8 ?x_2py15 ?ypy14)) (<= (add_unchk_i8 ?x_2py15 ?ypy14) max_i8)) :pattern ((add_unchk_i8 ?x_2py15 ?ypy14)) )) :named A1_234))
(assert (! (forall ((?x_2py16 Int)(?ypy15 Int)) (! (and (<= min_i8 (div_unchk_i8 ?x_2py16 ?ypy15)) (<= (div_unchk_i8 ?x_2py16 ?ypy15) max_i8)) :pattern ((div_unchk_i8 ?x_2py16 ?ypy15)) )) :named A1_235))
(assert (! (forall ((?x_2py17 Int)(?ypy16 Int)) (! (and (<= min_i8 (mul_unchk_i8 ?x_2py17 ?ypy16)) (<= (mul_unchk_i8 ?x_2py17 ?ypy16) max_i8)) :pattern ((mul_unchk_i8 ?x_2py17 ?ypy16)) )) :named A1_236))
(assert (! (forall ((?x_2py18 Int)(?ypy17 Int)) (! (and (<= min_i8 (rem_unchk_i8 ?x_2py18 ?ypy17)) (<= (rem_unchk_i8 ?x_2py18 ?ypy17) max_i8)) :pattern ((rem_unchk_i8 ?x_2py18 ?ypy17)) )) :named A1_237))
(assert (! (forall ((?x_2py19 Int)(?ypy18 Int)) (! (and (<= min_i8 (sub_unchk_i8 ?x_2py19 ?ypy18)) (<= (sub_unchk_i8 ?x_2py19 ?ypy18) max_i8)) :pattern ((sub_unchk_i8 ?x_2py19 ?ypy18)) )) :named A1_238))
(assert (! (forall ((?x_2py20 Int)(?ypy19 Int)) (! (and (<= min_u4 (add_unchk_u4 ?x_2py20 ?ypy19)) (<= (add_unchk_u4 ?x_2py20 ?ypy19) max_u4)) :pattern ((add_unchk_u4 ?x_2py20 ?ypy19)) )) :named A1_239))
(assert (! (forall ((?x_2py21 Int)(?ypy20 Int)) (! (and (<= min_u4 (div_unchk_u4 ?x_2py21 ?ypy20)) (<= (div_unchk_u4 ?x_2py21 ?ypy20) max_u4)) :pattern ((div_unchk_u4 ?x_2py21 ?ypy20)) )) :named A1_240))
(assert (! (forall ((?x_2py22 Int)(?ypy21 Int)) (! (and (<= min_u4 (mul_unchk_u4 ?x_2py22 ?ypy21)) (<= (mul_unchk_u4 ?x_2py22 ?ypy21) max_u4)) :pattern ((mul_unchk_u4 ?x_2py22 ?ypy21)) )) :named A1_241))
(assert (! (forall ((?x_2py23 Int)(?ypy22 Int)) (! (and (<= min_u4 (rem_unchk_u4 ?x_2py23 ?ypy22)) (<= (rem_unchk_u4 ?x_2py23 ?ypy22) max_u4)) :pattern ((rem_unchk_u4 ?x_2py23 ?ypy22)) )) :named A1_242))
(assert (! (forall ((?x_2py24 Int)(?ypy23 Int)) (! (and (<= min_u4 (sub_unchk_u4 ?x_2py24 ?ypy23)) (<= (sub_unchk_u4 ?x_2py24 ?ypy23) max_u4)) :pattern ((sub_unchk_u4 ?x_2py24 ?ypy23)) )) :named A1_243))
(assert (! (forall ((?x_2py25 Int)(?ypy24 Int)) (! (and (<= min_u8 (add_unchk_u8 ?x_2py25 ?ypy24)) (<= (add_unchk_u8 ?x_2py25 ?ypy24) max_u8)) :pattern ((add_unchk_u8 ?x_2py25 ?ypy24)) )) :named A1_244))
(assert (! (forall ((?x_2py26 Int)(?ypy25 Int)) (! (and (<= min_u8 (div_unchk_u8 ?x_2py26 ?ypy25)) (<= (div_unchk_u8 ?x_2py26 ?ypy25) max_u8)) :pattern ((div_unchk_u8 ?x_2py26 ?ypy25)) )) :named A1_245))
(assert (! (forall ((?x_2py27 Int)(?ypy26 Int)) (! (and (<= min_u8 (mul_unchk_u8 ?x_2py27 ?ypy26)) (<= (mul_unchk_u8 ?x_2py27 ?ypy26) max_u8)) :pattern ((mul_unchk_u8 ?x_2py27 ?ypy26)) )) :named A1_246))
(assert (! (forall ((?x_2py28 Int)(?ypy27 Int)) (! (and (<= min_u8 (rem_unchk_u8 ?x_2py28 ?ypy27)) (<= (rem_unchk_u8 ?x_2py28 ?ypy27) max_u8)) :pattern ((rem_unchk_u8 ?x_2py28 ?ypy27)) )) :named A1_247))
(assert (! (forall ((?x_2py29 Int)(?ypy28 Int)) (! (and (<= min_u8 (sub_unchk_u8 ?x_2py29 ?ypy28)) (<= (sub_unchk_u8 ?x_2py29 ?ypy28) max_u8)) :pattern ((sub_unchk_u8 ?x_2py29 ?ypy28)) )) :named A1_248))
(assert (! (forall ((?x_2py30 Int)(?ypy29 Int)) (! (or (<= 0 ?ypy29) (not (<= ?x_2py30 0)) (and (not (<= (x ?x_2py30 ?ypy29) ?ypy29)) (<= (x ?x_2py30 ?ypy29) 0))) :pattern ((x ?x_2py30 ?ypy29)) )) :named A1_249))
(assert (! (forall ((?x_2py31 Int)(?ypy30 Int)) (! (or (= (x ?x_2py31 ?ypy30) (rem_unchk_i4 ?x_2py31 ?ypy30)) (and (= ?x_2py31 min_i4) (= ?ypy30 (- 1)))) :pattern ((rem_unchk_i4 ?x_2py31 ?ypy30)) )) :named A1_250))
(assert (! (forall ((?x_2py32 Int)(?ypy31 Int)) (! (or (= (x ?x_2py32 ?ypy31) (rem_unchk_i8 ?x_2py32 ?ypy31)) (and (= ?x_2py32 min_i8) (= ?ypy31 (- 1)))) :pattern ((rem_unchk_i8 ?x_2py32 ?ypy31)) )) :named A1_251))
(assert (! (forall ((?x_2py33 Int)(?ypy32 Int)) (! (or (= (x_1 ?x_2py33 ?ypy32) (div_unchk_i4 ?x_2py33 ?ypy32)) (and (= ?x_2py33 min_i4) (= ?ypy32 (- 1)))) :pattern ((div_unchk_i4 ?x_2py33 ?ypy32)) )) :named A1_252))
(assert (! (forall ((?x_2py34 Int)(?ypy33 Int)) (! (or (= (x_1 ?x_2py34 ?ypy33) (div_unchk_i8 ?x_2py34 ?ypy33)) (and (= ?x_2py34 min_i8) (= ?ypy33 (- 1)))) :pattern ((div_unchk_i8 ?x_2py34 ?ypy33)) )) :named A1_253))
(assert (! (forall ((?x_2py35 Int)(?ypy34 Int)) (! (or (not (<= (+ ?x_2py35 (* (- 1) ?ypy34)) max_i4)) (= (+ ?x_2py35 (* (- 1) ?ypy34)) (sub_unchk_i4 ?x_2py35 ?ypy34)) (not (<= min_i4 (+ ?x_2py35 (* (- 1) ?ypy34))))) :pattern ((sub_unchk_i4 ?x_2py35 ?ypy34)) )) :named A1_254))
(assert (! (forall ((?x_2py36 Int)(?ypy35 Int)) (! (or (not (<= (+ ?x_2py36 (* (- 1) ?ypy35)) max_u4)) (not (<= min_u4 (+ ?x_2py36 (* (- 1) ?ypy35)))) (= (+ ?x_2py36 (* (- 1) ?ypy35)) (sub_unchk_u4 ?x_2py36 ?ypy35))) :pattern ((sub_unchk_u4 ?x_2py36 ?ypy35)) )) :named A1_255))
(assert (! (forall ((?x_2py37 Int)(?ypy36 Int)) (! (or (not (<= 0 ?x_2py37)) (<= 0 ?ypy36) (and (<= 0 (x ?x_2py37 ?ypy36)) (not (<= (* (- 1) ?ypy36) (x ?x_2py37 ?ypy36))))) :pattern ((x ?x_2py37 ?ypy36)) )) :named A1_256))
(assert (! (forall ((?x_2py38 Int)(?ypy37 Int)) (! (or (not (<= 0 ?x_2py38)) (<= ?ypy37 0) (and (<= 0 (x ?x_2py38 ?ypy37)) (not (<= ?ypy37 (x ?x_2py38 ?ypy37))))) :pattern ((x ?x_2py38 ?ypy37)) )) :named A1_257))
(assert (! (forall ((?x_2py39 Int)(?ypy38 Int)) (! (or (not (<= 0 ?x_2py39)) (and (<= 0 (and_1 ?x_2py39 ?ypy38)) (<= (and_1 ?x_2py39 ?ypy38) ?x_2py39))) :pattern ((and_1 ?x_2py39 ?ypy38)) )) :named A1_258))
(assert (! (forall ((?x_2py40 Int)(?ypy39 Int)) (! (or (not (<= 0 ?x_2py40)) (not (<= 0 ?ypy39)) (<= 0 (or_1 ?x_2py40 ?ypy39))) :pattern ((or_1 ?x_2py40 ?ypy39)) )) :named A1_259))
(assert (! (forall ((?x_2py41 Int)(?ypy40 Int)) (! (or (not (<= 0 ?x_2py41)) (not (<= 0 ?ypy40)) (<= 0 (xor_1 ?x_2py41 ?ypy40))) :pattern ((xor_1 ?x_2py41 ?ypy40)) )) :named A1_260))
(assert (! (forall ((?x_2py42 Int)(?ypy41 Int)) (! (or (not (<= 0 ?x_2py42)) (not (<= 0 ?ypy41)) (<= 1 ?x_2py42) (<= 1 ?ypy41) (not (<= 1 (or_1 ?x_2py42 ?ypy41)))) :pattern ((or_1 ?x_2py42 ?ypy41)) )) :named A1_261))
(assert (! (forall ((?x_2py43 Int)(?ypy42 Int)) (! (or (not (<= 0 ?x_2py43)) (not (<= 0 ?ypy42)) (<= 1 ?x_2py43) (<= 1 ?ypy42) (not (<= 1 (xor_1 ?x_2py43 ?ypy42)))) :pattern ((xor_1 ?x_2py43 ?ypy42)) )) :named A1_262))
(assert (! (forall ((?x_2py44 Int)(?ypy43 Int)) (! (or (not (<= 0 ?x_2py44)) (not (<= 0 ?ypy43)) (<= 1024 ?ypy43) (<= 1024 ?x_2py44) (not (<= 1024 (xor_1 ?x_2py44 ?ypy43)))) :pattern ((xor_1 ?x_2py44 ?ypy43)) )) :named A1_263))
(assert (! (forall ((?x_2py45 Int)(?ypy44 Int)) (! (or (not (<= 0 ?x_2py45)) (not (<= 0 ?ypy44)) (<= 1024 ?ypy44) (not (<= 1024 (or_1 ?x_2py45 ?ypy44))) (<= 1024 ?x_2py45)) :pattern ((or_1 ?x_2py45 ?ypy44)) )) :named A1_264))
(assert (! (forall ((?x_2py46 Int)(?ypy45 Int)) (! (or (not (<= 0 ?x_2py46)) (not (<= 0 ?ypy45)) (<= 1048576 ?ypy45) (<= 1048576 ?x_2py46) (not (<= 1048576 (xor_1 ?x_2py46 ?ypy45)))) :pattern ((xor_1 ?x_2py46 ?ypy45)) )) :named A1_265))
(assert (! (forall ((?x_2py47 Int)(?ypy46 Int)) (! (or (not (<= 0 ?x_2py47)) (not (<= 0 ?ypy46)) (<= 1048576 ?ypy46) (not (<= 1048576 (or_1 ?x_2py47 ?ypy46))) (<= 1048576 ?x_2py47)) :pattern ((or_1 ?x_2py47 ?ypy46)) )) :named A1_266))
(assert (! (forall ((?x_2py48 Int)(?ypy47 Int)) (! (or (not (<= 0 ?x_2py48)) (not (<= 0 ?ypy47)) (<= 1073741824 ?ypy47) (<= 1073741824 ?x_2py48) (not (<= 1073741824 (xor_1 ?x_2py48 ?ypy47)))) :pattern ((xor_1 ?x_2py48 ?ypy47)) )) :named A1_267))
(assert (! (forall ((?x_2py49 Int)(?ypy48 Int)) (! (or (not (<= 0 ?x_2py49)) (not (<= 0 ?ypy48)) (<= 1073741824 ?ypy48) (not (<= 1073741824 (or_1 ?x_2py49 ?ypy48))) (<= 1073741824 ?x_2py49)) :pattern ((or_1 ?x_2py49 ?ypy48)) )) :named A1_268))
(assert (! (forall ((?x_2py50 Int)(?ypy49 Int)) (! (or (not (<= 0 ?x_2py50)) (not (<= 0 ?ypy49)) (<= 1099511627776 ?ypy49) (<= 1099511627776 ?x_2py50) (not (<= 1099511627776 (or_1 ?x_2py50 ?ypy49)))) :pattern ((or_1 ?x_2py50 ?ypy49)) )) :named A1_269))
(assert (! (forall ((?x_2py51 Int)(?ypy50 Int)) (! (or (not (<= 0 ?x_2py51)) (not (<= 0 ?ypy50)) (<= 1099511627776 ?ypy50) (<= 1099511627776 ?x_2py51) (not (<= 1099511627776 (xor_1 ?x_2py51 ?ypy50)))) :pattern ((xor_1 ?x_2py51 ?ypy50)) )) :named A1_270))
(assert (! (forall ((?x_2py52 Int)(?ypy51 Int)) (! (or (not (<= 0 ?x_2py52)) (not (<= 0 ?ypy51)) (<= 1125899906842624 ?ypy51) (<= 1125899906842624 ?x_2py52) (not (<= 1125899906842624 (xor_1 ?x_2py52 ?ypy51)))) :pattern ((xor_1 ?x_2py52 ?ypy51)) )) :named A1_271))
(assert (! (forall ((?x_2py53 Int)(?ypy52 Int)) (! (or (not (<= 0 ?x_2py53)) (not (<= 0 ?ypy52)) (<= 1125899906842624 ?ypy52) (not (<= 1125899906842624 (or_1 ?x_2py53 ?ypy52))) (<= 1125899906842624 ?x_2py53)) :pattern ((or_1 ?x_2py53 ?ypy52)) )) :named A1_272))
(assert (! (forall ((?x_2py54 Int)(?ypy53 Int)) (! (or (not (<= 0 ?x_2py54)) (not (<= 0 ?ypy53)) (<= 1152921504606846976 ?ypy53) (<= 1152921504606846976 ?x_2py54) (not (<= 1152921504606846976 (or_1 ?x_2py54 ?ypy53)))) :pattern ((or_1 ?x_2py54 ?ypy53)) )) :named A1_273))
(assert (! (forall ((?x_2py55 Int)(?ypy54 Int)) (! (or (not (<= 0 ?x_2py55)) (not (<= 0 ?ypy54)) (<= 1152921504606846976 ?ypy54) (<= 1152921504606846976 ?x_2py55) (not (<= 1152921504606846976 (xor_1 ?x_2py55 ?ypy54)))) :pattern ((xor_1 ?x_2py55 ?ypy54)) )) :named A1_274))
(assert (! (forall ((?x_2py56 Int)(?ypy55 Int)) (! (or (not (<= 0 ?x_2py56)) (not (<= 0 ?ypy55)) (<= 128 ?ypy55) (<= 128 ?x_2py56) (not (<= 128 (xor_1 ?x_2py56 ?ypy55)))) :pattern ((xor_1 ?x_2py56 ?ypy55)) )) :named A1_275))
(assert (! (forall ((?x_2py57 Int)(?ypy56 Int)) (! (or (not (<= 0 ?x_2py57)) (not (<= 0 ?ypy56)) (<= 128 ?ypy56) (not (<= 128 (or_1 ?x_2py57 ?ypy56))) (<= 128 ?x_2py57)) :pattern ((or_1 ?x_2py57 ?ypy56)) )) :named A1_276))
(assert (! (forall ((?x_2py58 Int)(?ypy57 Int)) (! (or (not (<= 0 ?x_2py58)) (not (<= 0 ?ypy57)) (<= 131072 ?ypy57) (<= 131072 ?x_2py58) (not (<= 131072 (or_1 ?x_2py58 ?ypy57)))) :pattern ((or_1 ?x_2py58 ?ypy57)) )) :named A1_277))
(assert (! (forall ((?x_2py59 Int)(?ypy58 Int)) (! (or (not (<= 0 ?x_2py59)) (not (<= 0 ?ypy58)) (<= 131072 ?ypy58) (<= 131072 ?x_2py59) (not (<= 131072 (xor_1 ?x_2py59 ?ypy58)))) :pattern ((xor_1 ?x_2py59 ?ypy58)) )) :named A1_278))
(assert (! (forall ((?x_2py60 Int)(?ypy59 Int)) (! (or (not (<= 0 ?x_2py60)) (not (<= 0 ?ypy59)) (<= 134217728 ?ypy59) (<= 134217728 ?x_2py60) (not (<= 134217728 (xor_1 ?x_2py60 ?ypy59)))) :pattern ((xor_1 ?x_2py60 ?ypy59)) )) :named A1_279))
(assert (! (forall ((?x_2py61 Int)(?ypy60 Int)) (! (or (not (<= 0 ?x_2py61)) (not (<= 0 ?ypy60)) (<= 134217728 ?ypy60) (not (<= 134217728 (or_1 ?x_2py61 ?ypy60))) (<= 134217728 ?x_2py61)) :pattern ((or_1 ?x_2py61 ?ypy60)) )) :named A1_280))
(assert (! (forall ((?x_2py62 Int)(?ypy61 Int)) (! (or (not (<= 0 ?x_2py62)) (not (<= 0 ?ypy61)) (<= 137438953472 ?ypy61) (<= 137438953472 ?x_2py62) (not (<= 137438953472 (xor_1 ?x_2py62 ?ypy61)))) :pattern ((xor_1 ?x_2py62 ?ypy61)) )) :named A1_281))
(assert (! (forall ((?x_2py63 Int)(?ypy62 Int)) (! (or (not (<= 0 ?x_2py63)) (not (<= 0 ?ypy62)) (<= 137438953472 ?ypy62) (not (<= 137438953472 (or_1 ?x_2py63 ?ypy62))) (<= 137438953472 ?x_2py63)) :pattern ((or_1 ?x_2py63 ?ypy62)) )) :named A1_282))
(assert (! (forall ((?x_2py64 Int)(?ypy63 Int)) (! (or (not (<= 0 ?x_2py64)) (not (<= 0 ?ypy63)) (<= 140737488355328 ?ypy63) (<= 140737488355328 ?x_2py64) (not (<= 140737488355328 (or_1 ?x_2py64 ?ypy63)))) :pattern ((or_1 ?x_2py64 ?ypy63)) )) :named A1_283))
(assert (! (forall ((?x_2py65 Int)(?ypy64 Int)) (! (or (not (<= 0 ?x_2py65)) (not (<= 0 ?ypy64)) (<= 140737488355328 ?ypy64) (<= 140737488355328 ?x_2py65) (not (<= 140737488355328 (xor_1 ?x_2py65 ?ypy64)))) :pattern ((xor_1 ?x_2py65 ?ypy64)) )) :named A1_284))
(assert (! (forall ((?x_2py66 Int)(?ypy65 Int)) (! (or (not (<= 0 ?x_2py66)) (not (<= 0 ?ypy65)) (<= 144115188075855872 ?ypy65) (<= 144115188075855872 ?x_2py66) (not (<= 144115188075855872 (or_1 ?x_2py66 ?ypy65)))) :pattern ((or_1 ?x_2py66 ?ypy65)) )) :named A1_285))
(assert (! (forall ((?x_2py67 Int)(?ypy66 Int)) (! (or (not (<= 0 ?x_2py67)) (not (<= 0 ?ypy66)) (<= 144115188075855872 ?ypy66) (<= 144115188075855872 ?x_2py67) (not (<= 144115188075855872 (xor_1 ?x_2py67 ?ypy66)))) :pattern ((xor_1 ?x_2py67 ?ypy66)) )) :named A1_286))
(assert (! (forall ((?x_2py68 Int)(?ypy67 Int)) (! (or (not (<= 0 ?x_2py68)) (not (<= 0 ?ypy67)) (<= 16 ?ypy67) (<= 16 ?x_2py68) (not (<= 16 (xor_1 ?x_2py68 ?ypy67)))) :pattern ((xor_1 ?x_2py68 ?ypy67)) )) :named A1_287))
(assert (! (forall ((?x_2py69 Int)(?ypy68 Int)) (! (or (not (<= 0 ?x_2py69)) (not (<= 0 ?ypy68)) (<= 16 ?ypy68) (not (<= 16 (or_1 ?x_2py69 ?ypy68))) (<= 16 ?x_2py69)) :pattern ((or_1 ?x_2py69 ?ypy68)) )) :named A1_288))
(assert (! (forall ((?x_2py70 Int)(?ypy69 Int)) (! (or (not (<= 0 ?x_2py70)) (not (<= 0 ?ypy69)) (<= 16384 ?ypy69) (<= 16384 ?x_2py70) (not (<= 16384 (xor_1 ?x_2py70 ?ypy69)))) :pattern ((xor_1 ?x_2py70 ?ypy69)) )) :named A1_289))
(assert (! (forall ((?x_2py71 Int)(?ypy70 Int)) (! (or (not (<= 0 ?x_2py71)) (not (<= 0 ?ypy70)) (<= 16384 ?ypy70) (not (<= 16384 (or_1 ?x_2py71 ?ypy70))) (<= 16384 ?x_2py71)) :pattern ((or_1 ?x_2py71 ?ypy70)) )) :named A1_290))
(assert (! (forall ((?x_2py72 Int)(?ypy71 Int)) (! (or (not (<= 0 ?x_2py72)) (not (<= 0 ?ypy71)) (<= 16777216 ?ypy71) (<= 16777216 ?x_2py72) (not (<= 16777216 (xor_1 ?x_2py72 ?ypy71)))) :pattern ((xor_1 ?x_2py72 ?ypy71)) )) :named A1_291))
(assert (! (forall ((?x_2py73 Int)(?ypy72 Int)) (! (or (not (<= 0 ?x_2py73)) (not (<= 0 ?ypy72)) (<= 16777216 ?ypy72) (not (<= 16777216 (or_1 ?x_2py73 ?ypy72))) (<= 16777216 ?x_2py73)) :pattern ((or_1 ?x_2py73 ?ypy72)) )) :named A1_292))
(assert (! (forall ((?x_2py74 Int)(?ypy73 Int)) (! (or (not (<= 0 ?x_2py74)) (not (<= 0 ?ypy73)) (<= 17179869184 ?ypy73) (<= 17179869184 ?x_2py74) (not (<= 17179869184 (or_1 ?x_2py74 ?ypy73)))) :pattern ((or_1 ?x_2py74 ?ypy73)) )) :named A1_293))
(assert (! (forall ((?x_2py75 Int)(?ypy74 Int)) (! (or (not (<= 0 ?x_2py75)) (not (<= 0 ?ypy74)) (<= 17179869184 ?ypy74) (<= 17179869184 ?x_2py75) (not (<= 17179869184 (xor_1 ?x_2py75 ?ypy74)))) :pattern ((xor_1 ?x_2py75 ?ypy74)) )) :named A1_294))
(assert (! (forall ((?x_2py76 Int)(?ypy75 Int)) (! (or (not (<= 0 ?x_2py76)) (not (<= 0 ?ypy75)) (<= 17592186044416 ?ypy75) (<= 17592186044416 ?x_2py76) (not (<= 17592186044416 (xor_1 ?x_2py76 ?ypy75)))) :pattern ((xor_1 ?x_2py76 ?ypy75)) )) :named A1_295))
(assert (! (forall ((?x_2py77 Int)(?ypy76 Int)) (! (or (not (<= 0 ?x_2py77)) (not (<= 0 ?ypy76)) (<= 17592186044416 ?ypy76) (not (<= 17592186044416 (or_1 ?x_2py77 ?ypy76))) (<= 17592186044416 ?x_2py77)) :pattern ((or_1 ?x_2py77 ?ypy76)) )) :named A1_296))
(assert (! (forall ((?x_2py78 Int)(?ypy77 Int)) (! (or (not (<= 0 ?x_2py78)) (not (<= 0 ?ypy77)) (<= 18014398509481984 ?ypy77) (<= 18014398509481984 ?x_2py78) (not (<= 18014398509481984 (xor_1 ?x_2py78 ?ypy77)))) :pattern ((xor_1 ?x_2py78 ?ypy77)) )) :named A1_297))
(assert (! (forall ((?x_2py79 Int)(?ypy78 Int)) (! (or (not (<= 0 ?x_2py79)) (not (<= 0 ?ypy78)) (<= 18014398509481984 ?ypy78) (not (<= 18014398509481984 (or_1 ?x_2py79 ?ypy78))) (<= 18014398509481984 ?x_2py79)) :pattern ((or_1 ?x_2py79 ?ypy78)) )) :named A1_298))
(assert (! (forall ((?x_2py80 Int)(?ypy79 Int)) (! (or (not (<= 0 ?x_2py80)) (not (<= 0 ?ypy79)) (<= 2 ?ypy79) (<= 2 ?x_2py80) (not (<= 2 (xor_1 ?x_2py80 ?ypy79)))) :pattern ((xor_1 ?x_2py80 ?ypy79)) )) :named A1_299))
(assert (! (forall ((?x_2py81 Int)(?ypy80 Int)) (! (or (not (<= 0 ?x_2py81)) (not (<= 0 ?ypy80)) (<= 2 ?ypy80) (not (<= 2 (or_1 ?x_2py81 ?ypy80))) (<= 2 ?x_2py81)) :pattern ((or_1 ?x_2py81 ?ypy80)) )) :named A1_300))
(assert (! (forall ((?x_2py82 Int)(?ypy81 Int)) (! (or (not (<= 0 ?x_2py82)) (not (<= 0 ?ypy81)) (<= 2048 ?ypy81) (<= 2048 ?x_2py82) (not (<= 2048 (xor_1 ?x_2py82 ?ypy81)))) :pattern ((xor_1 ?x_2py82 ?ypy81)) )) :named A1_301))
(assert (! (forall ((?x_2py83 Int)(?ypy82 Int)) (! (or (not (<= 0 ?x_2py83)) (not (<= 0 ?ypy82)) (<= 2048 ?ypy82) (not (<= 2048 (or_1 ?x_2py83 ?ypy82))) (<= 2048 ?x_2py83)) :pattern ((or_1 ?x_2py83 ?ypy82)) )) :named A1_302))
(assert (! (forall ((?x_2py84 Int)(?ypy83 Int)) (! (or (not (<= 0 ?x_2py84)) (not (<= 0 ?ypy83)) (<= 2097152 ?ypy83) (<= 2097152 ?x_2py84) (not (<= 2097152 (xor_1 ?x_2py84 ?ypy83)))) :pattern ((xor_1 ?x_2py84 ?ypy83)) )) :named A1_303))
(assert (! (forall ((?x_2py85 Int)(?ypy84 Int)) (! (or (not (<= 0 ?x_2py85)) (not (<= 0 ?ypy84)) (<= 2097152 ?ypy84) (not (<= 2097152 (or_1 ?x_2py85 ?ypy84))) (<= 2097152 ?x_2py85)) :pattern ((or_1 ?x_2py85 ?ypy84)) )) :named A1_304))
(assert (! (forall ((?x_2py86 Int)(?ypy85 Int)) (! (or (not (<= 0 ?x_2py86)) (not (<= 0 ?ypy85)) (<= 2147483648 ?ypy85) (<= 2147483648 ?x_2py86) (not (<= 2147483648 (xor_1 ?x_2py86 ?ypy85)))) :pattern ((xor_1 ?x_2py86 ?ypy85)) )) :named A1_305))
(assert (! (forall ((?x_2py87 Int)(?ypy86 Int)) (! (or (not (<= 0 ?x_2py87)) (not (<= 0 ?ypy86)) (<= 2147483648 ?ypy86) (not (<= 2147483648 (or_1 ?x_2py87 ?ypy86))) (<= 2147483648 ?x_2py87)) :pattern ((or_1 ?x_2py87 ?ypy86)) )) :named A1_306))
(assert (! (forall ((?x_2py88 Int)(?ypy87 Int)) (! (or (not (<= 0 ?x_2py88)) (not (<= 0 ?ypy87)) (<= 2199023255552 ?ypy87) (<= 2199023255552 ?x_2py88) (not (<= 2199023255552 (or_1 ?x_2py88 ?ypy87)))) :pattern ((or_1 ?x_2py88 ?ypy87)) )) :named A1_307))
(assert (! (forall ((?x_2py89 Int)(?ypy88 Int)) (! (or (not (<= 0 ?x_2py89)) (not (<= 0 ?ypy88)) (<= 2199023255552 ?ypy88) (<= 2199023255552 ?x_2py89) (not (<= 2199023255552 (xor_1 ?x_2py89 ?ypy88)))) :pattern ((xor_1 ?x_2py89 ?ypy88)) )) :named A1_308))
(assert (! (forall ((?x_2py90 Int)(?ypy89 Int)) (! (or (not (<= 0 ?x_2py90)) (not (<= 0 ?ypy89)) (<= 2251799813685248 ?ypy89) (<= 2251799813685248 ?x_2py90) (not (<= 2251799813685248 (xor_1 ?x_2py90 ?ypy89)))) :pattern ((xor_1 ?x_2py90 ?ypy89)) )) :named A1_309))
(assert (! (forall ((?x_2py91 Int)(?ypy90 Int)) (! (or (not (<= 0 ?x_2py91)) (not (<= 0 ?ypy90)) (<= 2251799813685248 ?ypy90) (not (<= 2251799813685248 (or_1 ?x_2py91 ?ypy90))) (<= 2251799813685248 ?x_2py91)) :pattern ((or_1 ?x_2py91 ?ypy90)) )) :named A1_310))
(assert (! (forall ((?x_2py92 Int)(?ypy91 Int)) (! (or (not (<= 0 ?x_2py92)) (not (<= 0 ?ypy91)) (<= 2305843009213693952 ?ypy91) (<= 2305843009213693952 ?x_2py92) (not (<= 2305843009213693952 (or_1 ?x_2py92 ?ypy91)))) :pattern ((or_1 ?x_2py92 ?ypy91)) )) :named A1_311))
(assert (! (forall ((?x_2py93 Int)(?ypy92 Int)) (! (or (not (<= 0 ?x_2py93)) (not (<= 0 ?ypy92)) (<= 2305843009213693952 ?ypy92) (<= 2305843009213693952 ?x_2py93) (not (<= 2305843009213693952 (xor_1 ?x_2py93 ?ypy92)))) :pattern ((xor_1 ?x_2py93 ?ypy92)) )) :named A1_312))
(assert (! (forall ((?x_2py94 Int)(?ypy93 Int)) (! (or (not (<= 0 ?x_2py94)) (not (<= 0 ?ypy93)) (<= 256 ?x_2py94) (<= 256 ?ypy93) (not (<= 256 (xor_1 ?x_2py94 ?ypy93)))) :pattern ((xor_1 ?x_2py94 ?ypy93)) )) :named A1_313))
(assert (! (forall ((?x_2py95 Int)(?ypy94 Int)) (! (or (not (<= 0 ?x_2py95)) (not (<= 0 ?ypy94)) (<= 256 ?x_2py95) (not (<= 256 (or_1 ?x_2py95 ?ypy94))) (<= 256 ?ypy94)) :pattern ((or_1 ?x_2py95 ?ypy94)) )) :named A1_314))
(assert (! (forall ((?x_2py96 Int)(?ypy95 Int)) (! (or (not (<= 0 ?x_2py96)) (not (<= 0 ?ypy95)) (<= 262144 ?ypy95) (<= 262144 ?x_2py96) (not (<= 262144 (xor_1 ?x_2py96 ?ypy95)))) :pattern ((xor_1 ?x_2py96 ?ypy95)) )) :named A1_315))
(assert (! (forall ((?x_2py97 Int)(?ypy96 Int)) (! (or (not (<= 0 ?x_2py97)) (not (<= 0 ?ypy96)) (<= 262144 ?ypy96) (not (<= 262144 (or_1 ?x_2py97 ?ypy96))) (<= 262144 ?x_2py97)) :pattern ((or_1 ?x_2py97 ?ypy96)) )) :named A1_316))
(assert (! (forall ((?x_2py98 Int)(?ypy97 Int)) (! (or (not (<= 0 ?x_2py98)) (not (<= 0 ?ypy97)) (<= 268435456 ?ypy97) (<= 268435456 ?x_2py98) (not (<= 268435456 (xor_1 ?x_2py98 ?ypy97)))) :pattern ((xor_1 ?x_2py98 ?ypy97)) )) :named A1_317))
(assert (! (forall ((?x_2py99 Int)(?ypy98 Int)) (! (or (not (<= 0 ?x_2py99)) (not (<= 0 ?ypy98)) (<= 268435456 ?ypy98) (not (<= 268435456 (or_1 ?x_2py99 ?ypy98))) (<= 268435456 ?x_2py99)) :pattern ((or_1 ?x_2py99 ?ypy98)) )) :named A1_318))
(assert (! (forall ((?x_2py100 Int)(?ypy99 Int)) (! (or (not (<= 0 ?x_2py100)) (not (<= 0 ?ypy99)) (<= 274877906944 ?ypy99) (<= 274877906944 ?x_2py100) (not (<= 274877906944 (xor_1 ?x_2py100 ?ypy99)))) :pattern ((xor_1 ?x_2py100 ?ypy99)) )) :named A1_319))
(assert (! (forall ((?x_2py101 Int)(?ypy100 Int)) (! (or (not (<= 0 ?x_2py101)) (not (<= 0 ?ypy100)) (<= 274877906944 ?ypy100) (not (<= 274877906944 (or_1 ?x_2py101 ?ypy100))) (<= 274877906944 ?x_2py101)) :pattern ((or_1 ?x_2py101 ?ypy100)) )) :named A1_320))
(assert (! (forall ((?x_2py102 Int)(?ypy101 Int)) (! (or (not (<= 0 ?x_2py102)) (not (<= 0 ?ypy101)) (<= 281474976710656 ?ypy101) (<= 281474976710656 ?x_2py102) (not (<= 281474976710656 (xor_1 ?x_2py102 ?ypy101)))) :pattern ((xor_1 ?x_2py102 ?ypy101)) )) :named A1_321))
(assert (! (forall ((?x_2py103 Int)(?ypy102 Int)) (! (or (not (<= 0 ?x_2py103)) (not (<= 0 ?ypy102)) (<= 281474976710656 ?ypy102) (not (<= 281474976710656 (or_1 ?x_2py103 ?ypy102))) (<= 281474976710656 ?x_2py103)) :pattern ((or_1 ?x_2py103 ?ypy102)) )) :named A1_322))
(assert (! (forall ((?x_2py104 Int)(?ypy103 Int)) (! (or (not (<= 0 ?x_2py104)) (not (<= 0 ?ypy103)) (<= 288230376151711744 ?ypy103) (<= 288230376151711744 ?x_2py104) (not (<= 288230376151711744 (or_1 ?x_2py104 ?ypy103)))) :pattern ((or_1 ?x_2py104 ?ypy103)) )) :named A1_323))
(assert (! (forall ((?x_2py105 Int)(?ypy104 Int)) (! (or (not (<= 0 ?x_2py105)) (not (<= 0 ?ypy104)) (<= 288230376151711744 ?ypy104) (<= 288230376151711744 ?x_2py105) (not (<= 288230376151711744 (xor_1 ?x_2py105 ?ypy104)))) :pattern ((xor_1 ?x_2py105 ?ypy104)) )) :named A1_324))
(assert (! (forall ((?x_2py106 Int)(?ypy105 Int)) (! (or (not (<= 0 ?x_2py106)) (not (<= 0 ?ypy105)) (<= 32 ?ypy105) (<= 32 ?x_2py106) (not (<= 32 (xor_1 ?x_2py106 ?ypy105)))) :pattern ((xor_1 ?x_2py106 ?ypy105)) )) :named A1_325))
(assert (! (forall ((?x_2py107 Int)(?ypy106 Int)) (! (or (not (<= 0 ?x_2py107)) (not (<= 0 ?ypy106)) (<= 32 ?ypy106) (not (<= 32 (or_1 ?x_2py107 ?ypy106))) (<= 32 ?x_2py107)) :pattern ((or_1 ?x_2py107 ?ypy106)) )) :named A1_326))
(assert (! (forall ((?x_2py108 Int)(?ypy107 Int)) (! (or (not (<= 0 ?x_2py108)) (not (<= 0 ?ypy107)) (<= 32768 ?ypy107) (<= 32768 ?x_2py108) (not (<= 32768 (xor_1 ?x_2py108 ?ypy107)))) :pattern ((xor_1 ?x_2py108 ?ypy107)) )) :named A1_327))
(assert (! (forall ((?x_2py109 Int)(?ypy108 Int)) (! (or (not (<= 0 ?x_2py109)) (not (<= 0 ?ypy108)) (<= 32768 ?ypy108) (not (<= 32768 (or_1 ?x_2py109 ?ypy108))) (<= 32768 ?x_2py109)) :pattern ((or_1 ?x_2py109 ?ypy108)) )) :named A1_328))
(assert (! (forall ((?x_2py110 Int)(?ypy109 Int)) (! (or (not (<= 0 ?x_2py110)) (not (<= 0 ?ypy109)) (<= 33554432 ?ypy109) (<= 33554432 ?x_2py110) (not (<= 33554432 (xor_1 ?x_2py110 ?ypy109)))) :pattern ((xor_1 ?x_2py110 ?ypy109)) )) :named A1_329))
(assert (! (forall ((?x_2py111 Int)(?ypy110 Int)) (! (or (not (<= 0 ?x_2py111)) (not (<= 0 ?ypy110)) (<= 33554432 ?ypy110) (not (<= 33554432 (or_1 ?x_2py111 ?ypy110))) (<= 33554432 ?x_2py111)) :pattern ((or_1 ?x_2py111 ?ypy110)) )) :named A1_330))
(assert (! (forall ((?x_2py112 Int)(?ypy111 Int)) (! (or (not (<= 0 ?x_2py112)) (not (<= 0 ?ypy111)) (<= 34359738368 ?ypy111) (<= 34359738368 ?x_2py112) (not (<= 34359738368 (xor_1 ?x_2py112 ?ypy111)))) :pattern ((xor_1 ?x_2py112 ?ypy111)) )) :named A1_331))
(assert (! (forall ((?x_2py113 Int)(?ypy112 Int)) (! (or (not (<= 0 ?x_2py113)) (not (<= 0 ?ypy112)) (<= 34359738368 ?ypy112) (not (<= 34359738368 (or_1 ?x_2py113 ?ypy112))) (<= 34359738368 ?x_2py113)) :pattern ((or_1 ?x_2py113 ?ypy112)) )) :named A1_332))
(assert (! (forall ((?x_2py114 Int)(?ypy113 Int)) (! (or (not (<= 0 ?x_2py114)) (not (<= 0 ?ypy113)) (<= 35184372088832 ?ypy113) (<= 35184372088832 ?x_2py114) (not (<= 35184372088832 (or_1 ?x_2py114 ?ypy113)))) :pattern ((or_1 ?x_2py114 ?ypy113)) )) :named A1_333))
(assert (! (forall ((?x_2py115 Int)(?ypy114 Int)) (! (or (not (<= 0 ?x_2py115)) (not (<= 0 ?ypy114)) (<= 35184372088832 ?ypy114) (<= 35184372088832 ?x_2py115) (not (<= 35184372088832 (xor_1 ?x_2py115 ?ypy114)))) :pattern ((xor_1 ?x_2py115 ?ypy114)) )) :named A1_334))
(assert (! (forall ((?x_2py116 Int)(?ypy115 Int)) (! (or (not (<= 0 ?x_2py116)) (not (<= 0 ?ypy115)) (<= 36028797018963968 ?ypy115) (<= 36028797018963968 ?x_2py116) (not (<= 36028797018963968 (xor_1 ?x_2py116 ?ypy115)))) :pattern ((xor_1 ?x_2py116 ?ypy115)) )) :named A1_335))
(assert (! (forall ((?x_2py117 Int)(?ypy116 Int)) (! (or (not (<= 0 ?x_2py117)) (not (<= 0 ?ypy116)) (<= 36028797018963968 ?ypy116) (not (<= 36028797018963968 (or_1 ?x_2py117 ?ypy116))) (<= 36028797018963968 ?x_2py117)) :pattern ((or_1 ?x_2py117 ?ypy116)) )) :named A1_336))
(assert (! (forall ((?x_2py118 Int)(?ypy117 Int)) (! (or (not (<= 0 ?x_2py118)) (not (<= 0 ?ypy117)) (<= 4 ?ypy117) (<= 4 ?x_2py118) (not (<= 4 (xor_1 ?x_2py118 ?ypy117)))) :pattern ((xor_1 ?x_2py118 ?ypy117)) )) :named A1_337))
(assert (! (forall ((?x_2py119 Int)(?ypy118 Int)) (! (or (not (<= 0 ?x_2py119)) (not (<= 0 ?ypy118)) (<= 4 ?ypy118) (not (<= 4 (or_1 ?x_2py119 ?ypy118))) (<= 4 ?x_2py119)) :pattern ((or_1 ?x_2py119 ?ypy118)) )) :named A1_338))
(assert (! (forall ((?x_2py120 Int)(?ypy119 Int)) (! (or (not (<= 0 ?x_2py120)) (not (<= 0 ?ypy119)) (<= 4096 ?ypy119) (<= 4096 ?x_2py120) (not (<= 4096 (or_1 ?x_2py120 ?ypy119)))) :pattern ((or_1 ?x_2py120 ?ypy119)) )) :named A1_339))
(assert (! (forall ((?x_2py121 Int)(?ypy120 Int)) (! (or (not (<= 0 ?x_2py121)) (not (<= 0 ?ypy120)) (<= 4096 ?ypy120) (<= 4096 ?x_2py121) (not (<= 4096 (xor_1 ?x_2py121 ?ypy120)))) :pattern ((xor_1 ?x_2py121 ?ypy120)) )) :named A1_340))
(assert (! (forall ((?x_2py122 Int)(?ypy121 Int)) (! (or (not (<= 0 ?x_2py122)) (not (<= 0 ?ypy121)) (<= 4194304 ?ypy121) (<= 4194304 ?x_2py122) (not (<= 4194304 (or_1 ?x_2py122 ?ypy121)))) :pattern ((or_1 ?x_2py122 ?ypy121)) )) :named A1_341))
(assert (! (forall ((?x_2py123 Int)(?ypy122 Int)) (! (or (not (<= 0 ?x_2py123)) (not (<= 0 ?ypy122)) (<= 4194304 ?ypy122) (<= 4194304 ?x_2py123) (not (<= 4194304 (xor_1 ?x_2py123 ?ypy122)))) :pattern ((xor_1 ?x_2py123 ?ypy122)) )) :named A1_342))
(assert (! (forall ((?x_2py124 Int)(?ypy123 Int)) (! (or (not (<= 0 ?x_2py124)) (not (<= 0 ?ypy123)) (<= 4294967296 ?x_2py124) (<= 4294967296 ?ypy123) (not (<= 4294967296 (xor_1 ?x_2py124 ?ypy123)))) :pattern ((xor_1 ?x_2py124 ?ypy123)) )) :named A1_343))
(assert (! (forall ((?x_2py125 Int)(?ypy124 Int)) (! (or (not (<= 0 ?x_2py125)) (not (<= 0 ?ypy124)) (<= 4294967296 ?x_2py125) (not (<= 4294967296 (or_1 ?x_2py125 ?ypy124))) (<= 4294967296 ?ypy124)) :pattern ((or_1 ?x_2py125 ?ypy124)) )) :named A1_344))
(assert (! (forall ((?x_2py126 Int)(?ypy125 Int)) (! (or (not (<= 0 ?x_2py126)) (not (<= 0 ?ypy125)) (<= 4398046511104 ?ypy125) (<= 4398046511104 ?x_2py126) (not (<= 4398046511104 (xor_1 ?x_2py126 ?ypy125)))) :pattern ((xor_1 ?x_2py126 ?ypy125)) )) :named A1_345))
(assert (! (forall ((?x_2py127 Int)(?ypy126 Int)) (! (or (not (<= 0 ?x_2py127)) (not (<= 0 ?ypy126)) (<= 4398046511104 ?ypy126) (not (<= 4398046511104 (or_1 ?x_2py127 ?ypy126))) (<= 4398046511104 ?x_2py127)) :pattern ((or_1 ?x_2py127 ?ypy126)) )) :named A1_346))
(assert (! (forall ((?x_2py128 Int)(?ypy127 Int)) (! (or (not (<= 0 ?x_2py128)) (not (<= 0 ?ypy127)) (<= 4503599627370496 ?ypy127) (<= 4503599627370496 ?x_2py128) (not (<= 4503599627370496 (or_1 ?x_2py128 ?ypy127)))) :pattern ((or_1 ?x_2py128 ?ypy127)) )) :named A1_347))
(assert (! (forall ((?x_2py129 Int)(?ypy128 Int)) (! (or (not (<= 0 ?x_2py129)) (not (<= 0 ?ypy128)) (<= 4503599627370496 ?ypy128) (<= 4503599627370496 ?x_2py129) (not (<= 4503599627370496 (xor_1 ?x_2py129 ?ypy128)))) :pattern ((xor_1 ?x_2py129 ?ypy128)) )) :named A1_348))
(assert (! (forall ((?x_2py130 Int)(?ypy129 Int)) (! (or (not (<= 0 ?x_2py130)) (not (<= 0 ?ypy129)) (<= 4611686018427387904 ?ypy129) (<= 4611686018427387904 ?x_2py130) (not (<= 4611686018427387904 (or_1 ?x_2py130 ?ypy129)))) :pattern ((or_1 ?x_2py130 ?ypy129)) )) :named A1_349))
(assert (! (forall ((?x_2py131 Int)(?ypy130 Int)) (! (or (not (<= 0 ?x_2py131)) (not (<= 0 ?ypy130)) (<= 4611686018427387904 ?ypy130) (<= 4611686018427387904 ?x_2py131) (not (<= 4611686018427387904 (xor_1 ?x_2py131 ?ypy130)))) :pattern ((xor_1 ?x_2py131 ?ypy130)) )) :named A1_350))
(assert (! (forall ((?x_2py132 Int)(?ypy131 Int)) (! (or (not (<= 0 ?x_2py132)) (not (<= 0 ?ypy131)) (<= 512 ?ypy131) (<= 512 ?x_2py132) (not (<= 512 (xor_1 ?x_2py132 ?ypy131)))) :pattern ((xor_1 ?x_2py132 ?ypy131)) )) :named A1_351))
(assert (! (forall ((?x_2py133 Int)(?ypy132 Int)) (! (or (not (<= 0 ?x_2py133)) (not (<= 0 ?ypy132)) (<= 512 ?ypy132) (not (<= 512 (or_1 ?x_2py133 ?ypy132))) (<= 512 ?x_2py133)) :pattern ((or_1 ?x_2py133 ?ypy132)) )) :named A1_352))
(assert (! (forall ((?x_2py134 Int)(?ypy133 Int)) (! (or (not (<= 0 ?x_2py134)) (not (<= 0 ?ypy133)) (<= 524288 ?ypy133) (<= 524288 ?x_2py134) (not (<= 524288 (or_1 ?x_2py134 ?ypy133)))) :pattern ((or_1 ?x_2py134 ?ypy133)) )) :named A1_353))
(assert (! (forall ((?x_2py135 Int)(?ypy134 Int)) (! (or (not (<= 0 ?x_2py135)) (not (<= 0 ?ypy134)) (<= 524288 ?ypy134) (<= 524288 ?x_2py135) (not (<= 524288 (xor_1 ?x_2py135 ?ypy134)))) :pattern ((xor_1 ?x_2py135 ?ypy134)) )) :named A1_354))
(assert (! (forall ((?x_2py136 Int)(?ypy135 Int)) (! (or (not (<= 0 ?x_2py136)) (not (<= 0 ?ypy135)) (<= 536870912 ?ypy135) (<= 536870912 ?x_2py136) (not (<= 536870912 (xor_1 ?x_2py136 ?ypy135)))) :pattern ((xor_1 ?x_2py136 ?ypy135)) )) :named A1_355))
(assert (! (forall ((?x_2py137 Int)(?ypy136 Int)) (! (or (not (<= 0 ?x_2py137)) (not (<= 0 ?ypy136)) (<= 536870912 ?ypy136) (not (<= 536870912 (or_1 ?x_2py137 ?ypy136))) (<= 536870912 ?x_2py137)) :pattern ((or_1 ?x_2py137 ?ypy136)) )) :named A1_356))
(assert (! (forall ((?x_2py138 Int)(?ypy137 Int)) (! (or (not (<= 0 ?x_2py138)) (not (<= 0 ?ypy137)) (<= 549755813888 ?ypy137) (<= 549755813888 ?x_2py138) (not (<= 549755813888 (or_1 ?x_2py138 ?ypy137)))) :pattern ((or_1 ?x_2py138 ?ypy137)) )) :named A1_357))
(assert (! (forall ((?x_2py139 Int)(?ypy138 Int)) (! (or (not (<= 0 ?x_2py139)) (not (<= 0 ?ypy138)) (<= 549755813888 ?ypy138) (<= 549755813888 ?x_2py139) (not (<= 549755813888 (xor_1 ?x_2py139 ?ypy138)))) :pattern ((xor_1 ?x_2py139 ?ypy138)) )) :named A1_358))
(assert (! (forall ((?x_2py140 Int)(?ypy139 Int)) (! (or (not (<= 0 ?x_2py140)) (not (<= 0 ?ypy139)) (<= 562949953421312 ?ypy139) (<= 562949953421312 ?x_2py140) (not (<= 562949953421312 (xor_1 ?x_2py140 ?ypy139)))) :pattern ((xor_1 ?x_2py140 ?ypy139)) )) :named A1_359))
(assert (! (forall ((?x_2py141 Int)(?ypy140 Int)) (! (or (not (<= 0 ?x_2py141)) (not (<= 0 ?ypy140)) (<= 562949953421312 ?ypy140) (not (<= 562949953421312 (or_1 ?x_2py141 ?ypy140))) (<= 562949953421312 ?x_2py141)) :pattern ((or_1 ?x_2py141 ?ypy140)) )) :named A1_360))
(assert (! (forall ((?x_2py142 Int)(?ypy141 Int)) (! (or (not (<= 0 ?x_2py142)) (not (<= 0 ?ypy141)) (<= 576460752303423488 ?ypy141) (<= 576460752303423488 ?x_2py142) (not (<= 576460752303423488 (or_1 ?x_2py142 ?ypy141)))) :pattern ((or_1 ?x_2py142 ?ypy141)) )) :named A1_361))
(assert (! (forall ((?x_2py143 Int)(?ypy142 Int)) (! (or (not (<= 0 ?x_2py143)) (not (<= 0 ?ypy142)) (<= 576460752303423488 ?ypy142) (<= 576460752303423488 ?x_2py143) (not (<= 576460752303423488 (xor_1 ?x_2py143 ?ypy142)))) :pattern ((xor_1 ?x_2py143 ?ypy142)) )) :named A1_362))
(assert (! (forall ((?x_2py144 Int)(?ypy143 Int)) (! (or (not (<= 0 ?x_2py144)) (not (<= 0 ?ypy143)) (<= 64 ?ypy143) (<= 64 ?x_2py144) (not (<= 64 (or_1 ?x_2py144 ?ypy143)))) :pattern ((or_1 ?x_2py144 ?ypy143)) )) :named A1_363))
(assert (! (forall ((?x_2py145 Int)(?ypy144 Int)) (! (or (not (<= 0 ?x_2py145)) (not (<= 0 ?ypy144)) (<= 64 ?ypy144) (<= 64 ?x_2py145) (not (<= 64 (xor_1 ?x_2py145 ?ypy144)))) :pattern ((xor_1 ?x_2py145 ?ypy144)) )) :named A1_364))
(assert (! (forall ((?x_2py146 Int)(?ypy145 Int)) (! (or (not (<= 0 ?x_2py146)) (not (<= 0 ?ypy145)) (<= 65536 ?x_2py146) (<= 65536 ?ypy145) (not (<= 65536 (xor_1 ?x_2py146 ?ypy145)))) :pattern ((xor_1 ?x_2py146 ?ypy145)) )) :named A1_365))
(assert (! (forall ((?x_2py147 Int)(?ypy146 Int)) (! (or (not (<= 0 ?x_2py147)) (not (<= 0 ?ypy146)) (<= 67108864 ?ypy146) (<= 67108864 ?x_2py147) (not (<= 67108864 (or_1 ?x_2py147 ?ypy146)))) :pattern ((or_1 ?x_2py147 ?ypy146)) )) :named A1_366))
(assert (! (forall ((?x_2py148 Int)(?ypy147 Int)) (! (or (not (<= 0 ?x_2py148)) (not (<= 0 ?ypy147)) (<= 67108864 ?ypy147) (<= 67108864 ?x_2py148) (not (<= 67108864 (xor_1 ?x_2py148 ?ypy147)))) :pattern ((xor_1 ?x_2py148 ?ypy147)) )) :named A1_367))
(assert (! (forall ((?x_2py149 Int)(?ypy148 Int)) (! (or (not (<= 0 ?x_2py149)) (not (<= 0 ?ypy148)) (<= 68719476736 ?ypy148) (<= 68719476736 ?x_2py149) (not (<= 68719476736 (or_1 ?x_2py149 ?ypy148)))) :pattern ((or_1 ?x_2py149 ?ypy148)) )) :named A1_368))
(assert (! (forall ((?x_2py150 Int)(?ypy149 Int)) (! (or (not (<= 0 ?x_2py150)) (not (<= 0 ?ypy149)) (<= 68719476736 ?ypy149) (<= 68719476736 ?x_2py150) (not (<= 68719476736 (xor_1 ?x_2py150 ?ypy149)))) :pattern ((xor_1 ?x_2py150 ?ypy149)) )) :named A1_369))
(assert (! (forall ((?x_2py151 Int)(?ypy150 Int)) (! (or (not (<= 0 ?x_2py151)) (not (<= 0 ?ypy150)) (<= 70368744177664 ?ypy150) (<= 70368744177664 ?x_2py151) (not (<= 70368744177664 (xor_1 ?x_2py151 ?ypy150)))) :pattern ((xor_1 ?x_2py151 ?ypy150)) )) :named A1_370))
(assert (! (forall ((?x_2py152 Int)(?ypy151 Int)) (! (or (not (<= 0 ?x_2py152)) (not (<= 0 ?ypy151)) (<= 70368744177664 ?ypy151) (not (<= 70368744177664 (or_1 ?x_2py152 ?ypy151))) (<= 70368744177664 ?x_2py152)) :pattern ((or_1 ?x_2py152 ?ypy151)) )) :named A1_371))
(assert (! (forall ((?x_2py153 Int)(?ypy152 Int)) (! (or (not (<= 0 ?x_2py153)) (not (<= 0 ?ypy152)) (<= 72057594037927936 ?ypy152) (<= 72057594037927936 ?x_2py153) (not (<= 72057594037927936 (xor_1 ?x_2py153 ?ypy152)))) :pattern ((xor_1 ?x_2py153 ?ypy152)) )) :named A1_372))
(assert (! (forall ((?x_2py154 Int)(?ypy153 Int)) (! (or (not (<= 0 ?x_2py154)) (not (<= 0 ?ypy153)) (<= 72057594037927936 ?ypy153) (not (<= 72057594037927936 (or_1 ?x_2py154 ?ypy153))) (<= 72057594037927936 ?x_2py154)) :pattern ((or_1 ?x_2py154 ?ypy153)) )) :named A1_373))
(assert (! (forall ((?x_2py155 Int)(?ypy154 Int)) (! (or (not (<= 0 ?x_2py155)) (not (<= 0 ?ypy154)) (<= 8 ?ypy154) (<= 8 ?x_2py155) (not (<= 8 (xor_1 ?x_2py155 ?ypy154)))) :pattern ((xor_1 ?x_2py155 ?ypy154)) )) :named A1_374))
(assert (! (forall ((?x_2py156 Int)(?ypy155 Int)) (! (or (not (<= 0 ?x_2py156)) (not (<= 0 ?ypy155)) (<= 8 ?ypy155) (not (<= 8 (or_1 ?x_2py156 ?ypy155))) (<= 8 ?x_2py156)) :pattern ((or_1 ?x_2py156 ?ypy155)) )) :named A1_375))
(assert (! (forall ((?x_2py157 Int)(?ypy156 Int)) (! (or (not (<= 0 ?x_2py157)) (not (<= 0 ?ypy156)) (<= 8192 ?ypy156) (<= 8192 ?x_2py157) (not (<= 8192 (xor_1 ?x_2py157 ?ypy156)))) :pattern ((xor_1 ?x_2py157 ?ypy156)) )) :named A1_376))
(assert (! (forall ((?x_2py158 Int)(?ypy157 Int)) (! (or (not (<= 0 ?x_2py158)) (not (<= 0 ?ypy157)) (<= 8192 ?ypy157) (not (<= 8192 (or_1 ?x_2py158 ?ypy157))) (<= 8192 ?x_2py158)) :pattern ((or_1 ?x_2py158 ?ypy157)) )) :named A1_377))
(assert (! (forall ((?x_2py159 Int)(?ypy158 Int)) (! (or (not (<= 0 ?x_2py159)) (not (<= 0 ?ypy158)) (<= 8388608 ?ypy158) (<= 8388608 ?x_2py159) (not (<= 8388608 (or_1 ?x_2py159 ?ypy158)))) :pattern ((or_1 ?x_2py159 ?ypy158)) )) :named A1_378))
(assert (! (forall ((?x_2py160 Int)(?ypy159 Int)) (! (or (not (<= 0 ?x_2py160)) (not (<= 0 ?ypy159)) (<= 8388608 ?ypy159) (<= 8388608 ?x_2py160) (not (<= 8388608 (xor_1 ?x_2py160 ?ypy159)))) :pattern ((xor_1 ?x_2py160 ?ypy159)) )) :named A1_379))
(assert (! (forall ((?x_2py161 Int)(?ypy160 Int)) (! (or (not (<= 0 ?x_2py161)) (not (<= 0 ?ypy160)) (<= 8589934592 ?ypy160) (<= 8589934592 ?x_2py161) (not (<= 8589934592 (xor_1 ?x_2py161 ?ypy160)))) :pattern ((xor_1 ?x_2py161 ?ypy160)) )) :named A1_380))
(assert (! (forall ((?x_2py162 Int)(?ypy161 Int)) (! (or (not (<= 0 ?x_2py162)) (not (<= 0 ?ypy161)) (<= 8589934592 ?ypy161) (not (<= 8589934592 (or_1 ?x_2py162 ?ypy161))) (<= 8589934592 ?x_2py162)) :pattern ((or_1 ?x_2py162 ?ypy161)) )) :named A1_381))
(assert (! (forall ((?x_2py163 Int)(?ypy162 Int)) (! (or (not (<= 0 ?x_2py163)) (not (<= 0 ?ypy162)) (<= 8796093022208 ?ypy162) (<= 8796093022208 ?x_2py163) (not (<= 8796093022208 (or_1 ?x_2py163 ?ypy162)))) :pattern ((or_1 ?x_2py163 ?ypy162)) )) :named A1_382))
(assert (! (forall ((?x_2py164 Int)(?ypy163 Int)) (! (or (not (<= 0 ?x_2py164)) (not (<= 0 ?ypy163)) (<= 8796093022208 ?ypy163) (<= 8796093022208 ?x_2py164) (not (<= 8796093022208 (xor_1 ?x_2py164 ?ypy163)))) :pattern ((xor_1 ?x_2py164 ?ypy163)) )) :named A1_383))
(assert (! (forall ((?x_2py165 Int)(?ypy164 Int)) (! (or (not (<= 0 ?x_2py165)) (not (<= 0 ?ypy164)) (<= 9007199254740992 ?ypy164) (<= 9007199254740992 ?x_2py165) (not (<= 9007199254740992 (xor_1 ?x_2py165 ?ypy164)))) :pattern ((xor_1 ?x_2py165 ?ypy164)) )) :named A1_384))
(assert (! (forall ((?x_2py166 Int)(?ypy165 Int)) (! (or (not (<= 0 ?x_2py166)) (not (<= 0 ?ypy165)) (<= 9007199254740992 ?ypy165) (not (<= 9007199254740992 (or_1 ?x_2py166 ?ypy165))) (<= 9007199254740992 ?x_2py166)) :pattern ((or_1 ?x_2py166 ?ypy165)) )) :named A1_385))
(assert (! (forall ((?x_2py167 Int)(?ypy166 Int)) (! (or (not (<= 0 ?x_2py167)) (not (<= 0 ?ypy166)) (<= 9223372036854775808 ?ypy166) (<= 9223372036854775808 ?x_2py167) (not (<= 9223372036854775808 (or_1 ?x_2py167 ?ypy166)))) :pattern ((or_1 ?x_2py167 ?ypy166)) )) :named A1_386))
(assert (! (forall ((?x_2py168 Int)(?ypy167 Int)) (! (or (not (<= 0 ?x_2py168)) (not (<= 0 ?ypy167)) (<= 9223372036854775808 ?ypy167) (<= 9223372036854775808 ?x_2py168) (not (<= 9223372036854775808 (xor_1 ?x_2py168 ?ypy167)))) :pattern ((xor_1 ?x_2py168 ?ypy167)) )) :named A1_387))
(assert (! (forall ((?x_2py169 Int)(?ypy168 Int)) (! (or (not (<= 0 ?x_2py169)) (not (<= 0 ?ypy168)) (= (x (+ ?x_2py169 ?ypy168) ?ypy168) (x ?x_2py169 ?ypy168))) :pattern ((x (+ ?x_2py169 ?ypy168) ?ypy168)) )) :named A1_388))
(assert (! (forall ((?x_2py170 Int)(?ypy169 Int)) (! (or (not (<= 0 ?x_2py170)) (not (<= 0 ?ypy169)) (= (x (+ ?ypy169 ?x_2py170) ?ypy169) (x ?x_2py170 ?ypy169))) :pattern ((x (+ ?ypy169 ?x_2py170) ?ypy169)) )) :named A1_389))
(assert (! (forall ((?x_2py171 Int)(?ypy170 Int)) (! (or (not (<= 0 ?x_2py171)) (not (<= 0 ?ypy170)) (and (<= (and_1 ?x_2py171 ?ypy170) ?x_2py171) (<= (and_1 ?x_2py171 ?ypy170) ?ypy170))) :pattern ((and_1 ?x_2py171 ?ypy170)) )) :named A1_390))
(assert (! (forall ((?x_2py172 Int)(?ypy171 Int)) (! (or (not (<= 0 ?x_2py172)) (not (<= 0 ?ypy171)) (and (<= 0 (or_1 ?x_2py172 ?ypy171)) (<= (or_1 ?x_2py172 ?ypy171) (+ ?x_2py172 ?ypy171)))) :pattern ((or_1 ?x_2py172 ?ypy171)) )) :named A1_391))
(assert (! (forall ((?x_2py173 Int)(?ypy172 Int)) (! (or (not (<= 0 ?x_2py173)) (not (<= 0 ?ypy172)) (and (<= ?x_2py173 (or_1 ?x_2py173 ?ypy172)) (<= ?ypy172 (or_1 ?x_2py173 ?ypy172)))) :pattern ((or_1 ?x_2py173 ?ypy172)) )) :named A1_392))
(assert (! (forall ((?x_2py174 Int)(?ypy173 Int)) (! (or (not (<= 0 ?x_2py174)) (not (<= 0 ?ypy173)) (not (<= 65536 (or_1 ?x_2py174 ?ypy173))) (<= 65536 ?x_2py174) (<= 65536 ?ypy173)) :pattern ((or_1 ?x_2py174 ?ypy173)) )) :named A1_393))
(assert (! (forall ((?x_2py175 Int)(?ypy174 Int)) (! (or (not (<= 0 ?ypy174)) (= (x (+ ?x_2py175 (* (- 1) ?ypy174)) ?ypy174) (x ?x_2py175 ?ypy174)) (not (<= 0 (+ ?x_2py175 (* (- 1) ?ypy174))))) :pattern ((x (- ?x_2py175 ?ypy174) ?ypy174)) )) :named A1_394))
(assert (! (forall ((?x_2py176 Int)(?ypy175 Int)) (! (or (not (<= ?x_2py176 0)) (<= ?ypy175 0) (and (not (<= (x ?x_2py176 ?ypy175) (* (- 1) ?ypy175))) (<= (x ?x_2py176 ?ypy175) 0))) :pattern ((x ?x_2py176 ?ypy175)) )) :named A1_395))
(assert (! (forall ((?x_2py177 Int)(?ypy176 Int)) (! (or (not (<= min_i4 (* ?ypy176 ?x_2py177))) (not (<= (* ?ypy176 ?x_2py177) max_i4)) (= (* ?ypy176 ?x_2py177) (mul_unchk_i4 ?x_2py177 ?ypy176))) :pattern ((mul_unchk_i4 ?x_2py177 ?ypy176)) )) :named A1_396))
(assert (! (forall ((?x_2py178 Int)(?ypy177 Int)) (! (or (not (<= min_i4 (+ ?x_2py178 ?ypy177))) (not (<= (+ ?x_2py178 ?ypy177) max_i4)) (= (+ ?x_2py178 ?ypy177) (add_unchk_i4 ?x_2py178 ?ypy177))) :pattern ((add_unchk_i4 ?x_2py178 ?ypy177)) )) :named A1_397))
(assert (! (forall ((?x_2py179 Int)(?ypy178 Int)) (! (or (not (<= min_i8 (* ?ypy178 ?x_2py179))) (not (<= (* ?ypy178 ?x_2py179) max_i8)) (= (* ?ypy178 ?x_2py179) (mul_unchk_i8 ?x_2py179 ?ypy178))) :pattern ((mul_unchk_i8 ?x_2py179 ?ypy178)) )) :named A1_398))
(assert (! (forall ((?x_2py180 Int)(?ypy179 Int)) (! (or (not (<= min_i8 (+ ?x_2py180 (* (- 1) ?ypy179)))) (not (<= (+ ?x_2py180 (* (- 1) ?ypy179)) max_i8)) (= (+ ?x_2py180 (* (- 1) ?ypy179)) (sub_unchk_i8 ?x_2py180 ?ypy179))) :pattern ((sub_unchk_i8 ?x_2py180 ?ypy179)) )) :named A1_399))
(assert (! (forall ((?x_2py181 Int)(?ypy180 Int)) (! (or (not (<= min_i8 (+ ?x_2py181 ?ypy180))) (not (<= (+ ?x_2py181 ?ypy180) max_i8)) (= (+ ?x_2py181 ?ypy180) (add_unchk_i8 ?x_2py181 ?ypy180))) :pattern ((add_unchk_i8 ?x_2py181 ?ypy180)) )) :named A1_400))
(assert (! (forall ((?x_2py182 Int)(?ypy181 Int)) (! (or (not (<= min_u4 (* ?ypy181 ?x_2py182))) (not (<= (* ?ypy181 ?x_2py182) max_u4)) (= (* ?ypy181 ?x_2py182) (mul_unchk_u4 ?x_2py182 ?ypy181))) :pattern ((mul_unchk_u4 ?x_2py182 ?ypy181)) )) :named A1_401))
(assert (! (forall ((?x_2py183 Int)(?ypy182 Int)) (! (or (not (<= min_u4 (+ ?x_2py183 ?ypy182))) (not (<= (+ ?x_2py183 ?ypy182) max_u4)) (= (+ ?x_2py183 ?ypy182) (add_unchk_u4 ?x_2py183 ?ypy182))) :pattern ((add_unchk_u4 ?x_2py183 ?ypy182)) )) :named A1_402))
(assert (! (forall ((?x_2py184 Int)(?ypy183 Int)) (! (or (not (<= min_u8 (* ?ypy183 ?x_2py184))) (not (<= (* ?ypy183 ?x_2py184) max_u8)) (= (* ?ypy183 ?x_2py184) (mul_unchk_u8 ?x_2py184 ?ypy183))) :pattern ((mul_unchk_u8 ?x_2py184 ?ypy183)) )) :named A1_403))
(assert (! (forall ((?x_2py185 Int)(?ypy184 Int)) (! (or (not (<= min_u8 (+ ?x_2py185 (* (- 1) ?ypy184)))) (not (<= (+ ?x_2py185 (* (- 1) ?ypy184)) max_u8)) (= (+ ?x_2py185 (* (- 1) ?ypy184)) (sub_unchk_u8 ?x_2py185 ?ypy184))) :pattern ((sub_unchk_u8 ?x_2py185 ?ypy184)) )) :named A1_404))
(assert (! (forall ((?x_2py186 Int)(?ypy185 Int)) (! (or (not (<= min_u8 (+ ?x_2py186 ?ypy185))) (not (<= (+ ?x_2py186 ?ypy185) max_u8)) (= (+ ?x_2py186 ?ypy185) (add_unchk_u8 ?x_2py186 ?ypy185))) :pattern ((add_unchk_u8 ?x_2py186 ?ypy185)) )) :named A1_405))
(assert (! (forall ((?x_2py187 Int)) (! (= (and_1 ?x_2py187 (not_1 0)) ?x_2py187) :pattern ((and_1 ?x_2py187 (not_1 0))) )) :named A1_406))
(assert (! (forall ((?x_2py188 Int)) (! (= (and_1 ?x_2py188 (not_1 ?x_2py188)) 0) :pattern ((and_1 ?x_2py188 (not_1 ?x_2py188))) )) :named A1_407))
(assert (! (forall ((?x_2py189 Int)) (! (= (and_1 ?x_2py189 0) 0) :pattern ((and_1 ?x_2py189 0)) )) :named A1_408))
(assert (! (forall ((?x_2py190 Int)) (! (= (not_1 (not_1 ?x_2py190)) ?x_2py190) :pattern ((not_1 (not_1 ?x_2py190))) )) :named A1_409))
(assert (! (forall ((?x_2py191 Int)) (! (= (or_1 ?x_2py191 (not_1 0)) (not_1 0)) :pattern ((or_1 ?x_2py191 (not_1 0))) )) :named A1_410))
(assert (! (forall ((?x_2py192 Int)) (! (= (or_1 ?x_2py192 (not_1 ?x_2py192)) (not_1 0)) :pattern ((or_1 ?x_2py192 (not_1 ?x_2py192))) )) :named A1_411))
(assert (! (forall ((?x_2py193 Int)) (! (= (or_1 ?x_2py193 0) ?x_2py193) :pattern ((or_1 ?x_2py193 0)) )) :named A1_412))
(assert (! (forall ((?x_2py194 Int)) (! (= (shl ?x_2py194 0) ?x_2py194) :pattern ((shl ?x_2py194 0)) )) :named A1_413))
(assert (! (forall ((?x_2py195 Int)) (! (= (shl ?x_2py195 1) (* 2 ?x_2py195)) :pattern ((shl ?x_2py195 1)) )) :named A1_414))
(assert (! (forall ((?x_2py196 Int)) (! (= (shl ?x_2py196 10) (* 1024 ?x_2py196)) :pattern ((shl ?x_2py196 10)) )) :named A1_415))
(assert (! (forall ((?x_2py197 Int)) (! (= (shl ?x_2py197 11) (* 2048 ?x_2py197)) :pattern ((shl ?x_2py197 11)) )) :named A1_416))
(assert (! (forall ((?x_2py198 Int)) (! (= (shl ?x_2py198 12) (* 4096 ?x_2py198)) :pattern ((shl ?x_2py198 12)) )) :named A1_417))
(assert (! (forall ((?x_2py199 Int)) (! (= (shl ?x_2py199 13) (* 8192 ?x_2py199)) :pattern ((shl ?x_2py199 13)) )) :named A1_418))
(assert (! (forall ((?x_2py200 Int)) (! (= (shl ?x_2py200 14) (* 16384 ?x_2py200)) :pattern ((shl ?x_2py200 14)) )) :named A1_419))
(assert (! (forall ((?x_2py201 Int)) (! (= (shl ?x_2py201 15) (* 32768 ?x_2py201)) :pattern ((shl ?x_2py201 15)) )) :named A1_420))
(assert (! (forall ((?x_2py202 Int)) (! (= (shl ?x_2py202 16) (* 65536 ?x_2py202)) :pattern ((shl ?x_2py202 16)) )) :named A1_421))
(assert (! (forall ((?x_2py203 Int)) (! (= (shl ?x_2py203 17) (* 131072 ?x_2py203)) :pattern ((shl ?x_2py203 17)) )) :named A1_422))
(assert (! (forall ((?x_2py204 Int)) (! (= (shl ?x_2py204 18) (* 262144 ?x_2py204)) :pattern ((shl ?x_2py204 18)) )) :named A1_423))
(assert (! (forall ((?x_2py205 Int)) (! (= (shl ?x_2py205 19) (* 524288 ?x_2py205)) :pattern ((shl ?x_2py205 19)) )) :named A1_424))
(assert (! (forall ((?x_2py206 Int)) (! (= (shl ?x_2py206 2) (* 4 ?x_2py206)) :pattern ((shl ?x_2py206 2)) )) :named A1_425))
(assert (! (forall ((?x_2py207 Int)) (! (= (shl ?x_2py207 20) (* 1048576 ?x_2py207)) :pattern ((shl ?x_2py207 20)) )) :named A1_426))
(assert (! (forall ((?x_2py208 Int)) (! (= (shl ?x_2py208 21) (* 2097152 ?x_2py208)) :pattern ((shl ?x_2py208 21)) )) :named A1_427))
(assert (! (forall ((?x_2py209 Int)) (! (= (shl ?x_2py209 22) (* 4194304 ?x_2py209)) :pattern ((shl ?x_2py209 22)) )) :named A1_428))
(assert (! (forall ((?x_2py210 Int)) (! (= (shl ?x_2py210 23) (* 8388608 ?x_2py210)) :pattern ((shl ?x_2py210 23)) )) :named A1_429))
(assert (! (forall ((?x_2py211 Int)) (! (= (shl ?x_2py211 24) (* 16777216 ?x_2py211)) :pattern ((shl ?x_2py211 24)) )) :named A1_430))
(assert (! (forall ((?x_2py212 Int)) (! (= (shl ?x_2py212 25) (* 33554432 ?x_2py212)) :pattern ((shl ?x_2py212 25)) )) :named A1_431))
(assert (! (forall ((?x_2py213 Int)) (! (= (shl ?x_2py213 26) (* 67108864 ?x_2py213)) :pattern ((shl ?x_2py213 26)) )) :named A1_432))
(assert (! (forall ((?x_2py214 Int)) (! (= (shl ?x_2py214 27) (* 134217728 ?x_2py214)) :pattern ((shl ?x_2py214 27)) )) :named A1_433))
(assert (! (forall ((?x_2py215 Int)) (! (= (shl ?x_2py215 28) (* 268435456 ?x_2py215)) :pattern ((shl ?x_2py215 28)) )) :named A1_434))
(assert (! (forall ((?x_2py216 Int)) (! (= (shl ?x_2py216 29) (* 536870912 ?x_2py216)) :pattern ((shl ?x_2py216 29)) )) :named A1_435))
(assert (! (forall ((?x_2py217 Int)) (! (= (shl ?x_2py217 3) (* 8 ?x_2py217)) :pattern ((shl ?x_2py217 3)) )) :named A1_436))
(assert (! (forall ((?x_2py218 Int)) (! (= (shl ?x_2py218 30) (* 1073741824 ?x_2py218)) :pattern ((shl ?x_2py218 30)) )) :named A1_437))
(assert (! (forall ((?x_2py219 Int)) (! (= (shl ?x_2py219 31) (* 2147483648 ?x_2py219)) :pattern ((shl ?x_2py219 31)) )) :named A1_438))
(assert (! (forall ((?x_2py220 Int)) (! (= (shl ?x_2py220 32) (* 4294967296 ?x_2py220)) :pattern ((shl ?x_2py220 32)) )) :named A1_439))
(assert (! (forall ((?x_2py221 Int)) (! (= (shl ?x_2py221 33) (* 8589934592 ?x_2py221)) :pattern ((shl ?x_2py221 33)) )) :named A1_440))
(assert (! (forall ((?x_2py222 Int)) (! (= (shl ?x_2py222 34) (* 17179869184 ?x_2py222)) :pattern ((shl ?x_2py222 34)) )) :named A1_441))
(assert (! (forall ((?x_2py223 Int)) (! (= (shl ?x_2py223 35) (* 34359738368 ?x_2py223)) :pattern ((shl ?x_2py223 35)) )) :named A1_442))
(assert (! (forall ((?x_2py224 Int)) (! (= (shl ?x_2py224 36) (* 68719476736 ?x_2py224)) :pattern ((shl ?x_2py224 36)) )) :named A1_443))
(assert (! (forall ((?x_2py225 Int)) (! (= (shl ?x_2py225 37) (* 137438953472 ?x_2py225)) :pattern ((shl ?x_2py225 37)) )) :named A1_444))
(assert (! (forall ((?x_2py226 Int)) (! (= (shl ?x_2py226 38) (* 274877906944 ?x_2py226)) :pattern ((shl ?x_2py226 38)) )) :named A1_445))
(assert (! (forall ((?x_2py227 Int)) (! (= (shl ?x_2py227 39) (* 549755813888 ?x_2py227)) :pattern ((shl ?x_2py227 39)) )) :named A1_446))
(assert (! (forall ((?x_2py228 Int)) (! (= (shl ?x_2py228 4) (* 16 ?x_2py228)) :pattern ((shl ?x_2py228 4)) )) :named A1_447))
(assert (! (forall ((?x_2py229 Int)) (! (= (shl ?x_2py229 40) (* 1099511627776 ?x_2py229)) :pattern ((shl ?x_2py229 40)) )) :named A1_448))
(assert (! (forall ((?x_2py230 Int)) (! (= (shl ?x_2py230 41) (* 2199023255552 ?x_2py230)) :pattern ((shl ?x_2py230 41)) )) :named A1_449))
(assert (! (forall ((?x_2py231 Int)) (! (= (shl ?x_2py231 42) (* 4398046511104 ?x_2py231)) :pattern ((shl ?x_2py231 42)) )) :named A1_450))
(assert (! (forall ((?x_2py232 Int)) (! (= (shl ?x_2py232 43) (* 8796093022208 ?x_2py232)) :pattern ((shl ?x_2py232 43)) )) :named A1_451))
(assert (! (forall ((?x_2py233 Int)) (! (= (shl ?x_2py233 44) (* 17592186044416 ?x_2py233)) :pattern ((shl ?x_2py233 44)) )) :named A1_452))
(assert (! (forall ((?x_2py234 Int)) (! (= (shl ?x_2py234 45) (* 35184372088832 ?x_2py234)) :pattern ((shl ?x_2py234 45)) )) :named A1_453))
(assert (! (forall ((?x_2py235 Int)) (! (= (shl ?x_2py235 46) (* 70368744177664 ?x_2py235)) :pattern ((shl ?x_2py235 46)) )) :named A1_454))
(assert (! (forall ((?x_2py236 Int)) (! (= (shl ?x_2py236 47) (* 140737488355328 ?x_2py236)) :pattern ((shl ?x_2py236 47)) )) :named A1_455))
(assert (! (forall ((?x_2py237 Int)) (! (= (shl ?x_2py237 48) (* 281474976710656 ?x_2py237)) :pattern ((shl ?x_2py237 48)) )) :named A1_456))
(assert (! (forall ((?x_2py238 Int)) (! (= (shl ?x_2py238 49) (* 562949953421312 ?x_2py238)) :pattern ((shl ?x_2py238 49)) )) :named A1_457))
(assert (! (forall ((?x_2py239 Int)) (! (= (shl ?x_2py239 5) (* 32 ?x_2py239)) :pattern ((shl ?x_2py239 5)) )) :named A1_458))
(assert (! (forall ((?x_2py240 Int)) (! (= (shl ?x_2py240 50) (* 1125899906842624 ?x_2py240)) :pattern ((shl ?x_2py240 50)) )) :named A1_459))
(assert (! (forall ((?x_2py241 Int)) (! (= (shl ?x_2py241 51) (* 2251799813685248 ?x_2py241)) :pattern ((shl ?x_2py241 51)) )) :named A1_460))
(assert (! (forall ((?x_2py242 Int)) (! (= (shl ?x_2py242 52) (* 4503599627370496 ?x_2py242)) :pattern ((shl ?x_2py242 52)) )) :named A1_461))
(assert (! (forall ((?x_2py243 Int)) (! (= (shl ?x_2py243 53) (* 9007199254740992 ?x_2py243)) :pattern ((shl ?x_2py243 53)) )) :named A1_462))
(assert (! (forall ((?x_2py244 Int)) (! (= (shl ?x_2py244 54) (* 18014398509481984 ?x_2py244)) :pattern ((shl ?x_2py244 54)) )) :named A1_463))
(assert (! (forall ((?x_2py245 Int)) (! (= (shl ?x_2py245 55) (* 36028797018963968 ?x_2py245)) :pattern ((shl ?x_2py245 55)) )) :named A1_464))
(assert (! (forall ((?x_2py246 Int)) (! (= (shl ?x_2py246 56) (* 72057594037927936 ?x_2py246)) :pattern ((shl ?x_2py246 56)) )) :named A1_465))
(assert (! (forall ((?x_2py247 Int)) (! (= (shl ?x_2py247 57) (* 144115188075855872 ?x_2py247)) :pattern ((shl ?x_2py247 57)) )) :named A1_466))
(assert (! (forall ((?x_2py248 Int)) (! (= (shl ?x_2py248 58) (* 288230376151711744 ?x_2py248)) :pattern ((shl ?x_2py248 58)) )) :named A1_467))
(assert (! (forall ((?x_2py249 Int)) (! (= (shl ?x_2py249 59) (* 576460752303423488 ?x_2py249)) :pattern ((shl ?x_2py249 59)) )) :named A1_468))
(assert (! (forall ((?x_2py250 Int)) (! (= (shl ?x_2py250 6) (* 64 ?x_2py250)) :pattern ((shl ?x_2py250 6)) )) :named A1_469))
(assert (! (forall ((?x_2py251 Int)) (! (= (shl ?x_2py251 60) (* 1152921504606846976 ?x_2py251)) :pattern ((shl ?x_2py251 60)) )) :named A1_470))
(assert (! (forall ((?x_2py252 Int)) (! (= (shl ?x_2py252 61) (* 2305843009213693952 ?x_2py252)) :pattern ((shl ?x_2py252 61)) )) :named A1_471))
(assert (! (forall ((?x_2py253 Int)) (! (= (shl ?x_2py253 62) (* 4611686018427387904 ?x_2py253)) :pattern ((shl ?x_2py253 62)) )) :named A1_472))
(assert (! (forall ((?x_2py254 Int)) (! (= (shl ?x_2py254 63) (* 9223372036854775808 ?x_2py254)) :pattern ((shl ?x_2py254 63)) )) :named A1_473))
(assert (! (forall ((?x_2py255 Int)) (! (= (shl ?x_2py255 7) (* 128 ?x_2py255)) :pattern ((shl ?x_2py255 7)) )) :named A1_474))
(assert (! (forall ((?x_2py256 Int)) (! (= (shl ?x_2py256 8) (* 256 ?x_2py256)) :pattern ((shl ?x_2py256 8)) )) :named A1_475))
(assert (! (forall ((?x_2py257 Int)) (! (= (shl ?x_2py257 9) (* 512 ?x_2py257)) :pattern ((shl ?x_2py257 9)) )) :named A1_476))
(assert (! (forall ((?x_2py258 Int)) (! (= (shr ?x_2py258 0) (x_1 ?x_2py258 1)) :pattern ((shr ?x_2py258 0)) )) :named A1_477))
(assert (! (forall ((?x_2py259 Int)) (! (= (shr ?x_2py259 1) (x_1 ?x_2py259 2)) :pattern ((shr ?x_2py259 1)) )) :named A1_478))
(assert (! (forall ((?x_2py260 Int)) (! (= (shr ?x_2py260 10) (x_1 ?x_2py260 1024)) :pattern ((shr ?x_2py260 10)) )) :named A1_479))
(assert (! (forall ((?x_2py261 Int)) (! (= (shr ?x_2py261 11) (x_1 ?x_2py261 2048)) :pattern ((shr ?x_2py261 11)) )) :named A1_480))
(assert (! (forall ((?x_2py262 Int)) (! (= (shr ?x_2py262 12) (x_1 ?x_2py262 4096)) :pattern ((shr ?x_2py262 12)) )) :named A1_481))
(assert (! (forall ((?x_2py263 Int)) (! (= (shr ?x_2py263 13) (x_1 ?x_2py263 8192)) :pattern ((shr ?x_2py263 13)) )) :named A1_482))
(assert (! (forall ((?x_2py264 Int)) (! (= (shr ?x_2py264 14) (x_1 ?x_2py264 16384)) :pattern ((shr ?x_2py264 14)) )) :named A1_483))
(assert (! (forall ((?x_2py265 Int)) (! (= (shr ?x_2py265 15) (x_1 ?x_2py265 32768)) :pattern ((shr ?x_2py265 15)) )) :named A1_484))
(assert (! (forall ((?x_2py266 Int)) (! (= (shr ?x_2py266 16) (x_1 ?x_2py266 65536)) :pattern ((shr ?x_2py266 16)) )) :named A1_485))
(assert (! (forall ((?x_2py267 Int)) (! (= (shr ?x_2py267 17) (x_1 ?x_2py267 131072)) :pattern ((shr ?x_2py267 17)) )) :named A1_486))
(assert (! (forall ((?x_2py268 Int)) (! (= (shr ?x_2py268 18) (x_1 ?x_2py268 262144)) :pattern ((shr ?x_2py268 18)) )) :named A1_487))
(assert (! (forall ((?x_2py269 Int)) (! (= (shr ?x_2py269 19) (x_1 ?x_2py269 524288)) :pattern ((shr ?x_2py269 19)) )) :named A1_488))
(assert (! (forall ((?x_2py270 Int)) (! (= (shr ?x_2py270 2) (x_1 ?x_2py270 4)) :pattern ((shr ?x_2py270 2)) )) :named A1_489))
(assert (! (forall ((?x_2py271 Int)) (! (= (shr ?x_2py271 20) (x_1 ?x_2py271 1048576)) :pattern ((shr ?x_2py271 20)) )) :named A1_490))
(assert (! (forall ((?x_2py272 Int)) (! (= (shr ?x_2py272 21) (x_1 ?x_2py272 2097152)) :pattern ((shr ?x_2py272 21)) )) :named A1_491))
(assert (! (forall ((?x_2py273 Int)) (! (= (shr ?x_2py273 22) (x_1 ?x_2py273 4194304)) :pattern ((shr ?x_2py273 22)) )) :named A1_492))
(assert (! (forall ((?x_2py274 Int)) (! (= (shr ?x_2py274 23) (x_1 ?x_2py274 8388608)) :pattern ((shr ?x_2py274 23)) )) :named A1_493))
(assert (! (forall ((?x_2py275 Int)) (! (= (shr ?x_2py275 24) (x_1 ?x_2py275 16777216)) :pattern ((shr ?x_2py275 24)) )) :named A1_494))
(assert (! (forall ((?x_2py276 Int)) (! (= (shr ?x_2py276 25) (x_1 ?x_2py276 33554432)) :pattern ((shr ?x_2py276 25)) )) :named A1_495))
(assert (! (forall ((?x_2py277 Int)) (! (= (shr ?x_2py277 26) (x_1 ?x_2py277 67108864)) :pattern ((shr ?x_2py277 26)) )) :named A1_496))
(assert (! (forall ((?x_2py278 Int)) (! (= (shr ?x_2py278 27) (x_1 ?x_2py278 134217728)) :pattern ((shr ?x_2py278 27)) )) :named A1_497))
(assert (! (forall ((?x_2py279 Int)) (! (= (shr ?x_2py279 28) (x_1 ?x_2py279 268435456)) :pattern ((shr ?x_2py279 28)) )) :named A1_498))
(assert (! (forall ((?x_2py280 Int)) (! (= (shr ?x_2py280 29) (x_1 ?x_2py280 536870912)) :pattern ((shr ?x_2py280 29)) )) :named A1_499))
(assert (! (forall ((?x_2py281 Int)) (! (= (shr ?x_2py281 3) (x_1 ?x_2py281 8)) :pattern ((shr ?x_2py281 3)) )) :named A1_500))
(assert (! (forall ((?x_2py282 Int)) (! (= (shr ?x_2py282 30) (x_1 ?x_2py282 1073741824)) :pattern ((shr ?x_2py282 30)) )) :named A1_501))
(assert (! (forall ((?x_2py283 Int)) (! (= (shr ?x_2py283 31) (x_1 ?x_2py283 2147483648)) :pattern ((shr ?x_2py283 31)) )) :named A1_502))
(assert (! (forall ((?x_2py284 Int)) (! (= (shr ?x_2py284 32) (x_1 ?x_2py284 4294967296)) :pattern ((shr ?x_2py284 32)) )) :named A1_503))
(assert (! (forall ((?x_2py285 Int)) (! (= (shr ?x_2py285 33) (x_1 ?x_2py285 8589934592)) :pattern ((shr ?x_2py285 33)) )) :named A1_504))
(assert (! (forall ((?x_2py286 Int)) (! (= (shr ?x_2py286 34) (x_1 ?x_2py286 17179869184)) :pattern ((shr ?x_2py286 34)) )) :named A1_505))
(assert (! (forall ((?x_2py287 Int)) (! (= (shr ?x_2py287 35) (x_1 ?x_2py287 34359738368)) :pattern ((shr ?x_2py287 35)) )) :named A1_506))
(assert (! (forall ((?x_2py288 Int)) (! (= (shr ?x_2py288 36) (x_1 ?x_2py288 68719476736)) :pattern ((shr ?x_2py288 36)) )) :named A1_507))
(assert (! (forall ((?x_2py289 Int)) (! (= (shr ?x_2py289 37) (x_1 ?x_2py289 137438953472)) :pattern ((shr ?x_2py289 37)) )) :named A1_508))
(assert (! (forall ((?x_2py290 Int)) (! (= (shr ?x_2py290 38) (x_1 ?x_2py290 274877906944)) :pattern ((shr ?x_2py290 38)) )) :named A1_509))
(assert (! (forall ((?x_2py291 Int)) (! (= (shr ?x_2py291 39) (x_1 ?x_2py291 549755813888)) :pattern ((shr ?x_2py291 39)) )) :named A1_510))
(assert (! (forall ((?x_2py292 Int)) (! (= (shr ?x_2py292 4) (x_1 ?x_2py292 16)) :pattern ((shr ?x_2py292 4)) )) :named A1_511))
(assert (! (forall ((?x_2py293 Int)) (! (= (shr ?x_2py293 40) (x_1 ?x_2py293 1099511627776)) :pattern ((shr ?x_2py293 40)) )) :named A1_512))
(assert (! (forall ((?x_2py294 Int)) (! (= (shr ?x_2py294 41) (x_1 ?x_2py294 2199023255552)) :pattern ((shr ?x_2py294 41)) )) :named A1_513))
(assert (! (forall ((?x_2py295 Int)) (! (= (shr ?x_2py295 42) (x_1 ?x_2py295 4398046511104)) :pattern ((shr ?x_2py295 42)) )) :named A1_514))
(assert (! (forall ((?x_2py296 Int)) (! (= (shr ?x_2py296 43) (x_1 ?x_2py296 8796093022208)) :pattern ((shr ?x_2py296 43)) )) :named A1_515))
(assert (! (forall ((?x_2py297 Int)) (! (= (shr ?x_2py297 44) (x_1 ?x_2py297 17592186044416)) :pattern ((shr ?x_2py297 44)) )) :named A1_516))
(assert (! (forall ((?x_2py298 Int)) (! (= (shr ?x_2py298 45) (x_1 ?x_2py298 35184372088832)) :pattern ((shr ?x_2py298 45)) )) :named A1_517))
(assert (! (forall ((?x_2py299 Int)) (! (= (shr ?x_2py299 46) (x_1 ?x_2py299 70368744177664)) :pattern ((shr ?x_2py299 46)) )) :named A1_518))
(assert (! (forall ((?x_2py300 Int)) (! (= (shr ?x_2py300 47) (x_1 ?x_2py300 140737488355328)) :pattern ((shr ?x_2py300 47)) )) :named A1_519))
(assert (! (forall ((?x_2py301 Int)) (! (= (shr ?x_2py301 48) (x_1 ?x_2py301 281474976710656)) :pattern ((shr ?x_2py301 48)) )) :named A1_520))
(assert (! (forall ((?x_2py302 Int)) (! (= (shr ?x_2py302 49) (x_1 ?x_2py302 562949953421312)) :pattern ((shr ?x_2py302 49)) )) :named A1_521))
(assert (! (forall ((?x_2py303 Int)) (! (= (shr ?x_2py303 5) (x_1 ?x_2py303 32)) :pattern ((shr ?x_2py303 5)) )) :named A1_522))
(assert (! (forall ((?x_2py304 Int)) (! (= (shr ?x_2py304 50) (x_1 ?x_2py304 1125899906842624)) :pattern ((shr ?x_2py304 50)) )) :named A1_523))
(assert (! (forall ((?x_2py305 Int)) (! (= (shr ?x_2py305 51) (x_1 ?x_2py305 2251799813685248)) :pattern ((shr ?x_2py305 51)) )) :named A1_524))
(assert (! (forall ((?x_2py306 Int)) (! (= (shr ?x_2py306 52) (x_1 ?x_2py306 4503599627370496)) :pattern ((shr ?x_2py306 52)) )) :named A1_525))
(assert (! (forall ((?x_2py307 Int)) (! (= (shr ?x_2py307 53) (x_1 ?x_2py307 9007199254740992)) :pattern ((shr ?x_2py307 53)) )) :named A1_526))
(assert (! (forall ((?x_2py308 Int)) (! (= (shr ?x_2py308 54) (x_1 ?x_2py308 18014398509481984)) :pattern ((shr ?x_2py308 54)) )) :named A1_527))
(assert (! (forall ((?x_2py309 Int)) (! (= (shr ?x_2py309 55) (x_1 ?x_2py309 36028797018963968)) :pattern ((shr ?x_2py309 55)) )) :named A1_528))
(assert (! (forall ((?x_2py310 Int)) (! (= (shr ?x_2py310 56) (x_1 ?x_2py310 72057594037927936)) :pattern ((shr ?x_2py310 56)) )) :named A1_529))
(assert (! (forall ((?x_2py311 Int)) (! (= (shr ?x_2py311 57) (x_1 ?x_2py311 144115188075855872)) :pattern ((shr ?x_2py311 57)) )) :named A1_530))
(assert (! (forall ((?x_2py312 Int)) (! (= (shr ?x_2py312 58) (x_1 ?x_2py312 288230376151711744)) :pattern ((shr ?x_2py312 58)) )) :named A1_531))
(assert (! (forall ((?x_2py313 Int)) (! (= (shr ?x_2py313 59) (x_1 ?x_2py313 576460752303423488)) :pattern ((shr ?x_2py313 59)) )) :named A1_532))
(assert (! (forall ((?x_2py314 Int)) (! (= (shr ?x_2py314 6) (x_1 ?x_2py314 64)) :pattern ((shr ?x_2py314 6)) )) :named A1_533))
(assert (! (forall ((?x_2py315 Int)) (! (= (shr ?x_2py315 60) (x_1 ?x_2py315 1152921504606846976)) :pattern ((shr ?x_2py315 60)) )) :named A1_534))
(assert (! (forall ((?x_2py316 Int)) (! (= (shr ?x_2py316 61) (x_1 ?x_2py316 2305843009213693952)) :pattern ((shr ?x_2py316 61)) )) :named A1_535))
(assert (! (forall ((?x_2py317 Int)) (! (= (shr ?x_2py317 62) (x_1 ?x_2py317 4611686018427387904)) :pattern ((shr ?x_2py317 62)) )) :named A1_536))
(assert (! (forall ((?x_2py318 Int)) (! (= (shr ?x_2py318 63) (x_1 ?x_2py318 9223372036854775808)) :pattern ((shr ?x_2py318 63)) )) :named A1_537))
(assert (! (forall ((?x_2py319 Int)) (! (= (shr ?x_2py319 7) (x_1 ?x_2py319 128)) :pattern ((shr ?x_2py319 7)) )) :named A1_538))
(assert (! (forall ((?x_2py320 Int)) (! (= (shr ?x_2py320 8) (x_1 ?x_2py320 256)) :pattern ((shr ?x_2py320 8)) )) :named A1_539))
(assert (! (forall ((?x_2py321 Int)) (! (= (shr ?x_2py321 9) (x_1 ?x_2py321 512)) :pattern ((shr ?x_2py321 9)) )) :named A1_540))
(assert (! (forall ((?x_2py322 Int)) (! (= (x ?x_2py322 1) (and_1 ?x_2py322 0)) :pattern ((x ?x_2py322 1) (and_1 ?x_2py322 0)) )) :named A1_541))
(assert (! (forall ((?x_2py323 Int)) (! (= (x ?x_2py323 1024) (and_1 ?x_2py323 1023)) :pattern ((x ?x_2py323 1024) (and_1 ?x_2py323 1023)) )) :named A1_542))
(assert (! (forall ((?x_2py324 Int)) (! (= (x ?x_2py324 1048576) (and_1 ?x_2py324 1048575)) :pattern ((x ?x_2py324 1048576) (and_1 ?x_2py324 1048575)) )) :named A1_543))
(assert (! (forall ((?x_2py325 Int)) (! (= (x ?x_2py325 1073741824) (and_1 ?x_2py325 1073741823)) :pattern ((x ?x_2py325 1073741824) (and_1 ?x_2py325 1073741823)) )) :named A1_544))
(assert (! (forall ((?x_2py326 Int)) (! (= (x ?x_2py326 1099511627776) (and_1 ?x_2py326 1099511627775)) :pattern ((x ?x_2py326 1099511627776) (and_1 ?x_2py326 1099511627775)) )) :named A1_545))
(assert (! (forall ((?x_2py327 Int)) (! (= (x ?x_2py327 1125899906842624) (and_1 ?x_2py327 1125899906842623)) :pattern ((x ?x_2py327 1125899906842624) (and_1 ?x_2py327 1125899906842623)) )) :named A1_546))
(assert (! (forall ((?x_2py328 Int)) (! (= (x ?x_2py328 1152921504606846976) (and_1 ?x_2py328 1152921504606846975)) :pattern ((x ?x_2py328 1152921504606846976) (and_1 ?x_2py328 1152921504606846975)) )) :named A1_547))
(assert (! (forall ((?x_2py329 Int)) (! (= (x ?x_2py329 128) (and_1 ?x_2py329 127)) :pattern ((x ?x_2py329 128) (and_1 ?x_2py329 127)) )) :named A1_548))
(assert (! (forall ((?x_2py330 Int)) (! (= (x ?x_2py330 131072) (and_1 ?x_2py330 131071)) :pattern ((x ?x_2py330 131072) (and_1 ?x_2py330 131071)) )) :named A1_549))
(assert (! (forall ((?x_2py331 Int)) (! (= (x ?x_2py331 134217728) (and_1 ?x_2py331 134217727)) :pattern ((x ?x_2py331 134217728) (and_1 ?x_2py331 134217727)) )) :named A1_550))
(assert (! (forall ((?x_2py332 Int)) (! (= (x ?x_2py332 137438953472) (and_1 ?x_2py332 137438953471)) :pattern ((x ?x_2py332 137438953472) (and_1 ?x_2py332 137438953471)) )) :named A1_551))
(assert (! (forall ((?x_2py333 Int)) (! (= (x ?x_2py333 140737488355328) (and_1 ?x_2py333 140737488355327)) :pattern ((x ?x_2py333 140737488355328) (and_1 ?x_2py333 140737488355327)) )) :named A1_552))
(assert (! (forall ((?x_2py334 Int)) (! (= (x ?x_2py334 144115188075855872) (and_1 ?x_2py334 144115188075855871)) :pattern ((x ?x_2py334 144115188075855872) (and_1 ?x_2py334 144115188075855871)) )) :named A1_553))
(assert (! (forall ((?x_2py335 Int)) (! (= (x ?x_2py335 16) (and_1 ?x_2py335 15)) :pattern ((x ?x_2py335 16) (and_1 ?x_2py335 15)) )) :named A1_554))
(assert (! (forall ((?x_2py336 Int)) (! (= (x ?x_2py336 16384) (and_1 ?x_2py336 16383)) :pattern ((x ?x_2py336 16384) (and_1 ?x_2py336 16383)) )) :named A1_555))
(assert (! (forall ((?x_2py337 Int)) (! (= (x ?x_2py337 16777216) (and_1 ?x_2py337 16777215)) :pattern ((x ?x_2py337 16777216) (and_1 ?x_2py337 16777215)) )) :named A1_556))
(assert (! (forall ((?x_2py338 Int)) (! (= (x ?x_2py338 17179869184) (and_1 ?x_2py338 17179869183)) :pattern ((x ?x_2py338 17179869184) (and_1 ?x_2py338 17179869183)) )) :named A1_557))
(assert (! (forall ((?x_2py339 Int)) (! (= (x ?x_2py339 17592186044416) (and_1 ?x_2py339 17592186044415)) :pattern ((x ?x_2py339 17592186044416) (and_1 ?x_2py339 17592186044415)) )) :named A1_558))
(assert (! (forall ((?x_2py340 Int)) (! (= (x ?x_2py340 18014398509481984) (and_1 ?x_2py340 18014398509481983)) :pattern ((x ?x_2py340 18014398509481984) (and_1 ?x_2py340 18014398509481983)) )) :named A1_559))
(assert (! (forall ((?x_2py341 Int)) (! (= (x ?x_2py341 2) (and_1 ?x_2py341 1)) :pattern ((x ?x_2py341 2) (and_1 ?x_2py341 1)) )) :named A1_560))
(assert (! (forall ((?x_2py342 Int)) (! (= (x ?x_2py342 2048) (and_1 ?x_2py342 2047)) :pattern ((x ?x_2py342 2048) (and_1 ?x_2py342 2047)) )) :named A1_561))
(assert (! (forall ((?x_2py343 Int)) (! (= (x ?x_2py343 2097152) (and_1 ?x_2py343 2097151)) :pattern ((x ?x_2py343 2097152) (and_1 ?x_2py343 2097151)) )) :named A1_562))
(assert (! (forall ((?x_2py344 Int)) (! (= (x ?x_2py344 2147483648) (and_1 ?x_2py344 2147483647)) :pattern ((x ?x_2py344 2147483648) (and_1 ?x_2py344 2147483647)) )) :named A1_563))
(assert (! (forall ((?x_2py345 Int)) (! (= (x ?x_2py345 2199023255552) (and_1 ?x_2py345 2199023255551)) :pattern ((x ?x_2py345 2199023255552) (and_1 ?x_2py345 2199023255551)) )) :named A1_564))
(assert (! (forall ((?x_2py346 Int)) (! (= (x ?x_2py346 2251799813685248) (and_1 ?x_2py346 2251799813685247)) :pattern ((x ?x_2py346 2251799813685248) (and_1 ?x_2py346 2251799813685247)) )) :named A1_565))
(assert (! (forall ((?x_2py347 Int)) (! (= (x ?x_2py347 2305843009213693952) (and_1 ?x_2py347 2305843009213693951)) :pattern ((x ?x_2py347 2305843009213693952) (and_1 ?x_2py347 2305843009213693951)) )) :named A1_566))
(assert (! (forall ((?x_2py348 Int)) (! (= (x ?x_2py348 256) (and_1 ?x_2py348 255)) :pattern ((x ?x_2py348 256) (and_1 ?x_2py348 255)) )) :named A1_567))
(assert (! (forall ((?x_2py349 Int)) (! (= (x ?x_2py349 262144) (and_1 ?x_2py349 262143)) :pattern ((x ?x_2py349 262144) (and_1 ?x_2py349 262143)) )) :named A1_568))
(assert (! (forall ((?x_2py350 Int)) (! (= (x ?x_2py350 268435456) (and_1 ?x_2py350 268435455)) :pattern ((x ?x_2py350 268435456) (and_1 ?x_2py350 268435455)) )) :named A1_569))
(assert (! (forall ((?x_2py351 Int)) (! (= (x ?x_2py351 274877906944) (and_1 ?x_2py351 274877906943)) :pattern ((x ?x_2py351 274877906944) (and_1 ?x_2py351 274877906943)) )) :named A1_570))
(assert (! (forall ((?x_2py352 Int)) (! (= (x ?x_2py352 281474976710656) (and_1 ?x_2py352 281474976710655)) :pattern ((x ?x_2py352 281474976710656) (and_1 ?x_2py352 281474976710655)) )) :named A1_571))
(assert (! (forall ((?x_2py353 Int)) (! (= (x ?x_2py353 288230376151711744) (and_1 ?x_2py353 288230376151711743)) :pattern ((x ?x_2py353 288230376151711744) (and_1 ?x_2py353 288230376151711743)) )) :named A1_572))
(assert (! (forall ((?x_2py354 Int)) (! (= (x ?x_2py354 32) (and_1 ?x_2py354 31)) :pattern ((x ?x_2py354 32) (and_1 ?x_2py354 31)) )) :named A1_573))
(assert (! (forall ((?x_2py355 Int)) (! (= (x ?x_2py355 32768) (and_1 ?x_2py355 32767)) :pattern ((x ?x_2py355 32768) (and_1 ?x_2py355 32767)) )) :named A1_574))
(assert (! (forall ((?x_2py356 Int)) (! (= (x ?x_2py356 33554432) (and_1 ?x_2py356 33554431)) :pattern ((x ?x_2py356 33554432) (and_1 ?x_2py356 33554431)) )) :named A1_575))
(assert (! (forall ((?x_2py357 Int)) (! (= (x ?x_2py357 34359738368) (and_1 ?x_2py357 34359738367)) :pattern ((x ?x_2py357 34359738368) (and_1 ?x_2py357 34359738367)) )) :named A1_576))
(assert (! (forall ((?x_2py358 Int)) (! (= (x ?x_2py358 35184372088832) (and_1 ?x_2py358 35184372088831)) :pattern ((x ?x_2py358 35184372088832) (and_1 ?x_2py358 35184372088831)) )) :named A1_577))
(assert (! (forall ((?x_2py359 Int)) (! (= (x ?x_2py359 36028797018963968) (and_1 ?x_2py359 36028797018963967)) :pattern ((x ?x_2py359 36028797018963968) (and_1 ?x_2py359 36028797018963967)) )) :named A1_578))
(assert (! (forall ((?x_2py360 Int)) (! (= (x ?x_2py360 4) (and_1 ?x_2py360 3)) :pattern ((x ?x_2py360 4) (and_1 ?x_2py360 3)) )) :named A1_579))
(assert (! (forall ((?x_2py361 Int)) (! (= (x ?x_2py361 4096) (and_1 ?x_2py361 4095)) :pattern ((x ?x_2py361 4096) (and_1 ?x_2py361 4095)) )) :named A1_580))
(assert (! (forall ((?x_2py362 Int)) (! (= (x ?x_2py362 4194304) (and_1 ?x_2py362 4194303)) :pattern ((x ?x_2py362 4194304) (and_1 ?x_2py362 4194303)) )) :named A1_581))
(assert (! (forall ((?x_2py363 Int)) (! (= (x ?x_2py363 4294967296) (and_1 ?x_2py363 4294967295)) :pattern ((x ?x_2py363 4294967296) (and_1 ?x_2py363 4294967295)) )) :named A1_582))
(assert (! (forall ((?x_2py364 Int)) (! (= (x ?x_2py364 4398046511104) (and_1 ?x_2py364 4398046511103)) :pattern ((x ?x_2py364 4398046511104) (and_1 ?x_2py364 4398046511103)) )) :named A1_583))
(assert (! (forall ((?x_2py365 Int)) (! (= (x ?x_2py365 4503599627370496) (and_1 ?x_2py365 4503599627370495)) :pattern ((x ?x_2py365 4503599627370496) (and_1 ?x_2py365 4503599627370495)) )) :named A1_584))
(assert (! (forall ((?x_2py366 Int)) (! (= (x ?x_2py366 4611686018427387904) (and_1 ?x_2py366 4611686018427387903)) :pattern ((x ?x_2py366 4611686018427387904) (and_1 ?x_2py366 4611686018427387903)) )) :named A1_585))
(assert (! (forall ((?x_2py367 Int)) (! (= (x ?x_2py367 512) (and_1 ?x_2py367 511)) :pattern ((x ?x_2py367 512) (and_1 ?x_2py367 511)) )) :named A1_586))
(assert (! (forall ((?x_2py368 Int)) (! (= (x ?x_2py368 524288) (and_1 ?x_2py368 524287)) :pattern ((x ?x_2py368 524288) (and_1 ?x_2py368 524287)) )) :named A1_587))
(assert (! (forall ((?x_2py369 Int)) (! (= (x ?x_2py369 536870912) (and_1 ?x_2py369 536870911)) :pattern ((x ?x_2py369 536870912) (and_1 ?x_2py369 536870911)) )) :named A1_588))
(assert (! (forall ((?x_2py370 Int)) (! (= (x ?x_2py370 549755813888) (and_1 ?x_2py370 549755813887)) :pattern ((x ?x_2py370 549755813888) (and_1 ?x_2py370 549755813887)) )) :named A1_589))
(assert (! (forall ((?x_2py371 Int)) (! (= (x ?x_2py371 562949953421312) (and_1 ?x_2py371 562949953421311)) :pattern ((x ?x_2py371 562949953421312) (and_1 ?x_2py371 562949953421311)) )) :named A1_590))
(assert (! (forall ((?x_2py372 Int)) (! (= (x ?x_2py372 576460752303423488) (and_1 ?x_2py372 576460752303423487)) :pattern ((x ?x_2py372 576460752303423488) (and_1 ?x_2py372 576460752303423487)) )) :named A1_591))
(assert (! (forall ((?x_2py373 Int)) (! (= (x ?x_2py373 64) (and_1 ?x_2py373 63)) :pattern ((x ?x_2py373 64) (and_1 ?x_2py373 63)) )) :named A1_592))
(assert (! (forall ((?x_2py374 Int)) (! (= (x ?x_2py374 65536) (and_1 ?x_2py374 65535)) :pattern ((x ?x_2py374 65536) (and_1 ?x_2py374 65535)) )) :named A1_593))
(assert (! (forall ((?x_2py375 Int)) (! (= (x ?x_2py375 67108864) (and_1 ?x_2py375 67108863)) :pattern ((x ?x_2py375 67108864) (and_1 ?x_2py375 67108863)) )) :named A1_594))
(assert (! (forall ((?x_2py376 Int)) (! (= (x ?x_2py376 68719476736) (and_1 ?x_2py376 68719476735)) :pattern ((x ?x_2py376 68719476736) (and_1 ?x_2py376 68719476735)) )) :named A1_595))
(assert (! (forall ((?x_2py377 Int)) (! (= (x ?x_2py377 70368744177664) (and_1 ?x_2py377 70368744177663)) :pattern ((x ?x_2py377 70368744177664) (and_1 ?x_2py377 70368744177663)) )) :named A1_596))
(assert (! (forall ((?x_2py378 Int)) (! (= (x ?x_2py378 72057594037927936) (and_1 ?x_2py378 72057594037927935)) :pattern ((x ?x_2py378 72057594037927936) (and_1 ?x_2py378 72057594037927935)) )) :named A1_597))
(assert (! (forall ((?x_2py379 Int)) (! (= (x ?x_2py379 8) (and_1 ?x_2py379 7)) :pattern ((x ?x_2py379 8) (and_1 ?x_2py379 7)) )) :named A1_598))
(assert (! (forall ((?x_2py380 Int)) (! (= (x ?x_2py380 8192) (and_1 ?x_2py380 8191)) :pattern ((x ?x_2py380 8192) (and_1 ?x_2py380 8191)) )) :named A1_599))
(assert (! (forall ((?x_2py381 Int)) (! (= (x ?x_2py381 8388608) (and_1 ?x_2py381 8388607)) :pattern ((x ?x_2py381 8388608) (and_1 ?x_2py381 8388607)) )) :named A1_600))
(assert (! (forall ((?x_2py382 Int)) (! (= (x ?x_2py382 8589934592) (and_1 ?x_2py382 8589934591)) :pattern ((x ?x_2py382 8589934592) (and_1 ?x_2py382 8589934591)) )) :named A1_601))
(assert (! (forall ((?x_2py383 Int)) (! (= (x ?x_2py383 8796093022208) (and_1 ?x_2py383 8796093022207)) :pattern ((x ?x_2py383 8796093022208) (and_1 ?x_2py383 8796093022207)) )) :named A1_602))
(assert (! (forall ((?x_2py384 Int)) (! (= (x ?x_2py384 9007199254740992) (and_1 ?x_2py384 9007199254740991)) :pattern ((x ?x_2py384 9007199254740992) (and_1 ?x_2py384 9007199254740991)) )) :named A1_603))
(assert (! (forall ((?x_2py385 Int)) (! (= (x ?x_2py385 9223372036854775808) (and_1 ?x_2py385 9223372036854775807)) :pattern ((x ?x_2py385 9223372036854775808) (and_1 ?x_2py385 9223372036854775807)) )) :named A1_604))
(assert (! (forall ((?x_2py386 Int)) (! (= (xor_1 ?x_2py386 (not_1 0)) (not_1 ?x_2py386)) :pattern ((xor_1 ?x_2py386 (not_1 0))) )) :named A1_605))
(assert (! (forall ((?x_2py387 Int)) (! (= (xor_1 ?x_2py387 0) ?x_2py387) :pattern ((xor_1 ?x_2py387 0)) )) :named A1_606))
(assert (! (forall ((?x_2py388 Int)) (! (= (xor_1 ?x_2py388 ?x_2py388) 0) :pattern ((xor_1 ?x_2py388 ?x_2py388)) )) :named A1_607))
(assert (! (forall ((?x_2py389 Int)) (! (and (<= min_i1 (conv_i4_to_i1 ?x_2py389)) (<= (conv_i4_to_i1 ?x_2py389) max_i1)) :pattern ((conv_i4_to_i1 ?x_2py389)) )) :named A1_608))
(assert (! (forall ((?x_2py390 Int)) (! (and (<= min_i1 (conv_i8_to_i1 ?x_2py390)) (<= (conv_i8_to_i1 ?x_2py390) max_i1)) :pattern ((conv_i8_to_i1 ?x_2py390)) )) :named A1_609))
(assert (! (forall ((?x_2py391 Int)) (! (and (<= min_i1 (conv_u4_to_i1 ?x_2py391)) (<= (conv_u4_to_i1 ?x_2py391) max_i1)) :pattern ((conv_u4_to_i1 ?x_2py391)) )) :named A1_610))
(assert (! (forall ((?x_2py392 Int)) (! (and (<= min_i1 (conv_u8_to_i1 ?x_2py392)) (<= (conv_u8_to_i1 ?x_2py392) max_i1)) :pattern ((conv_u8_to_i1 ?x_2py392)) )) :named A1_611))
(assert (! (forall ((?x_2py393 Int)) (! (and (<= min_i2 (conv_i4_to_i2 ?x_2py393)) (<= (conv_i4_to_i2 ?x_2py393) max_i2)) :pattern ((conv_i4_to_i2 ?x_2py393)) )) :named A1_612))
(assert (! (forall ((?x_2py394 Int)) (! (and (<= min_i2 (conv_i8_to_i2 ?x_2py394)) (<= (conv_i8_to_i2 ?x_2py394) max_i2)) :pattern ((conv_i8_to_i2 ?x_2py394)) )) :named A1_613))
(assert (! (forall ((?x_2py395 Int)) (! (and (<= min_i2 (conv_u4_to_i2 ?x_2py395)) (<= (conv_u4_to_i2 ?x_2py395) max_i2)) :pattern ((conv_u4_to_i2 ?x_2py395)) )) :named A1_614))
(assert (! (forall ((?x_2py396 Int)) (! (and (<= min_i2 (conv_u8_to_i2 ?x_2py396)) (<= (conv_u8_to_i2 ?x_2py396) max_i2)) :pattern ((conv_u8_to_i2 ?x_2py396)) )) :named A1_615))
(assert (! (forall ((?x_2py397 Int)) (! (and (<= min_i4 (conv_i4_to_i4 ?x_2py397)) (<= (conv_i4_to_i4 ?x_2py397) max_i4)) :pattern ((conv_i4_to_i4 ?x_2py397)) )) :named A1_616))
(assert (! (forall ((?x_2py398 Int)) (! (and (<= min_i4 (conv_i8_to_i4 ?x_2py398)) (<= (conv_i8_to_i4 ?x_2py398) max_i4)) :pattern ((conv_i8_to_i4 ?x_2py398)) )) :named A1_617))
(assert (! (forall ((?x_2py399 Int)) (! (and (<= min_i4 (conv_u4_to_i4 ?x_2py399)) (<= (conv_u4_to_i4 ?x_2py399) max_i4)) :pattern ((conv_u4_to_i4 ?x_2py399)) )) :named A1_618))
(assert (! (forall ((?x_2py400 Int)) (! (and (<= min_i4 (conv_u8_to_i4 ?x_2py400)) (<= (conv_u8_to_i4 ?x_2py400) max_i4)) :pattern ((conv_u8_to_i4 ?x_2py400)) )) :named A1_619))
(assert (! (forall ((?x_2py401 Int)) (! (and (<= min_i8 (conv_i4_to_i8 ?x_2py401)) (<= (conv_i4_to_i8 ?x_2py401) max_i8)) :pattern ((conv_i4_to_i8 ?x_2py401)) )) :named A1_620))
(assert (! (forall ((?x_2py402 Int)) (! (and (<= min_i8 (conv_i8_to_i8 ?x_2py402)) (<= (conv_i8_to_i8 ?x_2py402) max_i8)) :pattern ((conv_i8_to_i8 ?x_2py402)) )) :named A1_621))
(assert (! (forall ((?x_2py403 Int)) (! (and (<= min_i8 (conv_u4_to_i8 ?x_2py403)) (<= (conv_u4_to_i8 ?x_2py403) max_i8)) :pattern ((conv_u4_to_i8 ?x_2py403)) )) :named A1_622))
(assert (! (forall ((?x_2py404 Int)) (! (and (<= min_i8 (conv_u8_to_i8 ?x_2py404)) (<= (conv_u8_to_i8 ?x_2py404) max_i8)) :pattern ((conv_u8_to_i8 ?x_2py404)) )) :named A1_623))
(assert (! (forall ((?x_2py405 Int)) (! (and (<= min_u1 (conv_i4_to_u1 ?x_2py405)) (<= (conv_i4_to_u1 ?x_2py405) max_u1)) :pattern ((conv_i4_to_u1 ?x_2py405)) )) :named A1_624))
(assert (! (forall ((?x_2py406 Int)) (! (and (<= min_u1 (conv_i8_to_u1 ?x_2py406)) (<= (conv_i8_to_u1 ?x_2py406) max_u1)) :pattern ((conv_i8_to_u1 ?x_2py406)) )) :named A1_625))
(assert (! (forall ((?x_2py407 Int)) (! (and (<= min_u1 (conv_u4_to_u1 ?x_2py407)) (<= (conv_u4_to_u1 ?x_2py407) max_u1)) :pattern ((conv_u4_to_u1 ?x_2py407)) )) :named A1_626))
(assert (! (forall ((?x_2py408 Int)) (! (and (<= min_u1 (conv_u8_to_u1 ?x_2py408)) (<= (conv_u8_to_u1 ?x_2py408) max_u1)) :pattern ((conv_u8_to_u1 ?x_2py408)) )) :named A1_627))
(assert (! (forall ((?x_2py409 Int)) (! (and (<= min_u2 (conv_i4_to_u2 ?x_2py409)) (<= (conv_i4_to_u2 ?x_2py409) max_u2)) :pattern ((conv_i4_to_u2 ?x_2py409)) )) :named A1_628))
(assert (! (forall ((?x_2py410 Int)) (! (and (<= min_u2 (conv_i8_to_u2 ?x_2py410)) (<= (conv_i8_to_u2 ?x_2py410) max_u2)) :pattern ((conv_i8_to_u2 ?x_2py410)) )) :named A1_629))
(assert (! (forall ((?x_2py411 Int)) (! (and (<= min_u2 (conv_u4_to_u2 ?x_2py411)) (<= (conv_u4_to_u2 ?x_2py411) max_u2)) :pattern ((conv_u4_to_u2 ?x_2py411)) )) :named A1_630))
(assert (! (forall ((?x_2py412 Int)) (! (and (<= min_u2 (conv_u8_to_u2 ?x_2py412)) (<= (conv_u8_to_u2 ?x_2py412) max_u2)) :pattern ((conv_u8_to_u2 ?x_2py412)) )) :named A1_631))
(assert (! (forall ((?x_2py413 Int)) (! (and (<= min_u4 (conv_i4_to_u4 ?x_2py413)) (<= (conv_i4_to_u4 ?x_2py413) max_u4)) :pattern ((conv_i4_to_u4 ?x_2py413)) )) :named A1_632))
(assert (! (forall ((?x_2py414 Int)) (! (and (<= min_u4 (conv_i8_to_u4 ?x_2py414)) (<= (conv_i8_to_u4 ?x_2py414) max_u4)) :pattern ((conv_i8_to_u4 ?x_2py414)) )) :named A1_633))
(assert (! (forall ((?x_2py415 Int)) (! (and (<= min_u4 (conv_u4_to_u4 ?x_2py415)) (<= (conv_u4_to_u4 ?x_2py415) max_u4)) :pattern ((conv_u4_to_u4 ?x_2py415)) )) :named A1_634))
(assert (! (forall ((?x_2py416 Int)) (! (and (<= min_u4 (conv_u8_to_u4 ?x_2py416)) (<= (conv_u8_to_u4 ?x_2py416) max_u4)) :pattern ((conv_u8_to_u4 ?x_2py416)) )) :named A1_635))
(assert (! (forall ((?x_2py417 Int)) (! (and (<= min_u8 (conv_i4_to_u8 ?x_2py417)) (<= (conv_i4_to_u8 ?x_2py417) max_u8)) :pattern ((conv_i4_to_u8 ?x_2py417)) )) :named A1_636))
(assert (! (forall ((?x_2py418 Int)) (! (and (<= min_u8 (conv_i8_to_u8 ?x_2py418)) (<= (conv_i8_to_u8 ?x_2py418) max_u8)) :pattern ((conv_i8_to_u8 ?x_2py418)) )) :named A1_637))
(assert (! (forall ((?x_2py419 Int)) (! (and (<= min_u8 (conv_u4_to_u8 ?x_2py419)) (<= (conv_u4_to_u8 ?x_2py419) max_u8)) :pattern ((conv_u4_to_u8 ?x_2py419)) )) :named A1_638))
(assert (! (forall ((?x_2py420 Int)) (! (and (<= min_u8 (conv_u8_to_u8 ?x_2py420)) (<= (conv_u8_to_u8 ?x_2py420) max_u8)) :pattern ((conv_u8_to_u8 ?x_2py420)) )) :named A1_639))
(assert (! (forall ((?x_2py421 Int)) (! (or (= (sign_extend_10_32 (bv_extract ?x_2py421 32 0 10)) ?x_2py421) (not (<= (- 512) ?x_2py421)) (<= 512 ?x_2py421)) :pattern ((sign_extend_10_32 (bv_extract ?x_2py421 32 0 10))) )) :named A1_640))
(assert (! (forall ((?x_2py422 Int)) (! (or (= (sign_extend_10_64 (bv_extract ?x_2py422 64 0 10)) ?x_2py422) (not (<= (- 512) ?x_2py422)) (<= 512 ?x_2py422)) :pattern ((sign_extend_10_64 (bv_extract ?x_2py422 64 0 10))) )) :named A1_641))
(assert (! (forall ((?x_2py423 Int)) (! (or (= (sign_extend_11_32 (bv_extract ?x_2py423 32 0 11)) ?x_2py423) (not (<= (- 1024) ?x_2py423)) (<= 1024 ?x_2py423)) :pattern ((sign_extend_11_32 (bv_extract ?x_2py423 32 0 11))) )) :named A1_642))
(assert (! (forall ((?x_2py424 Int)) (! (or (= (sign_extend_11_64 (bv_extract ?x_2py424 64 0 11)) ?x_2py424) (not (<= (- 1024) ?x_2py424)) (<= 1024 ?x_2py424)) :pattern ((sign_extend_11_64 (bv_extract ?x_2py424 64 0 11))) )) :named A1_643))
(assert (! (forall ((?x_2py425 Int)) (! (or (= (sign_extend_12_32 (bv_extract ?x_2py425 32 0 12)) ?x_2py425) (not (<= (- 2048) ?x_2py425)) (<= 2048 ?x_2py425)) :pattern ((sign_extend_12_32 (bv_extract ?x_2py425 32 0 12))) )) :named A1_644))
(assert (! (forall ((?x_2py426 Int)) (! (or (= (sign_extend_12_64 (bv_extract ?x_2py426 64 0 12)) ?x_2py426) (not (<= (- 2048) ?x_2py426)) (<= 2048 ?x_2py426)) :pattern ((sign_extend_12_64 (bv_extract ?x_2py426 64 0 12))) )) :named A1_645))
(assert (! (forall ((?x_2py427 Int)) (! (or (= (sign_extend_13_32 (bv_extract ?x_2py427 32 0 13)) ?x_2py427) (<= 4096 ?x_2py427) (not (<= (- 4096) ?x_2py427))) :pattern ((sign_extend_13_32 (bv_extract ?x_2py427 32 0 13))) )) :named A1_646))
(assert (! (forall ((?x_2py428 Int)) (! (or (= (sign_extend_13_64 (bv_extract ?x_2py428 64 0 13)) ?x_2py428) (<= 4096 ?x_2py428) (not (<= (- 4096) ?x_2py428))) :pattern ((sign_extend_13_64 (bv_extract ?x_2py428 64 0 13))) )) :named A1_647))
(assert (! (forall ((?x_2py429 Int)) (! (or (= (sign_extend_14_32 (bv_extract ?x_2py429 32 0 14)) ?x_2py429) (not (<= (- 8192) ?x_2py429)) (<= 8192 ?x_2py429)) :pattern ((sign_extend_14_32 (bv_extract ?x_2py429 32 0 14))) )) :named A1_648))
(assert (! (forall ((?x_2py430 Int)) (! (or (= (sign_extend_14_64 (bv_extract ?x_2py430 64 0 14)) ?x_2py430) (not (<= (- 8192) ?x_2py430)) (<= 8192 ?x_2py430)) :pattern ((sign_extend_14_64 (bv_extract ?x_2py430 64 0 14))) )) :named A1_649))
(assert (! (forall ((?x_2py431 Int)) (! (or (= (sign_extend_15_32 (bv_extract ?x_2py431 32 0 15)) ?x_2py431) (not (<= (- 16384) ?x_2py431)) (<= 16384 ?x_2py431)) :pattern ((sign_extend_15_32 (bv_extract ?x_2py431 32 0 15))) )) :named A1_650))
(assert (! (forall ((?x_2py432 Int)) (! (or (= (sign_extend_15_64 (bv_extract ?x_2py432 64 0 15)) ?x_2py432) (not (<= (- 16384) ?x_2py432)) (<= 16384 ?x_2py432)) :pattern ((sign_extend_15_64 (bv_extract ?x_2py432 64 0 15))) )) :named A1_651))
(assert (! (forall ((?x_2py433 Int)) (! (or (= (sign_extend_16_32 (bv_extract ?x_2py433 32 0 16)) ?x_2py433) (<= 32768 ?x_2py433) (not (<= (- 32768) ?x_2py433))) :pattern ((sign_extend_16_32 (bv_extract ?x_2py433 32 0 16))) )) :named A1_652))
(assert (! (forall ((?x_2py434 Int)) (! (or (= (sign_extend_16_64 (bv_extract ?x_2py434 64 0 16)) ?x_2py434) (<= 32768 ?x_2py434) (not (<= (- 32768) ?x_2py434))) :pattern ((sign_extend_16_64 (bv_extract ?x_2py434 64 0 16))) )) :named A1_653))
(assert (! (forall ((?x_2py435 Int)) (! (or (= (sign_extend_17_32 (bv_extract ?x_2py435 32 0 17)) ?x_2py435) (not (<= (- 65536) ?x_2py435)) (<= 65536 ?x_2py435)) :pattern ((sign_extend_17_32 (bv_extract ?x_2py435 32 0 17))) )) :named A1_654))
(assert (! (forall ((?x_2py436 Int)) (! (or (= (sign_extend_17_64 (bv_extract ?x_2py436 64 0 17)) ?x_2py436) (not (<= (- 65536) ?x_2py436)) (<= 65536 ?x_2py436)) :pattern ((sign_extend_17_64 (bv_extract ?x_2py436 64 0 17))) )) :named A1_655))
(assert (! (forall ((?x_2py437 Int)) (! (or (= (sign_extend_18_32 (bv_extract ?x_2py437 32 0 18)) ?x_2py437) (<= 131072 ?x_2py437) (not (<= (- 131072) ?x_2py437))) :pattern ((sign_extend_18_32 (bv_extract ?x_2py437 32 0 18))) )) :named A1_656))
(assert (! (forall ((?x_2py438 Int)) (! (or (= (sign_extend_18_64 (bv_extract ?x_2py438 64 0 18)) ?x_2py438) (<= 131072 ?x_2py438) (not (<= (- 131072) ?x_2py438))) :pattern ((sign_extend_18_64 (bv_extract ?x_2py438 64 0 18))) )) :named A1_657))
(assert (! (forall ((?x_2py439 Int)) (! (or (= (sign_extend_19_32 (bv_extract ?x_2py439 32 0 19)) ?x_2py439) (not (<= (- 262144) ?x_2py439)) (<= 262144 ?x_2py439)) :pattern ((sign_extend_19_32 (bv_extract ?x_2py439 32 0 19))) )) :named A1_658))
(assert (! (forall ((?x_2py440 Int)) (! (or (= (sign_extend_19_64 (bv_extract ?x_2py440 64 0 19)) ?x_2py440) (not (<= (- 262144) ?x_2py440)) (<= 262144 ?x_2py440)) :pattern ((sign_extend_19_64 (bv_extract ?x_2py440 64 0 19))) )) :named A1_659))
(assert (! (forall ((?x_2py441 Int)) (! (or (= (sign_extend_1_32 (bv_extract ?x_2py441 32 0 1)) ?x_2py441) (not (<= (- 1) ?x_2py441)) (<= 1 ?x_2py441)) :pattern ((sign_extend_1_32 (bv_extract ?x_2py441 32 0 1))) )) :named A1_660))
(assert (! (forall ((?x_2py442 Int)) (! (or (= (sign_extend_1_64 (bv_extract ?x_2py442 64 0 1)) ?x_2py442) (not (<= (- 1) ?x_2py442)) (<= 1 ?x_2py442)) :pattern ((sign_extend_1_64 (bv_extract ?x_2py442 64 0 1))) )) :named A1_661))
(assert (! (forall ((?x_2py443 Int)) (! (or (= (sign_extend_20_32 (bv_extract ?x_2py443 32 0 20)) ?x_2py443) (<= 524288 ?x_2py443) (not (<= (- 524288) ?x_2py443))) :pattern ((sign_extend_20_32 (bv_extract ?x_2py443 32 0 20))) )) :named A1_662))
(assert (! (forall ((?x_2py444 Int)) (! (or (= (sign_extend_20_64 (bv_extract ?x_2py444 64 0 20)) ?x_2py444) (<= 524288 ?x_2py444) (not (<= (- 524288) ?x_2py444))) :pattern ((sign_extend_20_64 (bv_extract ?x_2py444 64 0 20))) )) :named A1_663))
(assert (! (forall ((?x_2py445 Int)) (! (or (= (sign_extend_21_32 (bv_extract ?x_2py445 32 0 21)) ?x_2py445) (not (<= (- 1048576) ?x_2py445)) (<= 1048576 ?x_2py445)) :pattern ((sign_extend_21_32 (bv_extract ?x_2py445 32 0 21))) )) :named A1_664))
(assert (! (forall ((?x_2py446 Int)) (! (or (= (sign_extend_21_64 (bv_extract ?x_2py446 64 0 21)) ?x_2py446) (not (<= (- 1048576) ?x_2py446)) (<= 1048576 ?x_2py446)) :pattern ((sign_extend_21_64 (bv_extract ?x_2py446 64 0 21))) )) :named A1_665))
(assert (! (forall ((?x_2py447 Int)) (! (or (= (sign_extend_22_32 (bv_extract ?x_2py447 32 0 22)) ?x_2py447) (<= 2097152 ?x_2py447) (not (<= (- 2097152) ?x_2py447))) :pattern ((sign_extend_22_32 (bv_extract ?x_2py447 32 0 22))) )) :named A1_666))
(assert (! (forall ((?x_2py448 Int)) (! (or (= (sign_extend_22_64 (bv_extract ?x_2py448 64 0 22)) ?x_2py448) (<= 2097152 ?x_2py448) (not (<= (- 2097152) ?x_2py448))) :pattern ((sign_extend_22_64 (bv_extract ?x_2py448 64 0 22))) )) :named A1_667))
(assert (! (forall ((?x_2py449 Int)) (! (or (= (sign_extend_23_32 (bv_extract ?x_2py449 32 0 23)) ?x_2py449) (not (<= (- 4194304) ?x_2py449)) (<= 4194304 ?x_2py449)) :pattern ((sign_extend_23_32 (bv_extract ?x_2py449 32 0 23))) )) :named A1_668))
(assert (! (forall ((?x_2py450 Int)) (! (or (= (sign_extend_23_64 (bv_extract ?x_2py450 64 0 23)) ?x_2py450) (not (<= (- 4194304) ?x_2py450)) (<= 4194304 ?x_2py450)) :pattern ((sign_extend_23_64 (bv_extract ?x_2py450 64 0 23))) )) :named A1_669))
(assert (! (forall ((?x_2py451 Int)) (! (or (= (sign_extend_24_32 (bv_extract ?x_2py451 32 0 24)) ?x_2py451) (not (<= (- 8388608) ?x_2py451)) (<= 8388608 ?x_2py451)) :pattern ((sign_extend_24_32 (bv_extract ?x_2py451 32 0 24))) )) :named A1_670))
(assert (! (forall ((?x_2py452 Int)) (! (or (= (sign_extend_24_64 (bv_extract ?x_2py452 64 0 24)) ?x_2py452) (not (<= (- 8388608) ?x_2py452)) (<= 8388608 ?x_2py452)) :pattern ((sign_extend_24_64 (bv_extract ?x_2py452 64 0 24))) )) :named A1_671))
(assert (! (forall ((?x_2py453 Int)) (! (or (= (sign_extend_25_32 (bv_extract ?x_2py453 32 0 25)) ?x_2py453) (not (<= (- 16777216) ?x_2py453)) (<= 16777216 ?x_2py453)) :pattern ((sign_extend_25_32 (bv_extract ?x_2py453 32 0 25))) )) :named A1_672))
(assert (! (forall ((?x_2py454 Int)) (! (or (= (sign_extend_25_64 (bv_extract ?x_2py454 64 0 25)) ?x_2py454) (not (<= (- 16777216) ?x_2py454)) (<= 16777216 ?x_2py454)) :pattern ((sign_extend_25_64 (bv_extract ?x_2py454 64 0 25))) )) :named A1_673))
(assert (! (forall ((?x_2py455 Int)) (! (or (= (sign_extend_26_32 (bv_extract ?x_2py455 32 0 26)) ?x_2py455) (not (<= (- 33554432) ?x_2py455)) (<= 33554432 ?x_2py455)) :pattern ((sign_extend_26_32 (bv_extract ?x_2py455 32 0 26))) )) :named A1_674))
(assert (! (forall ((?x_2py456 Int)) (! (or (= (sign_extend_26_64 (bv_extract ?x_2py456 64 0 26)) ?x_2py456) (not (<= (- 33554432) ?x_2py456)) (<= 33554432 ?x_2py456)) :pattern ((sign_extend_26_64 (bv_extract ?x_2py456 64 0 26))) )) :named A1_675))
(assert (! (forall ((?x_2py457 Int)) (! (or (= (sign_extend_27_32 (bv_extract ?x_2py457 32 0 27)) ?x_2py457) (<= 67108864 ?x_2py457) (not (<= (- 67108864) ?x_2py457))) :pattern ((sign_extend_27_32 (bv_extract ?x_2py457 32 0 27))) )) :named A1_676))
(assert (! (forall ((?x_2py458 Int)) (! (or (= (sign_extend_27_64 (bv_extract ?x_2py458 64 0 27)) ?x_2py458) (<= 67108864 ?x_2py458) (not (<= (- 67108864) ?x_2py458))) :pattern ((sign_extend_27_64 (bv_extract ?x_2py458 64 0 27))) )) :named A1_677))
(assert (! (forall ((?x_2py459 Int)) (! (or (= (sign_extend_28_32 (bv_extract ?x_2py459 32 0 28)) ?x_2py459) (<= 134217728 ?x_2py459) (not (<= (- 134217728) ?x_2py459))) :pattern ((sign_extend_28_32 (bv_extract ?x_2py459 32 0 28))) )) :named A1_678))
(assert (! (forall ((?x_2py460 Int)) (! (or (= (sign_extend_28_64 (bv_extract ?x_2py460 64 0 28)) ?x_2py460) (<= 134217728 ?x_2py460) (not (<= (- 134217728) ?x_2py460))) :pattern ((sign_extend_28_64 (bv_extract ?x_2py460 64 0 28))) )) :named A1_679))
(assert (! (forall ((?x_2py461 Int)) (! (or (= (sign_extend_29_32 (bv_extract ?x_2py461 32 0 29)) ?x_2py461) (<= 268435456 ?x_2py461) (not (<= (- 268435456) ?x_2py461))) :pattern ((sign_extend_29_32 (bv_extract ?x_2py461 32 0 29))) )) :named A1_680))
(assert (! (forall ((?x_2py462 Int)) (! (or (= (sign_extend_29_64 (bv_extract ?x_2py462 64 0 29)) ?x_2py462) (<= 268435456 ?x_2py462) (not (<= (- 268435456) ?x_2py462))) :pattern ((sign_extend_29_64 (bv_extract ?x_2py462 64 0 29))) )) :named A1_681))
(assert (! (forall ((?x_2py463 Int)) (! (or (= (sign_extend_2_32 (bv_extract ?x_2py463 32 0 2)) ?x_2py463) (<= 2 ?x_2py463) (not (<= (- 2) ?x_2py463))) :pattern ((sign_extend_2_32 (bv_extract ?x_2py463 32 0 2))) )) :named A1_682))
(assert (! (forall ((?x_2py464 Int)) (! (or (= (sign_extend_2_64 (bv_extract ?x_2py464 64 0 2)) ?x_2py464) (<= 2 ?x_2py464) (not (<= (- 2) ?x_2py464))) :pattern ((sign_extend_2_64 (bv_extract ?x_2py464 64 0 2))) )) :named A1_683))
(assert (! (forall ((?x_2py465 Int)) (! (or (= (sign_extend_30_32 (bv_extract ?x_2py465 32 0 30)) ?x_2py465) (not (<= (- 536870912) ?x_2py465)) (<= 536870912 ?x_2py465)) :pattern ((sign_extend_30_32 (bv_extract ?x_2py465 32 0 30))) )) :named A1_684))
(assert (! (forall ((?x_2py466 Int)) (! (or (= (sign_extend_30_64 (bv_extract ?x_2py466 64 0 30)) ?x_2py466) (not (<= (- 536870912) ?x_2py466)) (<= 536870912 ?x_2py466)) :pattern ((sign_extend_30_64 (bv_extract ?x_2py466 64 0 30))) )) :named A1_685))
(assert (! (forall ((?x_2py467 Int)) (! (or (= (sign_extend_31_32 (bv_extract ?x_2py467 32 0 31)) ?x_2py467) (not (<= (- 1073741824) ?x_2py467)) (<= 1073741824 ?x_2py467)) :pattern ((sign_extend_31_32 (bv_extract ?x_2py467 32 0 31))) )) :named A1_686))
(assert (! (forall ((?x_2py468 Int)) (! (or (= (sign_extend_31_64 (bv_extract ?x_2py468 64 0 31)) ?x_2py468) (not (<= (- 1073741824) ?x_2py468)) (<= 1073741824 ?x_2py468)) :pattern ((sign_extend_31_64 (bv_extract ?x_2py468 64 0 31))) )) :named A1_687))
(assert (! (forall ((?x_2py469 Int)) (! (or (= (sign_extend_32_32 (bv_extract ?x_2py469 32 0 32)) ?x_2py469) (<= 2147483648 ?x_2py469) (not (<= (- 2147483648) ?x_2py469))) :pattern ((sign_extend_32_32 (bv_extract ?x_2py469 32 0 32))) )) :named A1_688))
(assert (! (forall ((?x_2py470 Int)) (! (or (= (sign_extend_32_64 (bv_extract ?x_2py470 64 0 32)) ?x_2py470) (<= 2147483648 ?x_2py470) (not (<= (- 2147483648) ?x_2py470))) :pattern ((sign_extend_32_64 (bv_extract ?x_2py470 64 0 32))) )) :named A1_689))
(assert (! (forall ((?x_2py471 Int)) (! (or (= (sign_extend_33_64 (bv_extract ?x_2py471 64 0 33)) ?x_2py471) (not (<= (- 4294967296) ?x_2py471)) (<= 4294967296 ?x_2py471)) :pattern ((sign_extend_33_64 (bv_extract ?x_2py471 64 0 33))) )) :named A1_690))
(assert (! (forall ((?x_2py472 Int)) (! (or (= (sign_extend_34_64 (bv_extract ?x_2py472 64 0 34)) ?x_2py472) (<= 8589934592 ?x_2py472) (not (<= (- 8589934592) ?x_2py472))) :pattern ((sign_extend_34_64 (bv_extract ?x_2py472 64 0 34))) )) :named A1_691))
(assert (! (forall ((?x_2py473 Int)) (! (or (= (sign_extend_35_64 (bv_extract ?x_2py473 64 0 35)) ?x_2py473) (not (<= (- 17179869184) ?x_2py473)) (<= 17179869184 ?x_2py473)) :pattern ((sign_extend_35_64 (bv_extract ?x_2py473 64 0 35))) )) :named A1_692))
(assert (! (forall ((?x_2py474 Int)) (! (or (= (sign_extend_36_64 (bv_extract ?x_2py474 64 0 36)) ?x_2py474) (not (<= (- 34359738368) ?x_2py474)) (<= 34359738368 ?x_2py474)) :pattern ((sign_extend_36_64 (bv_extract ?x_2py474 64 0 36))) )) :named A1_693))
(assert (! (forall ((?x_2py475 Int)) (! (or (= (sign_extend_37_64 (bv_extract ?x_2py475 64 0 37)) ?x_2py475) (not (<= (- 68719476736) ?x_2py475)) (<= 68719476736 ?x_2py475)) :pattern ((sign_extend_37_64 (bv_extract ?x_2py475 64 0 37))) )) :named A1_694))
(assert (! (forall ((?x_2py476 Int)) (! (or (= (sign_extend_38_64 (bv_extract ?x_2py476 64 0 38)) ?x_2py476) (not (<= (- 137438953472) ?x_2py476)) (<= 137438953472 ?x_2py476)) :pattern ((sign_extend_38_64 (bv_extract ?x_2py476 64 0 38))) )) :named A1_695))
(assert (! (forall ((?x_2py477 Int)) (! (or (= (sign_extend_39_64 (bv_extract ?x_2py477 64 0 39)) ?x_2py477) (<= 274877906944 ?x_2py477) (not (<= (- 274877906944) ?x_2py477))) :pattern ((sign_extend_39_64 (bv_extract ?x_2py477 64 0 39))) )) :named A1_696))
(assert (! (forall ((?x_2py478 Int)) (! (or (= (sign_extend_3_32 (bv_extract ?x_2py478 32 0 3)) ?x_2py478) (<= 4 ?x_2py478) (not (<= (- 4) ?x_2py478))) :pattern ((sign_extend_3_32 (bv_extract ?x_2py478 32 0 3))) )) :named A1_697))
(assert (! (forall ((?x_2py479 Int)) (! (or (= (sign_extend_3_64 (bv_extract ?x_2py479 64 0 3)) ?x_2py479) (<= 4 ?x_2py479) (not (<= (- 4) ?x_2py479))) :pattern ((sign_extend_3_64 (bv_extract ?x_2py479 64 0 3))) )) :named A1_698))
(assert (! (forall ((?x_2py480 Int)) (! (or (= (sign_extend_40_64 (bv_extract ?x_2py480 64 0 40)) ?x_2py480) (not (<= (- 549755813888) ?x_2py480)) (<= 549755813888 ?x_2py480)) :pattern ((sign_extend_40_64 (bv_extract ?x_2py480 64 0 40))) )) :named A1_699))
(assert (! (forall ((?x_2py481 Int)) (! (or (= (sign_extend_41_64 (bv_extract ?x_2py481 64 0 41)) ?x_2py481) (not (<= (- 1099511627776) ?x_2py481)) (<= 1099511627776 ?x_2py481)) :pattern ((sign_extend_41_64 (bv_extract ?x_2py481 64 0 41))) )) :named A1_700))
(assert (! (forall ((?x_2py482 Int)) (! (or (= (sign_extend_42_64 (bv_extract ?x_2py482 64 0 42)) ?x_2py482) (<= 2199023255552 ?x_2py482) (not (<= (- 2199023255552) ?x_2py482))) :pattern ((sign_extend_42_64 (bv_extract ?x_2py482 64 0 42))) )) :named A1_701))
(assert (! (forall ((?x_2py483 Int)) (! (or (= (sign_extend_43_64 (bv_extract ?x_2py483 64 0 43)) ?x_2py483) (not (<= (- 4398046511104) ?x_2py483)) (<= 4398046511104 ?x_2py483)) :pattern ((sign_extend_43_64 (bv_extract ?x_2py483 64 0 43))) )) :named A1_702))
(assert (! (forall ((?x_2py484 Int)) (! (or (= (sign_extend_44_64 (bv_extract ?x_2py484 64 0 44)) ?x_2py484) (not (<= (- 8796093022208) ?x_2py484)) (<= 8796093022208 ?x_2py484)) :pattern ((sign_extend_44_64 (bv_extract ?x_2py484 64 0 44))) )) :named A1_703))
(assert (! (forall ((?x_2py485 Int)) (! (or (= (sign_extend_45_64 (bv_extract ?x_2py485 64 0 45)) ?x_2py485) (not (<= (- 17592186044416) ?x_2py485)) (<= 17592186044416 ?x_2py485)) :pattern ((sign_extend_45_64 (bv_extract ?x_2py485 64 0 45))) )) :named A1_704))
(assert (! (forall ((?x_2py486 Int)) (! (or (= (sign_extend_46_64 (bv_extract ?x_2py486 64 0 46)) ?x_2py486) (not (<= (- 35184372088832) ?x_2py486)) (<= 35184372088832 ?x_2py486)) :pattern ((sign_extend_46_64 (bv_extract ?x_2py486 64 0 46))) )) :named A1_705))
(assert (! (forall ((?x_2py487 Int)) (! (or (= (sign_extend_47_64 (bv_extract ?x_2py487 64 0 47)) ?x_2py487) (not (<= (- 70368744177664) ?x_2py487)) (<= 70368744177664 ?x_2py487)) :pattern ((sign_extend_47_64 (bv_extract ?x_2py487 64 0 47))) )) :named A1_706))
(assert (! (forall ((?x_2py488 Int)) (! (or (= (sign_extend_48_64 (bv_extract ?x_2py488 64 0 48)) ?x_2py488) (not (<= (- 140737488355328) ?x_2py488)) (<= 140737488355328 ?x_2py488)) :pattern ((sign_extend_48_64 (bv_extract ?x_2py488 64 0 48))) )) :named A1_707))
(assert (! (forall ((?x_2py489 Int)) (! (or (= (sign_extend_49_64 (bv_extract ?x_2py489 64 0 49)) ?x_2py489) (<= 281474976710656 ?x_2py489) (not (<= (- 281474976710656) ?x_2py489))) :pattern ((sign_extend_49_64 (bv_extract ?x_2py489 64 0 49))) )) :named A1_708))
(assert (! (forall ((?x_2py490 Int)) (! (or (= (sign_extend_4_32 (bv_extract ?x_2py490 32 0 4)) ?x_2py490) (not (<= (- 8) ?x_2py490)) (<= 8 ?x_2py490)) :pattern ((sign_extend_4_32 (bv_extract ?x_2py490 32 0 4))) )) :named A1_709))
(assert (! (forall ((?x_2py491 Int)) (! (or (= (sign_extend_4_64 (bv_extract ?x_2py491 64 0 4)) ?x_2py491) (not (<= (- 8) ?x_2py491)) (<= 8 ?x_2py491)) :pattern ((sign_extend_4_64 (bv_extract ?x_2py491 64 0 4))) )) :named A1_710))
(assert (! (forall ((?x_2py492 Int)) (! (or (= (sign_extend_50_64 (bv_extract ?x_2py492 64 0 50)) ?x_2py492) (not (<= (- 562949953421312) ?x_2py492)) (<= 562949953421312 ?x_2py492)) :pattern ((sign_extend_50_64 (bv_extract ?x_2py492 64 0 50))) )) :named A1_711))
(assert (! (forall ((?x_2py493 Int)) (! (or (= (sign_extend_51_64 (bv_extract ?x_2py493 64 0 51)) ?x_2py493) (<= 1125899906842624 ?x_2py493) (not (<= (- 1125899906842624) ?x_2py493))) :pattern ((sign_extend_51_64 (bv_extract ?x_2py493 64 0 51))) )) :named A1_712))
(assert (! (forall ((?x_2py494 Int)) (! (or (= (sign_extend_52_64 (bv_extract ?x_2py494 64 0 52)) ?x_2py494) (not (<= (- 2251799813685248) ?x_2py494)) (<= 2251799813685248 ?x_2py494)) :pattern ((sign_extend_52_64 (bv_extract ?x_2py494 64 0 52))) )) :named A1_713))
(assert (! (forall ((?x_2py495 Int)) (! (or (= (sign_extend_53_64 (bv_extract ?x_2py495 64 0 53)) ?x_2py495) (<= 4503599627370496 ?x_2py495) (not (<= (- 4503599627370496) ?x_2py495))) :pattern ((sign_extend_53_64 (bv_extract ?x_2py495 64 0 53))) )) :named A1_714))
(assert (! (forall ((?x_2py496 Int)) (! (or (= (sign_extend_54_64 (bv_extract ?x_2py496 64 0 54)) ?x_2py496) (not (<= (- 9007199254740992) ?x_2py496)) (<= 9007199254740992 ?x_2py496)) :pattern ((sign_extend_54_64 (bv_extract ?x_2py496 64 0 54))) )) :named A1_715))
(assert (! (forall ((?x_2py497 Int)) (! (or (= (sign_extend_55_64 (bv_extract ?x_2py497 64 0 55)) ?x_2py497) (<= 18014398509481984 ?x_2py497) (not (<= (- 18014398509481984) ?x_2py497))) :pattern ((sign_extend_55_64 (bv_extract ?x_2py497 64 0 55))) )) :named A1_716))
(assert (! (forall ((?x_2py498 Int)) (! (or (= (sign_extend_56_64 (bv_extract ?x_2py498 64 0 56)) ?x_2py498) (not (<= (- 36028797018963968) ?x_2py498)) (<= 36028797018963968 ?x_2py498)) :pattern ((sign_extend_56_64 (bv_extract ?x_2py498 64 0 56))) )) :named A1_717))
(assert (! (forall ((?x_2py499 Int)) (! (or (= (sign_extend_57_64 (bv_extract ?x_2py499 64 0 57)) ?x_2py499) (not (<= (- 72057594037927936) ?x_2py499)) (<= 72057594037927936 ?x_2py499)) :pattern ((sign_extend_57_64 (bv_extract ?x_2py499 64 0 57))) )) :named A1_718))
(assert (! (forall ((?x_2py500 Int)) (! (or (= (sign_extend_58_64 (bv_extract ?x_2py500 64 0 58)) ?x_2py500) (<= 144115188075855872 ?x_2py500) (not (<= (- 144115188075855872) ?x_2py500))) :pattern ((sign_extend_58_64 (bv_extract ?x_2py500 64 0 58))) )) :named A1_719))
(assert (! (forall ((?x_2py501 Int)) (! (or (= (sign_extend_59_64 (bv_extract ?x_2py501 64 0 59)) ?x_2py501) (not (<= (- 288230376151711744) ?x_2py501)) (<= 288230376151711744 ?x_2py501)) :pattern ((sign_extend_59_64 (bv_extract ?x_2py501 64 0 59))) )) :named A1_720))
(assert (! (forall ((?x_2py502 Int)) (! (or (= (sign_extend_5_32 (bv_extract ?x_2py502 32 0 5)) ?x_2py502) (not (<= (- 16) ?x_2py502)) (<= 16 ?x_2py502)) :pattern ((sign_extend_5_32 (bv_extract ?x_2py502 32 0 5))) )) :named A1_721))
(assert (! (forall ((?x_2py503 Int)) (! (or (= (sign_extend_5_64 (bv_extract ?x_2py503 64 0 5)) ?x_2py503) (not (<= (- 16) ?x_2py503)) (<= 16 ?x_2py503)) :pattern ((sign_extend_5_64 (bv_extract ?x_2py503 64 0 5))) )) :named A1_722))
(assert (! (forall ((?x_2py504 Int)) (! (or (= (sign_extend_60_64 (bv_extract ?x_2py504 64 0 60)) ?x_2py504) (not (<= (- 576460752303423488) ?x_2py504)) (<= 576460752303423488 ?x_2py504)) :pattern ((sign_extend_60_64 (bv_extract ?x_2py504 64 0 60))) )) :named A1_723))
(assert (! (forall ((?x_2py505 Int)) (! (or (= (sign_extend_61_64 (bv_extract ?x_2py505 64 0 61)) ?x_2py505) (<= 1152921504606846976 ?x_2py505) (not (<= (- 1152921504606846976) ?x_2py505))) :pattern ((sign_extend_61_64 (bv_extract ?x_2py505 64 0 61))) )) :named A1_724))
(assert (! (forall ((?x_2py506 Int)) (! (or (= (sign_extend_62_64 (bv_extract ?x_2py506 64 0 62)) ?x_2py506) (not (<= (- 2305843009213693952) ?x_2py506)) (<= 2305843009213693952 ?x_2py506)) :pattern ((sign_extend_62_64 (bv_extract ?x_2py506 64 0 62))) )) :named A1_725))
(assert (! (forall ((?x_2py507 Int)) (! (or (= (sign_extend_63_64 (bv_extract ?x_2py507 64 0 63)) ?x_2py507) (not (<= (- 4611686018427387904) ?x_2py507)) (<= 4611686018427387904 ?x_2py507)) :pattern ((sign_extend_63_64 (bv_extract ?x_2py507 64 0 63))) )) :named A1_726))
(assert (! (forall ((?x_2py508 Int)) (! (or (= (sign_extend_6_32 (bv_extract ?x_2py508 32 0 6)) ?x_2py508) (not (<= (- 32) ?x_2py508)) (<= 32 ?x_2py508)) :pattern ((sign_extend_6_32 (bv_extract ?x_2py508 32 0 6))) )) :named A1_727))
(assert (! (forall ((?x_2py509 Int)) (! (or (= (sign_extend_6_64 (bv_extract ?x_2py509 64 0 6)) ?x_2py509) (not (<= (- 32) ?x_2py509)) (<= 32 ?x_2py509)) :pattern ((sign_extend_6_64 (bv_extract ?x_2py509 64 0 6))) )) :named A1_728))
(assert (! (forall ((?x_2py510 Int)) (! (or (= (sign_extend_7_32 (bv_extract ?x_2py510 32 0 7)) ?x_2py510) (not (<= (- 64) ?x_2py510)) (<= 64 ?x_2py510)) :pattern ((sign_extend_7_32 (bv_extract ?x_2py510 32 0 7))) )) :named A1_729))
(assert (! (forall ((?x_2py511 Int)) (! (or (= (sign_extend_7_64 (bv_extract ?x_2py511 64 0 7)) ?x_2py511) (not (<= (- 64) ?x_2py511)) (<= 64 ?x_2py511)) :pattern ((sign_extend_7_64 (bv_extract ?x_2py511 64 0 7))) )) :named A1_730))
(assert (! (forall ((?x_2py512 Int)) (! (or (= (sign_extend_8_32 (bv_extract ?x_2py512 32 0 8)) ?x_2py512) (<= 128 ?x_2py512) (not (<= (- 128) ?x_2py512))) :pattern ((sign_extend_8_32 (bv_extract ?x_2py512 32 0 8))) )) :named A1_731))
(assert (! (forall ((?x_2py513 Int)) (! (or (= (sign_extend_8_64 (bv_extract ?x_2py513 64 0 8)) ?x_2py513) (<= 128 ?x_2py513) (not (<= (- 128) ?x_2py513))) :pattern ((sign_extend_8_64 (bv_extract ?x_2py513 64 0 8))) )) :named A1_732))
(assert (! (forall ((?x_2py514 Int)) (! (or (= (sign_extend_9_32 (bv_extract ?x_2py514 32 0 9)) ?x_2py514) (not (<= (- 256) ?x_2py514)) (<= 256 ?x_2py514)) :pattern ((sign_extend_9_32 (bv_extract ?x_2py514 32 0 9))) )) :named A1_733))
(assert (! (forall ((?x_2py515 Int)) (! (or (= (sign_extend_9_64 (bv_extract ?x_2py515 64 0 9)) ?x_2py515) (not (<= (- 256) ?x_2py515)) (<= 256 ?x_2py515)) :pattern ((sign_extend_9_64 (bv_extract ?x_2py515 64 0 9))) )) :named A1_734))
(assert (! (forall ((?x_2py516 Int)) (! (or (= ?x_2py516 min_i4) (= (neg_unchk_i4 ?x_2py516) (* (- 1) ?x_2py516))) :pattern ((neg_unchk_i4 ?x_2py516)) )) :named A1_735))
(assert (! (forall ((?x_2py517 Int)) (! (or (= ?x_2py517 min_i8) (= (neg_unchk_i8 ?x_2py517) (* (- 1) ?x_2py517))) :pattern ((neg_unchk_i8 ?x_2py517)) )) :named A1_736))
(assert (! (forall ((?x_2py518 Int)) (! (or (not (<= min_i1 ?x_2py518)) (not (<= ?x_2py518 max_i1)) (= ?x_2py518 (conv_i4_to_i1 ?x_2py518))) :pattern ((conv_i4_to_i1 ?x_2py518)) )) :named A1_737))
(assert (! (forall ((?x_2py519 Int)) (! (or (not (<= min_i1 ?x_2py519)) (not (<= ?x_2py519 max_i1)) (= ?x_2py519 (conv_i8_to_i1 ?x_2py519))) :pattern ((conv_i8_to_i1 ?x_2py519)) )) :named A1_738))
(assert (! (forall ((?x_2py520 Int)) (! (or (not (<= min_i1 ?x_2py520)) (not (<= ?x_2py520 max_i1)) (= ?x_2py520 (conv_u4_to_i1 ?x_2py520))) :pattern ((conv_u4_to_i1 ?x_2py520)) )) :named A1_739))
(assert (! (forall ((?x_2py521 Int)) (! (or (not (<= min_i1 ?x_2py521)) (not (<= ?x_2py521 max_i1)) (= ?x_2py521 (conv_u8_to_i1 ?x_2py521))) :pattern ((conv_u8_to_i1 ?x_2py521)) )) :named A1_740))
(assert (! (forall ((?x_2py522 Int)) (! (or (not (<= min_i2 ?x_2py522)) (not (<= ?x_2py522 max_i2)) (= ?x_2py522 (conv_i4_to_i2 ?x_2py522))) :pattern ((conv_i4_to_i2 ?x_2py522)) )) :named A1_741))
(assert (! (forall ((?x_2py523 Int)) (! (or (not (<= min_i2 ?x_2py523)) (not (<= ?x_2py523 max_i2)) (= ?x_2py523 (conv_i8_to_i2 ?x_2py523))) :pattern ((conv_i8_to_i2 ?x_2py523)) )) :named A1_742))
(assert (! (forall ((?x_2py524 Int)) (! (or (not (<= min_i2 ?x_2py524)) (not (<= ?x_2py524 max_i2)) (= ?x_2py524 (conv_u4_to_i2 ?x_2py524))) :pattern ((conv_u4_to_i2 ?x_2py524)) )) :named A1_743))
(assert (! (forall ((?x_2py525 Int)) (! (or (not (<= min_i2 ?x_2py525)) (not (<= ?x_2py525 max_i2)) (= ?x_2py525 (conv_u8_to_i2 ?x_2py525))) :pattern ((conv_u8_to_i2 ?x_2py525)) )) :named A1_744))
(assert (! (forall ((?x_2py526 Int)) (! (or (not (<= min_i4 ?x_2py526)) (not (<= ?x_2py526 max_i4)) (= ?x_2py526 (conv_i4_to_i4 ?x_2py526))) :pattern ((conv_i4_to_i4 ?x_2py526)) )) :named A1_745))
(assert (! (forall ((?x_2py527 Int)) (! (or (not (<= min_i4 ?x_2py527)) (not (<= ?x_2py527 max_i4)) (= ?x_2py527 (conv_i8_to_i4 ?x_2py527))) :pattern ((conv_i8_to_i4 ?x_2py527)) )) :named A1_746))
(assert (! (forall ((?x_2py528 Int)) (! (or (not (<= min_i4 ?x_2py528)) (not (<= ?x_2py528 max_i4)) (= ?x_2py528 (conv_u4_to_i4 ?x_2py528))) :pattern ((conv_u4_to_i4 ?x_2py528)) )) :named A1_747))
(assert (! (forall ((?x_2py529 Int)) (! (or (not (<= min_i4 ?x_2py529)) (not (<= ?x_2py529 max_i4)) (= ?x_2py529 (conv_u8_to_i4 ?x_2py529))) :pattern ((conv_u8_to_i4 ?x_2py529)) )) :named A1_748))
(assert (! (forall ((?x_2py530 Int)) (! (or (not (<= min_i8 ?x_2py530)) (not (<= ?x_2py530 max_i8)) (= ?x_2py530 (conv_i4_to_i8 ?x_2py530))) :pattern ((conv_i4_to_i8 ?x_2py530)) )) :named A1_749))
(assert (! (forall ((?x_2py531 Int)) (! (or (not (<= min_i8 ?x_2py531)) (not (<= ?x_2py531 max_i8)) (= ?x_2py531 (conv_i8_to_i8 ?x_2py531))) :pattern ((conv_i8_to_i8 ?x_2py531)) )) :named A1_750))
(assert (! (forall ((?x_2py532 Int)) (! (or (not (<= min_i8 ?x_2py532)) (not (<= ?x_2py532 max_i8)) (= ?x_2py532 (conv_u4_to_i8 ?x_2py532))) :pattern ((conv_u4_to_i8 ?x_2py532)) )) :named A1_751))
(assert (! (forall ((?x_2py533 Int)) (! (or (not (<= min_i8 ?x_2py533)) (not (<= ?x_2py533 max_i8)) (= ?x_2py533 (conv_u8_to_i8 ?x_2py533))) :pattern ((conv_u8_to_i8 ?x_2py533)) )) :named A1_752))
(assert (! (forall ((?x_2py534 Int)) (! (or (not (<= min_u1 ?x_2py534)) (not (<= ?x_2py534 max_u1)) (= ?x_2py534 (conv_i4_to_u1 ?x_2py534))) :pattern ((conv_i4_to_u1 ?x_2py534)) )) :named A1_753))
(assert (! (forall ((?x_2py535 Int)) (! (or (not (<= min_u1 ?x_2py535)) (not (<= ?x_2py535 max_u1)) (= ?x_2py535 (conv_i8_to_u1 ?x_2py535))) :pattern ((conv_i8_to_u1 ?x_2py535)) )) :named A1_754))
(assert (! (forall ((?x_2py536 Int)) (! (or (not (<= min_u1 ?x_2py536)) (not (<= ?x_2py536 max_u1)) (= ?x_2py536 (conv_u4_to_u1 ?x_2py536))) :pattern ((conv_u4_to_u1 ?x_2py536)) )) :named A1_755))
(assert (! (forall ((?x_2py537 Int)) (! (or (not (<= min_u1 ?x_2py537)) (not (<= ?x_2py537 max_u1)) (= ?x_2py537 (conv_u8_to_u1 ?x_2py537))) :pattern ((conv_u8_to_u1 ?x_2py537)) )) :named A1_756))
(assert (! (forall ((?x_2py538 Int)) (! (or (not (<= min_u2 ?x_2py538)) (not (<= ?x_2py538 max_u2)) (= ?x_2py538 (conv_i4_to_u2 ?x_2py538))) :pattern ((conv_i4_to_u2 ?x_2py538)) )) :named A1_757))
(assert (! (forall ((?x_2py539 Int)) (! (or (not (<= min_u2 ?x_2py539)) (not (<= ?x_2py539 max_u2)) (= ?x_2py539 (conv_i8_to_u2 ?x_2py539))) :pattern ((conv_i8_to_u2 ?x_2py539)) )) :named A1_758))
(assert (! (forall ((?x_2py540 Int)) (! (or (not (<= min_u2 ?x_2py540)) (not (<= ?x_2py540 max_u2)) (= ?x_2py540 (conv_u4_to_u2 ?x_2py540))) :pattern ((conv_u4_to_u2 ?x_2py540)) )) :named A1_759))
(assert (! (forall ((?x_2py541 Int)) (! (or (not (<= min_u2 ?x_2py541)) (not (<= ?x_2py541 max_u2)) (= ?x_2py541 (conv_u8_to_u2 ?x_2py541))) :pattern ((conv_u8_to_u2 ?x_2py541)) )) :named A1_760))
(assert (! (forall ((?x_2py542 Int)) (! (or (not (<= min_u4 ?x_2py542)) (not (<= ?x_2py542 max_u4)) (= ?x_2py542 (conv_i4_to_u4 ?x_2py542))) :pattern ((conv_i4_to_u4 ?x_2py542)) )) :named A1_761))
(assert (! (forall ((?x_2py543 Int)) (! (or (not (<= min_u4 ?x_2py543)) (not (<= ?x_2py543 max_u4)) (= ?x_2py543 (conv_i8_to_u4 ?x_2py543))) :pattern ((conv_i8_to_u4 ?x_2py543)) )) :named A1_762))
(assert (! (forall ((?x_2py544 Int)) (! (or (not (<= min_u4 ?x_2py544)) (not (<= ?x_2py544 max_u4)) (= ?x_2py544 (conv_u4_to_u4 ?x_2py544))) :pattern ((conv_u4_to_u4 ?x_2py544)) )) :named A1_763))
(assert (! (forall ((?x_2py545 Int)) (! (or (not (<= min_u4 ?x_2py545)) (not (<= ?x_2py545 max_u4)) (= ?x_2py545 (conv_u8_to_u4 ?x_2py545))) :pattern ((conv_u8_to_u4 ?x_2py545)) )) :named A1_764))
(assert (! (forall ((?x_2py546 Int)) (! (or (not (<= min_u8 ?x_2py546)) (not (<= ?x_2py546 max_u8)) (= ?x_2py546 (conv_i4_to_u8 ?x_2py546))) :pattern ((conv_i4_to_u8 ?x_2py546)) )) :named A1_765))
(assert (! (forall ((?x_2py547 Int)) (! (or (not (<= min_u8 ?x_2py547)) (not (<= ?x_2py547 max_u8)) (= ?x_2py547 (conv_i8_to_u8 ?x_2py547))) :pattern ((conv_i8_to_u8 ?x_2py547)) )) :named A1_766))
(assert (! (forall ((?x_2py548 Int)) (! (or (not (<= min_u8 ?x_2py548)) (not (<= ?x_2py548 max_u8)) (= ?x_2py548 (conv_u4_to_u8 ?x_2py548))) :pattern ((conv_u4_to_u8 ?x_2py548)) )) :named A1_767))
(assert (! (forall ((?x_2py549 Int)) (! (or (not (<= min_u8 ?x_2py549)) (not (<= ?x_2py549 max_u8)) (= ?x_2py549 (conv_u8_to_u8 ?x_2py549))) :pattern ((conv_u8_to_u8 ?x_2py549)) )) :named A1_768))
(assert (! (forall ((?x_2py550 Int)) (! (or (= (sign_extend_10_32 ?x_2py550) ?x_2py550) (not (<= (- 512) ?x_2py550)) (<= 512 ?x_2py550)) :pattern ((sign_extend_10_32 ?x_2py550)) )) :named A1_769))
(assert (! (forall ((?x_2py551 Int)) (! (or (= (sign_extend_10_64 ?x_2py551) ?x_2py551) (not (<= (- 512) ?x_2py551)) (<= 512 ?x_2py551)) :pattern ((sign_extend_10_64 ?x_2py551)) )) :named A1_770))
(assert (! (forall ((?x_2py552 Int)) (! (or (= (sign_extend_11_32 ?x_2py552) ?x_2py552) (not (<= (- 1024) ?x_2py552)) (<= 1024 ?x_2py552)) :pattern ((sign_extend_11_32 ?x_2py552)) )) :named A1_771))
(assert (! (forall ((?x_2py553 Int)) (! (or (= (sign_extend_11_64 ?x_2py553) ?x_2py553) (not (<= (- 1024) ?x_2py553)) (<= 1024 ?x_2py553)) :pattern ((sign_extend_11_64 ?x_2py553)) )) :named A1_772))
(assert (! (forall ((?x_2py554 Int)) (! (or (= (sign_extend_12_32 ?x_2py554) ?x_2py554) (not (<= (- 2048) ?x_2py554)) (<= 2048 ?x_2py554)) :pattern ((sign_extend_12_32 ?x_2py554)) )) :named A1_773))
(assert (! (forall ((?x_2py555 Int)) (! (or (= (sign_extend_12_64 ?x_2py555) ?x_2py555) (not (<= (- 2048) ?x_2py555)) (<= 2048 ?x_2py555)) :pattern ((sign_extend_12_64 ?x_2py555)) )) :named A1_774))
(assert (! (forall ((?x_2py556 Int)) (! (or (= (sign_extend_13_32 ?x_2py556) ?x_2py556) (<= 4096 ?x_2py556) (not (<= (- 4096) ?x_2py556))) :pattern ((sign_extend_13_32 ?x_2py556)) )) :named A1_775))
(assert (! (forall ((?x_2py557 Int)) (! (or (= (sign_extend_13_64 ?x_2py557) ?x_2py557) (<= 4096 ?x_2py557) (not (<= (- 4096) ?x_2py557))) :pattern ((sign_extend_13_64 ?x_2py557)) )) :named A1_776))
(assert (! (forall ((?x_2py558 Int)) (! (or (= (sign_extend_14_32 ?x_2py558) ?x_2py558) (not (<= (- 8192) ?x_2py558)) (<= 8192 ?x_2py558)) :pattern ((sign_extend_14_32 ?x_2py558)) )) :named A1_777))
(assert (! (forall ((?x_2py559 Int)) (! (or (= (sign_extend_14_64 ?x_2py559) ?x_2py559) (not (<= (- 8192) ?x_2py559)) (<= 8192 ?x_2py559)) :pattern ((sign_extend_14_64 ?x_2py559)) )) :named A1_778))
(assert (! (forall ((?x_2py560 Int)) (! (or (= (sign_extend_15_32 ?x_2py560) ?x_2py560) (not (<= (- 16384) ?x_2py560)) (<= 16384 ?x_2py560)) :pattern ((sign_extend_15_32 ?x_2py560)) )) :named A1_779))
(assert (! (forall ((?x_2py561 Int)) (! (or (= (sign_extend_15_64 ?x_2py561) ?x_2py561) (not (<= (- 16384) ?x_2py561)) (<= 16384 ?x_2py561)) :pattern ((sign_extend_15_64 ?x_2py561)) )) :named A1_780))
(assert (! (forall ((?x_2py562 Int)) (! (or (= (sign_extend_16_32 ?x_2py562) ?x_2py562) (<= 32768 ?x_2py562) (not (<= (- 32768) ?x_2py562))) :pattern ((sign_extend_16_32 ?x_2py562)) )) :named A1_781))
(assert (! (forall ((?x_2py563 Int)) (! (or (= (sign_extend_16_64 ?x_2py563) ?x_2py563) (<= 32768 ?x_2py563) (not (<= (- 32768) ?x_2py563))) :pattern ((sign_extend_16_64 ?x_2py563)) )) :named A1_782))
(assert (! (forall ((?x_2py564 Int)) (! (or (= (sign_extend_17_32 ?x_2py564) ?x_2py564) (not (<= (- 65536) ?x_2py564)) (<= 65536 ?x_2py564)) :pattern ((sign_extend_17_32 ?x_2py564)) )) :named A1_783))
(assert (! (forall ((?x_2py565 Int)) (! (or (= (sign_extend_17_64 ?x_2py565) ?x_2py565) (not (<= (- 65536) ?x_2py565)) (<= 65536 ?x_2py565)) :pattern ((sign_extend_17_64 ?x_2py565)) )) :named A1_784))
(assert (! (forall ((?x_2py566 Int)) (! (or (= (sign_extend_18_32 ?x_2py566) ?x_2py566) (<= 131072 ?x_2py566) (not (<= (- 131072) ?x_2py566))) :pattern ((sign_extend_18_32 ?x_2py566)) )) :named A1_785))
(assert (! (forall ((?x_2py567 Int)) (! (or (= (sign_extend_18_64 ?x_2py567) ?x_2py567) (<= 131072 ?x_2py567) (not (<= (- 131072) ?x_2py567))) :pattern ((sign_extend_18_64 ?x_2py567)) )) :named A1_786))
(assert (! (forall ((?x_2py568 Int)) (! (or (= (sign_extend_19_32 ?x_2py568) ?x_2py568) (not (<= (- 262144) ?x_2py568)) (<= 262144 ?x_2py568)) :pattern ((sign_extend_19_32 ?x_2py568)) )) :named A1_787))
(assert (! (forall ((?x_2py569 Int)) (! (or (= (sign_extend_19_64 ?x_2py569) ?x_2py569) (not (<= (- 262144) ?x_2py569)) (<= 262144 ?x_2py569)) :pattern ((sign_extend_19_64 ?x_2py569)) )) :named A1_788))
(assert (! (forall ((?x_2py570 Int)) (! (or (= (sign_extend_1_32 ?x_2py570) ?x_2py570) (not (<= (- 1) ?x_2py570)) (<= 1 ?x_2py570)) :pattern ((sign_extend_1_32 ?x_2py570)) )) :named A1_789))
(assert (! (forall ((?x_2py571 Int)) (! (or (= (sign_extend_1_64 ?x_2py571) ?x_2py571) (not (<= (- 1) ?x_2py571)) (<= 1 ?x_2py571)) :pattern ((sign_extend_1_64 ?x_2py571)) )) :named A1_790))
(assert (! (forall ((?x_2py572 Int)) (! (or (= (sign_extend_20_32 ?x_2py572) ?x_2py572) (<= 524288 ?x_2py572) (not (<= (- 524288) ?x_2py572))) :pattern ((sign_extend_20_32 ?x_2py572)) )) :named A1_791))
(assert (! (forall ((?x_2py573 Int)) (! (or (= (sign_extend_20_64 ?x_2py573) ?x_2py573) (<= 524288 ?x_2py573) (not (<= (- 524288) ?x_2py573))) :pattern ((sign_extend_20_64 ?x_2py573)) )) :named A1_792))
(assert (! (forall ((?x_2py574 Int)) (! (or (= (sign_extend_21_32 ?x_2py574) ?x_2py574) (not (<= (- 1048576) ?x_2py574)) (<= 1048576 ?x_2py574)) :pattern ((sign_extend_21_32 ?x_2py574)) )) :named A1_793))
(assert (! (forall ((?x_2py575 Int)) (! (or (= (sign_extend_21_64 ?x_2py575) ?x_2py575) (not (<= (- 1048576) ?x_2py575)) (<= 1048576 ?x_2py575)) :pattern ((sign_extend_21_64 ?x_2py575)) )) :named A1_794))
(assert (! (forall ((?x_2py576 Int)) (! (or (= (sign_extend_22_32 ?x_2py576) ?x_2py576) (<= 2097152 ?x_2py576) (not (<= (- 2097152) ?x_2py576))) :pattern ((sign_extend_22_32 ?x_2py576)) )) :named A1_795))
(assert (! (forall ((?x_2py577 Int)) (! (or (= (sign_extend_22_64 ?x_2py577) ?x_2py577) (<= 2097152 ?x_2py577) (not (<= (- 2097152) ?x_2py577))) :pattern ((sign_extend_22_64 ?x_2py577)) )) :named A1_796))
(assert (! (forall ((?x_2py578 Int)) (! (or (= (sign_extend_23_32 ?x_2py578) ?x_2py578) (not (<= (- 4194304) ?x_2py578)) (<= 4194304 ?x_2py578)) :pattern ((sign_extend_23_32 ?x_2py578)) )) :named A1_797))
(assert (! (forall ((?x_2py579 Int)) (! (or (= (sign_extend_23_64 ?x_2py579) ?x_2py579) (not (<= (- 4194304) ?x_2py579)) (<= 4194304 ?x_2py579)) :pattern ((sign_extend_23_64 ?x_2py579)) )) :named A1_798))
(assert (! (forall ((?x_2py580 Int)) (! (or (= (sign_extend_24_32 ?x_2py580) ?x_2py580) (not (<= (- 8388608) ?x_2py580)) (<= 8388608 ?x_2py580)) :pattern ((sign_extend_24_32 ?x_2py580)) )) :named A1_799))
(assert (! (forall ((?x_2py581 Int)) (! (or (= (sign_extend_24_64 ?x_2py581) ?x_2py581) (not (<= (- 8388608) ?x_2py581)) (<= 8388608 ?x_2py581)) :pattern ((sign_extend_24_64 ?x_2py581)) )) :named A1_800))
(assert (! (forall ((?x_2py582 Int)) (! (or (= (sign_extend_25_32 ?x_2py582) ?x_2py582) (not (<= (- 16777216) ?x_2py582)) (<= 16777216 ?x_2py582)) :pattern ((sign_extend_25_32 ?x_2py582)) )) :named A1_801))
(assert (! (forall ((?x_2py583 Int)) (! (or (= (sign_extend_25_64 ?x_2py583) ?x_2py583) (not (<= (- 16777216) ?x_2py583)) (<= 16777216 ?x_2py583)) :pattern ((sign_extend_25_64 ?x_2py583)) )) :named A1_802))
(assert (! (forall ((?x_2py584 Int)) (! (or (= (sign_extend_26_32 ?x_2py584) ?x_2py584) (not (<= (- 33554432) ?x_2py584)) (<= 33554432 ?x_2py584)) :pattern ((sign_extend_26_32 ?x_2py584)) )) :named A1_803))
(assert (! (forall ((?x_2py585 Int)) (! (or (= (sign_extend_26_64 ?x_2py585) ?x_2py585) (not (<= (- 33554432) ?x_2py585)) (<= 33554432 ?x_2py585)) :pattern ((sign_extend_26_64 ?x_2py585)) )) :named A1_804))
(assert (! (forall ((?x_2py586 Int)) (! (or (= (sign_extend_27_32 ?x_2py586) ?x_2py586) (<= 67108864 ?x_2py586) (not (<= (- 67108864) ?x_2py586))) :pattern ((sign_extend_27_32 ?x_2py586)) )) :named A1_805))
(assert (! (forall ((?x_2py587 Int)) (! (or (= (sign_extend_27_64 ?x_2py587) ?x_2py587) (<= 67108864 ?x_2py587) (not (<= (- 67108864) ?x_2py587))) :pattern ((sign_extend_27_64 ?x_2py587)) )) :named A1_806))
(assert (! (forall ((?x_2py588 Int)) (! (or (= (sign_extend_28_32 ?x_2py588) ?x_2py588) (<= 134217728 ?x_2py588) (not (<= (- 134217728) ?x_2py588))) :pattern ((sign_extend_28_32 ?x_2py588)) )) :named A1_807))
(assert (! (forall ((?x_2py589 Int)) (! (or (= (sign_extend_28_64 ?x_2py589) ?x_2py589) (<= 134217728 ?x_2py589) (not (<= (- 134217728) ?x_2py589))) :pattern ((sign_extend_28_64 ?x_2py589)) )) :named A1_808))
(assert (! (forall ((?x_2py590 Int)) (! (or (= (sign_extend_29_32 ?x_2py590) ?x_2py590) (<= 268435456 ?x_2py590) (not (<= (- 268435456) ?x_2py590))) :pattern ((sign_extend_29_32 ?x_2py590)) )) :named A1_809))
(assert (! (forall ((?x_2py591 Int)) (! (or (= (sign_extend_29_64 ?x_2py591) ?x_2py591) (<= 268435456 ?x_2py591) (not (<= (- 268435456) ?x_2py591))) :pattern ((sign_extend_29_64 ?x_2py591)) )) :named A1_810))
(assert (! (forall ((?x_2py592 Int)) (! (or (= (sign_extend_2_32 ?x_2py592) ?x_2py592) (<= 2 ?x_2py592) (not (<= (- 2) ?x_2py592))) :pattern ((sign_extend_2_32 ?x_2py592)) )) :named A1_811))
(assert (! (forall ((?x_2py593 Int)) (! (or (= (sign_extend_2_64 ?x_2py593) ?x_2py593) (<= 2 ?x_2py593) (not (<= (- 2) ?x_2py593))) :pattern ((sign_extend_2_64 ?x_2py593)) )) :named A1_812))
(assert (! (forall ((?x_2py594 Int)) (! (or (= (sign_extend_30_32 ?x_2py594) ?x_2py594) (not (<= (- 536870912) ?x_2py594)) (<= 536870912 ?x_2py594)) :pattern ((sign_extend_30_32 ?x_2py594)) )) :named A1_813))
(assert (! (forall ((?x_2py595 Int)) (! (or (= (sign_extend_30_64 ?x_2py595) ?x_2py595) (not (<= (- 536870912) ?x_2py595)) (<= 536870912 ?x_2py595)) :pattern ((sign_extend_30_64 ?x_2py595)) )) :named A1_814))
(assert (! (forall ((?x_2py596 Int)) (! (or (= (sign_extend_31_32 ?x_2py596) ?x_2py596) (not (<= (- 1073741824) ?x_2py596)) (<= 1073741824 ?x_2py596)) :pattern ((sign_extend_31_32 ?x_2py596)) )) :named A1_815))
(assert (! (forall ((?x_2py597 Int)) (! (or (= (sign_extend_31_64 ?x_2py597) ?x_2py597) (not (<= (- 1073741824) ?x_2py597)) (<= 1073741824 ?x_2py597)) :pattern ((sign_extend_31_64 ?x_2py597)) )) :named A1_816))
(assert (! (forall ((?x_2py598 Int)) (! (or (= (sign_extend_32_32 ?x_2py598) ?x_2py598) (<= 2147483648 ?x_2py598) (not (<= (- 2147483648) ?x_2py598))) :pattern ((sign_extend_32_32 ?x_2py598)) )) :named A1_817))
(assert (! (forall ((?x_2py599 Int)) (! (or (= (sign_extend_32_64 ?x_2py599) ?x_2py599) (<= 2147483648 ?x_2py599) (not (<= (- 2147483648) ?x_2py599))) :pattern ((sign_extend_32_64 ?x_2py599)) )) :named A1_818))
(assert (! (forall ((?x_2py600 Int)) (! (or (= (sign_extend_33_64 ?x_2py600) ?x_2py600) (not (<= (- 4294967296) ?x_2py600)) (<= 4294967296 ?x_2py600)) :pattern ((sign_extend_33_64 ?x_2py600)) )) :named A1_819))
(assert (! (forall ((?x_2py601 Int)) (! (or (= (sign_extend_34_64 ?x_2py601) ?x_2py601) (<= 8589934592 ?x_2py601) (not (<= (- 8589934592) ?x_2py601))) :pattern ((sign_extend_34_64 ?x_2py601)) )) :named A1_820))
(assert (! (forall ((?x_2py602 Int)) (! (or (= (sign_extend_35_64 ?x_2py602) ?x_2py602) (not (<= (- 17179869184) ?x_2py602)) (<= 17179869184 ?x_2py602)) :pattern ((sign_extend_35_64 ?x_2py602)) )) :named A1_821))
(assert (! (forall ((?x_2py603 Int)) (! (or (= (sign_extend_36_64 ?x_2py603) ?x_2py603) (not (<= (- 34359738368) ?x_2py603)) (<= 34359738368 ?x_2py603)) :pattern ((sign_extend_36_64 ?x_2py603)) )) :named A1_822))
(assert (! (forall ((?x_2py604 Int)) (! (or (= (sign_extend_37_64 ?x_2py604) ?x_2py604) (not (<= (- 68719476736) ?x_2py604)) (<= 68719476736 ?x_2py604)) :pattern ((sign_extend_37_64 ?x_2py604)) )) :named A1_823))
(assert (! (forall ((?x_2py605 Int)) (! (or (= (sign_extend_38_64 ?x_2py605) ?x_2py605) (not (<= (- 137438953472) ?x_2py605)) (<= 137438953472 ?x_2py605)) :pattern ((sign_extend_38_64 ?x_2py605)) )) :named A1_824))
(assert (! (forall ((?x_2py606 Int)) (! (or (= (sign_extend_39_64 ?x_2py606) ?x_2py606) (<= 274877906944 ?x_2py606) (not (<= (- 274877906944) ?x_2py606))) :pattern ((sign_extend_39_64 ?x_2py606)) )) :named A1_825))
(assert (! (forall ((?x_2py607 Int)) (! (or (= (sign_extend_3_32 ?x_2py607) ?x_2py607) (<= 4 ?x_2py607) (not (<= (- 4) ?x_2py607))) :pattern ((sign_extend_3_32 ?x_2py607)) )) :named A1_826))
(assert (! (forall ((?x_2py608 Int)) (! (or (= (sign_extend_3_64 ?x_2py608) ?x_2py608) (<= 4 ?x_2py608) (not (<= (- 4) ?x_2py608))) :pattern ((sign_extend_3_64 ?x_2py608)) )) :named A1_827))
(assert (! (forall ((?x_2py609 Int)) (! (or (= (sign_extend_40_64 ?x_2py609) ?x_2py609) (not (<= (- 549755813888) ?x_2py609)) (<= 549755813888 ?x_2py609)) :pattern ((sign_extend_40_64 ?x_2py609)) )) :named A1_828))
(assert (! (forall ((?x_2py610 Int)) (! (or (= (sign_extend_41_64 ?x_2py610) ?x_2py610) (not (<= (- 1099511627776) ?x_2py610)) (<= 1099511627776 ?x_2py610)) :pattern ((sign_extend_41_64 ?x_2py610)) )) :named A1_829))
(assert (! (forall ((?x_2py611 Int)) (! (or (= (sign_extend_42_64 ?x_2py611) ?x_2py611) (<= 2199023255552 ?x_2py611) (not (<= (- 2199023255552) ?x_2py611))) :pattern ((sign_extend_42_64 ?x_2py611)) )) :named A1_830))
(assert (! (forall ((?x_2py612 Int)) (! (or (= (sign_extend_43_64 ?x_2py612) ?x_2py612) (not (<= (- 4398046511104) ?x_2py612)) (<= 4398046511104 ?x_2py612)) :pattern ((sign_extend_43_64 ?x_2py612)) )) :named A1_831))
(assert (! (forall ((?x_2py613 Int)) (! (or (= (sign_extend_44_64 ?x_2py613) ?x_2py613) (not (<= (- 8796093022208) ?x_2py613)) (<= 8796093022208 ?x_2py613)) :pattern ((sign_extend_44_64 ?x_2py613)) )) :named A1_832))
(assert (! (forall ((?x_2py614 Int)) (! (or (= (sign_extend_45_64 ?x_2py614) ?x_2py614) (not (<= (- 17592186044416) ?x_2py614)) (<= 17592186044416 ?x_2py614)) :pattern ((sign_extend_45_64 ?x_2py614)) )) :named A1_833))
(assert (! (forall ((?x_2py615 Int)) (! (or (= (sign_extend_46_64 ?x_2py615) ?x_2py615) (not (<= (- 35184372088832) ?x_2py615)) (<= 35184372088832 ?x_2py615)) :pattern ((sign_extend_46_64 ?x_2py615)) )) :named A1_834))
(assert (! (forall ((?x_2py616 Int)) (! (or (= (sign_extend_47_64 ?x_2py616) ?x_2py616) (not (<= (- 70368744177664) ?x_2py616)) (<= 70368744177664 ?x_2py616)) :pattern ((sign_extend_47_64 ?x_2py616)) )) :named A1_835))
(assert (! (forall ((?x_2py617 Int)) (! (or (= (sign_extend_48_64 ?x_2py617) ?x_2py617) (not (<= (- 140737488355328) ?x_2py617)) (<= 140737488355328 ?x_2py617)) :pattern ((sign_extend_48_64 ?x_2py617)) )) :named A1_836))
(assert (! (forall ((?x_2py618 Int)) (! (or (= (sign_extend_49_64 ?x_2py618) ?x_2py618) (<= 281474976710656 ?x_2py618) (not (<= (- 281474976710656) ?x_2py618))) :pattern ((sign_extend_49_64 ?x_2py618)) )) :named A1_837))
(assert (! (forall ((?x_2py619 Int)) (! (or (= (sign_extend_4_32 ?x_2py619) ?x_2py619) (not (<= (- 8) ?x_2py619)) (<= 8 ?x_2py619)) :pattern ((sign_extend_4_32 ?x_2py619)) )) :named A1_838))
(assert (! (forall ((?x_2py620 Int)) (! (or (= (sign_extend_4_64 ?x_2py620) ?x_2py620) (not (<= (- 8) ?x_2py620)) (<= 8 ?x_2py620)) :pattern ((sign_extend_4_64 ?x_2py620)) )) :named A1_839))
(assert (! (forall ((?x_2py621 Int)) (! (or (= (sign_extend_50_64 ?x_2py621) ?x_2py621) (not (<= (- 562949953421312) ?x_2py621)) (<= 562949953421312 ?x_2py621)) :pattern ((sign_extend_50_64 ?x_2py621)) )) :named A1_840))
(assert (! (forall ((?x_2py622 Int)) (! (or (= (sign_extend_51_64 ?x_2py622) ?x_2py622) (<= 1125899906842624 ?x_2py622) (not (<= (- 1125899906842624) ?x_2py622))) :pattern ((sign_extend_51_64 ?x_2py622)) )) :named A1_841))
(assert (! (forall ((?x_2py623 Int)) (! (or (= (sign_extend_52_64 ?x_2py623) ?x_2py623) (not (<= (- 2251799813685248) ?x_2py623)) (<= 2251799813685248 ?x_2py623)) :pattern ((sign_extend_52_64 ?x_2py623)) )) :named A1_842))
(assert (! (forall ((?x_2py624 Int)) (! (or (= (sign_extend_53_64 ?x_2py624) ?x_2py624) (<= 4503599627370496 ?x_2py624) (not (<= (- 4503599627370496) ?x_2py624))) :pattern ((sign_extend_53_64 ?x_2py624)) )) :named A1_843))
(assert (! (forall ((?x_2py625 Int)) (! (or (= (sign_extend_54_64 ?x_2py625) ?x_2py625) (not (<= (- 9007199254740992) ?x_2py625)) (<= 9007199254740992 ?x_2py625)) :pattern ((sign_extend_54_64 ?x_2py625)) )) :named A1_844))
(assert (! (forall ((?x_2py626 Int)) (! (or (= (sign_extend_55_64 ?x_2py626) ?x_2py626) (<= 18014398509481984 ?x_2py626) (not (<= (- 18014398509481984) ?x_2py626))) :pattern ((sign_extend_55_64 ?x_2py626)) )) :named A1_845))
(assert (! (forall ((?x_2py627 Int)) (! (or (= (sign_extend_56_64 ?x_2py627) ?x_2py627) (not (<= (- 36028797018963968) ?x_2py627)) (<= 36028797018963968 ?x_2py627)) :pattern ((sign_extend_56_64 ?x_2py627)) )) :named A1_846))
(assert (! (forall ((?x_2py628 Int)) (! (or (= (sign_extend_57_64 ?x_2py628) ?x_2py628) (not (<= (- 72057594037927936) ?x_2py628)) (<= 72057594037927936 ?x_2py628)) :pattern ((sign_extend_57_64 ?x_2py628)) )) :named A1_847))
(assert (! (forall ((?x_2py629 Int)) (! (or (= (sign_extend_58_64 ?x_2py629) ?x_2py629) (<= 144115188075855872 ?x_2py629) (not (<= (- 144115188075855872) ?x_2py629))) :pattern ((sign_extend_58_64 ?x_2py629)) )) :named A1_848))
(assert (! (forall ((?x_2py630 Int)) (! (or (= (sign_extend_59_64 ?x_2py630) ?x_2py630) (not (<= (- 288230376151711744) ?x_2py630)) (<= 288230376151711744 ?x_2py630)) :pattern ((sign_extend_59_64 ?x_2py630)) )) :named A1_849))
(assert (! (forall ((?x_2py631 Int)) (! (or (= (sign_extend_5_32 ?x_2py631) ?x_2py631) (not (<= (- 16) ?x_2py631)) (<= 16 ?x_2py631)) :pattern ((sign_extend_5_32 ?x_2py631)) )) :named A1_850))
(assert (! (forall ((?x_2py632 Int)) (! (or (= (sign_extend_5_64 ?x_2py632) ?x_2py632) (not (<= (- 16) ?x_2py632)) (<= 16 ?x_2py632)) :pattern ((sign_extend_5_64 ?x_2py632)) )) :named A1_851))
(assert (! (forall ((?x_2py633 Int)) (! (or (= (sign_extend_60_64 ?x_2py633) ?x_2py633) (not (<= (- 576460752303423488) ?x_2py633)) (<= 576460752303423488 ?x_2py633)) :pattern ((sign_extend_60_64 ?x_2py633)) )) :named A1_852))
(assert (! (forall ((?x_2py634 Int)) (! (or (= (sign_extend_61_64 ?x_2py634) ?x_2py634) (<= 1152921504606846976 ?x_2py634) (not (<= (- 1152921504606846976) ?x_2py634))) :pattern ((sign_extend_61_64 ?x_2py634)) )) :named A1_853))
(assert (! (forall ((?x_2py635 Int)) (! (or (= (sign_extend_62_64 ?x_2py635) ?x_2py635) (not (<= (- 2305843009213693952) ?x_2py635)) (<= 2305843009213693952 ?x_2py635)) :pattern ((sign_extend_62_64 ?x_2py635)) )) :named A1_854))
(assert (! (forall ((?x_2py636 Int)) (! (or (= (sign_extend_63_64 ?x_2py636) ?x_2py636) (not (<= (- 4611686018427387904) ?x_2py636)) (<= 4611686018427387904 ?x_2py636)) :pattern ((sign_extend_63_64 ?x_2py636)) )) :named A1_855))
(assert (! (forall ((?x_2py637 Int)) (! (or (= (sign_extend_6_32 ?x_2py637) ?x_2py637) (not (<= (- 32) ?x_2py637)) (<= 32 ?x_2py637)) :pattern ((sign_extend_6_32 ?x_2py637)) )) :named A1_856))
(assert (! (forall ((?x_2py638 Int)) (! (or (= (sign_extend_6_64 ?x_2py638) ?x_2py638) (not (<= (- 32) ?x_2py638)) (<= 32 ?x_2py638)) :pattern ((sign_extend_6_64 ?x_2py638)) )) :named A1_857))
(assert (! (forall ((?x_2py639 Int)) (! (or (= (sign_extend_7_32 ?x_2py639) ?x_2py639) (not (<= (- 64) ?x_2py639)) (<= 64 ?x_2py639)) :pattern ((sign_extend_7_32 ?x_2py639)) )) :named A1_858))
(assert (! (forall ((?x_2py640 Int)) (! (or (= (sign_extend_7_64 ?x_2py640) ?x_2py640) (not (<= (- 64) ?x_2py640)) (<= 64 ?x_2py640)) :pattern ((sign_extend_7_64 ?x_2py640)) )) :named A1_859))
(assert (! (forall ((?x_2py641 Int)) (! (or (= (sign_extend_8_32 ?x_2py641) ?x_2py641) (<= 128 ?x_2py641) (not (<= (- 128) ?x_2py641))) :pattern ((sign_extend_8_32 ?x_2py641)) )) :named A1_860))
(assert (! (forall ((?x_2py642 Int)) (! (or (= (sign_extend_8_64 ?x_2py642) ?x_2py642) (<= 128 ?x_2py642) (not (<= (- 128) ?x_2py642))) :pattern ((sign_extend_8_64 ?x_2py642)) )) :named A1_861))
(assert (! (forall ((?x_2py643 Int)) (! (or (= (sign_extend_9_32 ?x_2py643) ?x_2py643) (not (<= (- 256) ?x_2py643)) (<= 256 ?x_2py643)) :pattern ((sign_extend_9_32 ?x_2py643)) )) :named A1_862))
(assert (! (forall ((?x_2py644 Int)) (! (or (= (sign_extend_9_64 ?x_2py644) ?x_2py644) (not (<= (- 256) ?x_2py644)) (<= 256 ?x_2py644)) :pattern ((sign_extend_9_64 ?x_2py644)) )) :named A1_863))
(assert (! (forall ((x!1py0 Int)(x!2py0 Int)(x!3py0 Int)) (! (or (= (inv x!1py0 x!2py0 x!3py0) 0) (= (z3name!21 x!3py0 x!2py0 x!1py0) 1)) :pattern ((z3name!21 x!3py0 x!2py0 x!1py0)) )) :named A1_864))
(assert (! (forall ((x!1py1 Int)(x!2py1 Int)(x!3py1 Int)) (! (or (= (inv2 x!1py1 x!2py1 x!3py1) 0) (= (z3name!22 x!3py1 x!2py1 x!1py1) 1)) :pattern ((z3name!22 x!3py1 x!2py1 x!1py1)) )) :named A1_865))
(assert (! (forall ((x!1py2 Int)(x!2py2 Int)(x!3py2 Int)) (! (or (= (z3name!15 x!3py2 x!2py2 x!1py2) 0) (and (valid x!2py2 x!3py2 24) (= (select1 (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes) x!3py2) 1) (or (= (select2 x!2py2 (ptr2gid x!3py2) node__parent) ldnull) (and (valid x!2py2 (select2 x!2py2 (ptr2gid x!3py2) node__parent) 24) (not (= (select1 (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes) (select2 x!2py2 (ptr2gid x!3py2) node__parent)) 1)))) (forall ((?ppy76 Int)) (! (or (not (= (select1 (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes) ?ppy76) 1)) (and (= (base_zero ?ppy76) ?ppy76) (valid x!2py2 ?ppy76 24))) :pattern ((select1 (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes) ?ppy76)) )) (or (= (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1))) ldnull) (and (not (= (inv2 x!1py2 x!2py2 (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1)))) 0)) (set_subset (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1)))) node__reachable_nodes) (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes)) (= (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1)))) node__parent) x!3py2) (forall ((?ppy77 Int)) (! (or (not (= (select1 (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1)))) node__reachable_nodes) ?ppy77) 1)) (not (<= (ld_i4 x!1py2 x!3py2) (ld_i4 x!1py2 ?ppy77)))) :pattern ((select1 (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 8 1)))) node__reachable_nodes) ?ppy77)) )))) (or (= (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1))) ldnull) (and (not (= (inv2 x!1py2 x!2py2 (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1)))) 0)) (set_subset (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1)))) node__reachable_nodes) (select2 x!2py2 (ptr2gid x!3py2) node__reachable_nodes)) (= (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1)))) node__parent) x!3py2) (forall ((?ppy78 Int)) (! (or (not (= (select1 (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1)))) node__reachable_nodes) ?ppy78) 1)) (not (<= (ld_i4 x!1py2 ?ppy78) (ld_i4 x!1py2 x!3py2)))) :pattern ((select1 (select2 x!2py2 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py2 (add_ptr x!3py2 16 1)))) node__reachable_nodes) ?ppy78)) )))))) :pattern ((z3name!15 x!3py2 x!2py2 x!1py2)) )) :named A1_866))
(assert (! (forall ((x!1py3 Int)(x!2py3 Int)(x!3py3 Int)) (! (or (not (= (inv x!1py3 x!2py3 x!3py3) 0)) (= (z3name!21 x!3py3 x!2py3 x!1py3) 0)) :pattern ((z3name!21 x!3py3 x!2py3 x!1py3)) )) :named A1_867))
(assert (! (forall ((x!1py4 Int)(x!2py4 Int)(x!3py4 Int)) (! (or (not (= (inv2 x!1py4 x!2py4 x!3py4) 0)) (= (z3name!22 x!3py4 x!2py4 x!1py4) 0)) :pattern ((z3name!22 x!3py4 x!2py4 x!1py4)) )) :named A1_868))
(assert (! (forall ((x!1py5 Int)(x!2py5 Int)(x!3py5 Int)) (! (or (not (valid x!2py5 x!3py5 24)) (not (= (select1 (select2 x!2py5 (ptr2gid x!3py5) node__reachable_nodes) x!3py5) 1)) (and (not (= (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 8 1))) ldnull)) (or (= (inv2 x!1py5 x!2py5 (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 8 1)))) 0) (not (set_subset (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 8 1)))) node__reachable_nodes) (select2 x!2py5 (ptr2gid x!3py5) node__reachable_nodes))) (not (= (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 8 1)))) node__parent) x!3py5)) (and (= (select1 (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 8 1)))) node__reachable_nodes) (?p!17 x!3py5 x!2py5 x!1py5)) 1) (<= (ld_i4 x!1py5 x!3py5) (ld_i4 x!1py5 (?p!17 x!3py5 x!2py5 x!1py5)))))) (= (z3name!15 x!3py5 x!2py5 x!1py5) 1) (and (not (= (select2 x!2py5 (ptr2gid x!3py5) node__parent) ldnull)) (or (not (valid x!2py5 (select2 x!2py5 (ptr2gid x!3py5) node__parent) 24)) (= (select1 (select2 x!2py5 (ptr2gid x!3py5) node__reachable_nodes) (select2 x!2py5 (ptr2gid x!3py5) node__parent)) 1))) (and (= (select1 (select2 x!2py5 (ptr2gid x!3py5) node__reachable_nodes) (?p!16 x!3py5 x!2py5)) 1) (or (not (= (base_zero (?p!16 x!3py5 x!2py5)) (?p!16 x!3py5 x!2py5))) (not (valid x!2py5 (?p!16 x!3py5 x!2py5) 24)))) (and (not (= (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 16 1))) ldnull)) (or (= (inv2 x!1py5 x!2py5 (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 16 1)))) 0) (not (set_subset (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 16 1)))) node__reachable_nodes) (select2 x!2py5 (ptr2gid x!3py5) node__reachable_nodes))) (not (= (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 16 1)))) node__parent) x!3py5)) (and (= (select1 (select2 x!2py5 (ptr2gid (conv_u8_to_ptr (ld_u8 x!1py5 (add_ptr x!3py5 16 1)))) node__reachable_nodes) (?p!18 x!3py5 x!2py5 x!1py5)) 1) (<= (ld_i4 x!1py5 (?p!18 x!3py5 x!2py5 x!1py5)) (ld_i4 x!1py5 x!3py5)))))) :pattern ((z3name!15 x!3py5 x!2py5 x!1py5)) )) :named A1_869))
(assert (! (not (conv_i4_to_bool 0)) :named A1_870))
(assert (! (not (overlaps empty empty)) :named A1_871))
(assert (! (<= d max_i4) :named A2_0))
(assert (! (<= min_i4 d) :named A2_1))
(assert (! (= allocated_0 empty) :named A2_2))
(assert (! (= localAllocated_0 empty) :named A2_3))
(assert (! (= writes_0 (NodeFootprint mem gmem t)) :named A2_4))
(assert (! (good_gmem gmem) :named A2_5))
(assert (! (good_mem mem) :named A2_6))
(assert (! (not (= (inv mem gmem t) 0)) :named A2_7))
(assert (! (not (= (select1 (select2 gmem (ptr2gid t) node__reachable_nodes) new_node) 1)) :named A2_8))
(assert (! (not (= new_node (select2 gmem (ptr2gid t) node__parent))) :named A2_9))
(assert (! (or (not (valid gmem t 4)) (and (valid gmem t 4) (not (<= (ld_i4 mem t) d)) (or (not (valid gmem (add_ptr t 8 1) 8)) (and (valid gmem (add_ptr t 8 1) 8) (or (and (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 8 1))) ldnull) (or (and (not (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1))) ldnull)) (= (inv mem gmem (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1)))) 0)) (and (or (not (= (inv mem gmem (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1)))) 0)) (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1))) ldnull)) (or (and (not (= t ldnull)) (= (inv mem gmem t) 0)) (and (or (= t ldnull) (not (= (inv mem gmem t) 0))) (good_mem mem_0) (good_gmem gmem_0) (only_region_changed_or_new empty gmem gmem_0 mem mem_0) (alloc_grows gmem gmem_0) (= call1538formal___writes_0 empty) (= (ld_i4 mem_0 call1538formal__retval_0) d) (= (select2 gmem_0 (ptr2gid call1538formal__retval_0) node__parent) t) (= (conv_u8_to_ptr (ld_u8 mem_0 (add_ptr call1538formal__retval_0 8 1))) ldnull) (= (conv_u8_to_ptr (ld_u8 mem_0 (add_ptr call1538formal__retval_0 16 1))) ldnull) (= (select2 gmem_0 (ptr2gid call1538formal__retval_0) node__reachable_nodes) (set_singleton call1538formal__retval_0)) (not (= (inv mem_0 gmem_0 call1538formal__retval_0) 0)) (= (offset call1538formal__retval_0) 0) (= (select2 gmem (ptr2gid (ptr (base call1538formal__retval_0) 0)) size) 0) (not (= (select2 gmem_0 (ptr2gid (ptr (base call1538formal__retval_0) 0)) size) 0)) (or (not (contains call1538formal___writes_0 (union writes_0 (union allocated_0 localAllocated_0)))) (and (contains call1538formal___writes_0 (union writes_0 (union allocated_0 localAllocated_0))) (= call1538formal__retval_0 new_node) (or (not (valid gmem_0 (add_ptr t 8 1) 8)) (and (valid gmem_0 (add_ptr t 8 1) 8) (or (not (contains (region (add_ptr t 8 1) 8) (union writes_0 (union allocated_0 localAllocated_0)))) (and (contains (region (add_ptr t 8 1) 8) (union writes_0 (union allocated_0 localAllocated_0))) (only_region_changed_or_new_nontrans (region (add_ptr t 8 1) 8) gmem_0 gmem_0 mem_0 (st_u8 mem_0 (add_ptr t 8 1) (+ (conv_base_to_i8 (base call1538formal__retval_0)) (offset call1538formal__retval_0)))) (good_mem (st_u8 mem_0 (add_ptr t 8 1) (+ (conv_base_to_i8 (base call1538formal__retval_0)) (offset call1538formal__retval_0)))) (= mem_1 (st_u8 mem_0 (add_ptr t 8 1) (+ (conv_base_to_i8 (base call1538formal__retval_0)) (offset call1538formal__retval_0)))) (or (not (contains (region t 1) (union writes_0 (union allocated_0 localAllocated_0)))) (and (contains (region t 1) (union writes_0 (union allocated_0 localAllocated_0))) (= gmem_1 (store2 gmem_0 (ptr2gid t) node__reachable_nodes (set_union (set_singleton call1538formal__retval_0) (select2 gmem_0 (ptr2gid t) node__reachable_nodes)))) (only_region_changed_or_new_nontrans (region t 1) gmem_0 gmem_1 mem_1 mem_1) (good_gmem gmem_1) (or (= (inv mem_1 gmem_1 (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 8 1)))) 0) (and (not (= (inv mem_1 gmem_1 (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 8 1)))) 0)) (or (and (not (= (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 16 1))) ldnull)) (= (inv mem_1 gmem_1 (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 16 1)))) 0)) (and (or (not (= (inv mem_1 gmem_1 (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 16 1)))) 0)) (= (conv_u8_to_ptr (ld_u8 mem_1 (add_ptr t 16 1))) ldnull)) (= calleeWrites_0 call1538formal___writes_0) (= temp9_0 temp9) (= temp10_0 call1538formal__retval_0) (= mem_3 mem_1) (= gmem_4 gmem_1) (= x_0 call1538formal__retval_0) (= temp11_0 gmem_0) (= calleeWrites_1 calleeWrites_0) (= mem_4 mem_3) (= temp9_1 temp9_0) (= temp10_1 temp10_0) (= gmem_5 gmem_4) (= x_1_1 x_0) (= temp11_1 temp11_0) (or (and (= (select1 (select2 gmem (ptr2gid t) node__reachable_nodes) ?p!23) 1) (not (= (ld_i4 mem ?p!23) (ld_i4 mem_4 ?p!23)))) (and (forall ((?ppy79 Int)) (! (or (not (= (select1 (select2 gmem (ptr2gid t) node__reachable_nodes) ?ppy79) 1)) (= (ld_i4 mem ?ppy79) (ld_i4 mem_4 ?ppy79))) :pattern ((ld_i4 mem_4 ?ppy79)) )) (or (not (= (ld_i4 mem_4 new_node) d)) (and (= (ld_i4 mem_4 new_node) d) (or (not (= (select2 gmem_5 (ptr2gid t) node__reachable_nodes) (set_union (set_singleton new_node) (select2 gmem (ptr2gid t) node__reachable_nodes)))) (and (= (select2 gmem_5 (ptr2gid t) node__reachable_nodes) (set_union (set_singleton new_node) (select2 gmem (ptr2gid t) node__reachable_nodes))) (or (not (= (select2 gmem_5 (ptr2gid t) node__parent) (select2 gmem (ptr2gid t) node__parent))) (and (= (select2 gmem_5 (ptr2gid t) node__parent) (select2 gmem (ptr2gid t) node__parent)) (= (inv mem_4 gmem_5 t) 0)))))))))))))))))))))))))) (and (not (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 8 1))) ldnull)) (or (and (not (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1))) ldnull)) (= (inv mem gmem (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1)))) 0)) (and (or (not (= (inv mem gmem (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1)))) 0)) (= (conv_u8_to_ptr (ld_u8 mem (add_ptr t 16 1))) ldnull)) (or (not (valid gmem (add_ptr t 8 1) 8)) (and (valid gmem (add_ptr t 8 1) 8) (= call1421formal_t_0 (conv_u8_to_ptr (ld_u8 mem (add_ptr t 8 1)))) (or (= (inv mem gmem call1421formal_t_0) 0) (and (not (= (inv mem gmem call1421formal_t_0) 0)) (or (and (not (= (select1 (select2 gmem (ptr2gid call1421formal_t_0) node__reachable_nodes) new_node) 1)) (not (= new_node (select2 gmem (ptr2gid call1421formal_t_0) node__parent))) (good_mem mem_2) (good_gmem gmem_2) (only_region_changed_or_new (NodeFootprint mem gmem call1421formal_t_0) gmem gmem_2 mem mem_2) (alloc_grows gmem gmem_2) (= call1421formal___writes_0 (NodeFootprint mem gmem call1421formal_t_0)) (not (= (inv mem_2 gmem_2 call1421formal_t_0) 0)) (= (select2 gmem_2 (ptr2gid call1421formal_t_0) node__parent) (select2 gmem (ptr2gid call1421formal_t_0) node__parent)) (= (select2 gmem_2 (ptr2gid call1421formal_t_0) node__reachable_nodes) (set_union (set_singleton new_node) (select2 gmem (ptr2gid call1421formal_t_0) node__reachable_nodes))) (= (ld_i4 mem_2 new_node) d) (forall ((?ppy80 Int)) (! (or (not (= (select1 (select2 gmem (ptr2gid call1421formal_t_0) node__reachable_nodes) ?ppy80) 1)) (= (ld_i4 mem ?ppy80) (ld_i4 mem_2 ?ppy80))) :pattern ((ld_i4 mem_2 ?ppy80)) )) (or (not (contains call1421formal___writes_0 (union writes_0 (union allocated_0 localAllocated_0)))) (and (contains call1421formal___writes_0 (union writes_0 (union allocated_0 localAllocated_0))) (or (not (contains (region t 1) (union writes_0 (union allocated_0 localAllocated_0)))) (and (contains (region t 1) (union writes_0 (union allocated_0 localAllocated_0))) (= gmem_3 (store2 gmem_2 (ptr2gid t) node__reachable_nodes (set_union (set_singleton new_node) (select2 gmem_2 (ptr2gid t) node__reachable_nodes)))) (only_region_changed_or_new_nontrans (region t 1) gmem_2 gmem_3 mem_2 mem_2) (good_gmem gmem_3) (or (= (inv mem_2 gmem_3 (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 8 1)))) 0) (and (not (= (inv mem_2 gmem_3 (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 8 1)))) 0)) (or (and (not (= (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 16 1))) ldnull)) (= (inv mem_2 gmem_3 (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 16 1)))) 0)) (and (or (= (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 16 1))) ldnull) (not (= (inv mem_2 gmem_3 (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 16 1)))) 0))) (or (not (= (select1 (select2 gmem_3 (ptr2gid (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 8 1)))) node__reachable_nodes) new_node) 1)) (and (= (select1 (select2 gmem_3 (ptr2gid (conv_u8_to_ptr (ld_u8 mem_2 (add_ptr t 8 1)))) node__reachable_nodes) new_node) 1) (= calleeWrites_0 call1421formal___writes_0) (= temp9_0 gmem_2) (= temp10_0 temp10) (= mem_3 mem_2) (= gmem_4 gmem_3) (= x_0 x_2) (= temp11_0 temp11) (= calleeWrites_1 calleeWrites_0) (= mem_4 mem_3) (= temp9_1 temp9_0) (= temp10_1 temp10_0) (= gmem_5 gmem_4) (= x_1_1 x_0) (= temp11_1 temp11_0) (or (and (= (select1 (select2 gmem (ptr2gid t) node__reachable_nodes) ?p!23) 1) (not (= (ld_i4 mem ?p!23) (ld_i4 mem_4 ?p!23)))) (and (forall ((?ppy81 Int)) (! (or (not (= (select1 (select2 gmem (ptr2gid t) node__reachable_nodes) ?ppy81) 1)) (= (ld_i4 mem ?ppy81) (ld_i4 mem_4 ?ppy81))) :pattern ((ld_i4 mem_4 ?ppy81)) )) (or (not (= (ld_i4 mem_4 new_node) d)) (and (= (ld_i4 mem_4 new_node) d) (or (not (= (select2 gmem_5 (ptr2gid t) node__reachable_nodes) (set_union (set_singleton new_node) (select2 gmem (ptr2gid t) node__reachable_nodes)))) (and (= (select2 gmem_5 (ptr2gid t) node__reachable_nodes) (set_union (set_singleton new_node) (select2 gmem (ptr2gid t) node__reachable_nodes))) (or (not (= (select2 gmem_5 (ptr2gid t) node__parent) (select2 gmem (ptr2gid t) node__parent))) (and (= (select2 gmem_5 (ptr2gid t) node__parent) (select2 gmem (ptr2gid t) node__parent)) (= (inv mem_4 gmem_5 t) 0)))))))))))))))))))) (= (select1 (select2 gmem (ptr2gid call1421formal_t_0) node__reachable_nodes) new_node) 1) (= new_node (select2 gmem (ptr2gid call1421formal_t_0) node__parent))))))))))))))) :named A2_10))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 group_003/ematching/tmp/BinarySearchTree.c.3.Insert_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
