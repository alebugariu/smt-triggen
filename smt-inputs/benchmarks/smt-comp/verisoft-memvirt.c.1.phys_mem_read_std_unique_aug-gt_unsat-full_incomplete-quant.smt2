(set-info :smt-lib-version 2.6)
(set-info :source | VCC and HAVOC benchmarks. Contributed by Nikolaj Bjorner, Leonardo de Moura, Michal Moskal, and Shaz Qadeer. |)
(set-info :category "industrial")
(set-info :status unsat)
(set-logic UFNIA)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-fun bv_concat (Int Int Int Int) Int)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-fun bv_extract (Int Int Int Int) Int)
(declare-fun pow2 (Int) Int)
(declare-fun true_1 () Int)
(declare-fun false_1 () Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun select1 (Int Int) Int)
(declare-fun store1 (Int Int Int) Int)
(declare-fun bl_xlat (Int Int) Int)
(declare-fun max_u4 () Int)
(declare-fun min_u4 () Int)
(declare-fun rot1_xlat (Int Int Int) Int)
(declare-fun fake__id () Int)
(declare-fun region (Int Int) Int)
(declare-fun sizeof (Int) Int)
(declare-fun add_ptr (Int Int Int) Int)
(declare-fun set_to_region (Int) Int)
(declare-fun set_difference (Int Int) Int)
(declare-fun set_union (Int Int) Int)
(declare-fun set_singleton (Int) Int)
(declare-fun set_empty () Int)
(declare-fun memory_id (Int Int) Int)
(declare-fun union (Int Int) Int)
(declare-fun ptr2gid (Int) Int)
(declare-fun size () Int)
(declare-fun ptr (Int Int) Int)
(declare-fun ld_u1 (Int Int) Int)
(declare-fun base (Int) Int)
(declare-fun conv_u8_to_ptr (Int) Int)
(declare-fun ld_u8 (Int Int) Int)
(declare-fun ld_i8 (Int Int) Int)
(declare-fun ld_u4 (Int Int) Int)
(declare-fun ld_i4 (Int Int) Int)
(declare-fun ld_u2 (Int Int) Int)
(declare-fun ld_i2 (Int Int) Int)
(declare-fun ld_i1 (Int Int) Int)
(declare-fun offset (Int) Int)
(declare-fun subtraction (Int Int) Int)
(declare-fun empty () Int)
(declare-fun universe () Int)
(declare-fun global_ghost () Int)
(declare-fun ldnull () Int)
(declare-fun sub_ptr (Int Int) Int)
(declare-fun nullObject () Int)
(declare-fun gid2ptr (Int) Int)
(declare-fun neg_unchk_i8 (Int) Int)
(declare-fun min_i8 () Int)
(declare-fun neg_unchk_i4 (Int) Int)
(declare-fun min_i4 () Int)
(declare-fun max_u8 () Int)
(declare-fun min_u8 () Int)
(declare-fun max_i8 () Int)
(declare-fun max_i4 () Int)
(declare-fun max_u2 () Int)
(declare-fun min_u2 () Int)
(declare-fun max_i2 () Int)
(declare-fun min_i2 () Int)
(declare-fun max_u1 () Int)
(declare-fun min_u1 () Int)
(declare-fun max_i1 () Int)
(declare-fun min_i1 () Int)
(declare-fun rem_unchk_u8 (Int Int) Int)
(declare-fun x (Int Int) Int)
(declare-fun rem_unchk_i8 (Int Int) Int)
(declare-fun rem_unchk_u4 (Int Int) Int)
(declare-fun rem_unchk_i4 (Int Int) Int)
(declare-fun div_unchk_u8 (Int Int) Int)
(declare-fun x_1 (Int Int) Int)
(declare-fun div_unchk_i8 (Int Int) Int)
(declare-fun div_unchk_u4 (Int Int) Int)
(declare-fun div_unchk_i4 (Int Int) Int)
(declare-fun mul_unchk_u8 (Int Int) Int)
(declare-fun mul_unchk_i8 (Int Int) Int)
(declare-fun mul_unchk_u4 (Int Int) Int)
(declare-fun mul_unchk_i4 (Int Int) Int)
(declare-fun sub_unchk_u8 (Int Int) Int)
(declare-fun sub_unchk_i8 (Int Int) Int)
(declare-fun sub_unchk_u4 (Int Int) Int)
(declare-fun sub_unchk_i4 (Int Int) Int)
(declare-fun add_unchk_u8 (Int Int) Int)
(declare-fun add_unchk_i8 (Int Int) Int)
(declare-fun add_unchk_u4 (Int Int) Int)
(declare-fun add_unchk_i4 (Int Int) Int)
(declare-fun conv_bool_to_i4 (Int) Int)
(declare-fun conv_base_to_i8 (Int) Int)
(declare-fun conv_i8_to_ptr (Int) Int)
(declare-fun conv_u8_to_u8 (Int) Int)
(declare-fun conv_u8_to_i8 (Int) Int)
(declare-fun conv_u8_to_u4 (Int) Int)
(declare-fun conv_u8_to_i4 (Int) Int)
(declare-fun conv_u8_to_u2 (Int) Int)
(declare-fun conv_u8_to_i2 (Int) Int)
(declare-fun conv_u8_to_u1 (Int) Int)
(declare-fun conv_u8_to_i1 (Int) Int)
(declare-fun conv_i8_to_u8 (Int) Int)
(declare-fun conv_i8_to_i8 (Int) Int)
(declare-fun conv_i8_to_u4 (Int) Int)
(declare-fun conv_i8_to_i4 (Int) Int)
(declare-fun conv_i8_to_u2 (Int) Int)
(declare-fun conv_i8_to_i2 (Int) Int)
(declare-fun conv_i8_to_u1 (Int) Int)
(declare-fun conv_i8_to_i1 (Int) Int)
(declare-fun conv_u4_to_u8 (Int) Int)
(declare-fun conv_u4_to_i8 (Int) Int)
(declare-fun conv_u4_to_u4 (Int) Int)
(declare-fun conv_u4_to_i4 (Int) Int)
(declare-fun conv_u4_to_u2 (Int) Int)
(declare-fun conv_u4_to_i2 (Int) Int)
(declare-fun conv_u4_to_u1 (Int) Int)
(declare-fun conv_u4_to_i1 (Int) Int)
(declare-fun conv_i4_to_u8 (Int) Int)
(declare-fun conv_i4_to_i8 (Int) Int)
(declare-fun conv_i4_to_u4 (Int) Int)
(declare-fun conv_i4_to_i4 (Int) Int)
(declare-fun conv_i4_to_u2 (Int) Int)
(declare-fun conv_i4_to_i2 (Int) Int)
(declare-fun conv_i4_to_u1 (Int) Int)
(declare-fun conv_i4_to_i1 (Int) Int)
(declare-fun st_u4 (Int Int Int) Int)
(declare-fun st_i8 (Int Int Int) Int)
(declare-fun st_u2 (Int Int Int) Int)
(declare-fun st_u1 (Int Int Int) Int)
(declare-fun st_i4 (Int Int Int) Int)
(declare-fun st_u8 (Int Int Int) Int)
(declare-fun st_i2 (Int Int Int) Int)
(declare-fun st_i1 (Int Int Int) Int)
(declare-fun and_1 (Int Int) Int)
(declare-fun xor_1 (Int Int) Int)
(declare-fun or_1 (Int Int) Int)
(declare-fun not_1 (Int) Int)
(declare-fun shr (Int Int) Int)
(declare-fun shl (Int Int) Int)
(declare-fun sign_extend_63_64 (Int) Int)
(declare-fun sign_extend_62_64 (Int) Int)
(declare-fun sign_extend_61_64 (Int) Int)
(declare-fun sign_extend_60_64 (Int) Int)
(declare-fun sign_extend_59_64 (Int) Int)
(declare-fun sign_extend_58_64 (Int) Int)
(declare-fun sign_extend_57_64 (Int) Int)
(declare-fun sign_extend_56_64 (Int) Int)
(declare-fun sign_extend_55_64 (Int) Int)
(declare-fun sign_extend_54_64 (Int) Int)
(declare-fun sign_extend_53_64 (Int) Int)
(declare-fun sign_extend_52_64 (Int) Int)
(declare-fun sign_extend_51_64 (Int) Int)
(declare-fun sign_extend_50_64 (Int) Int)
(declare-fun sign_extend_49_64 (Int) Int)
(declare-fun sign_extend_48_64 (Int) Int)
(declare-fun sign_extend_47_64 (Int) Int)
(declare-fun sign_extend_46_64 (Int) Int)
(declare-fun sign_extend_45_64 (Int) Int)
(declare-fun sign_extend_44_64 (Int) Int)
(declare-fun sign_extend_43_64 (Int) Int)
(declare-fun sign_extend_42_64 (Int) Int)
(declare-fun sign_extend_41_64 (Int) Int)
(declare-fun sign_extend_40_64 (Int) Int)
(declare-fun sign_extend_39_64 (Int) Int)
(declare-fun sign_extend_38_64 (Int) Int)
(declare-fun sign_extend_37_64 (Int) Int)
(declare-fun sign_extend_36_64 (Int) Int)
(declare-fun sign_extend_35_64 (Int) Int)
(declare-fun sign_extend_34_64 (Int) Int)
(declare-fun sign_extend_33_64 (Int) Int)
(declare-fun sign_extend_32_64 (Int) Int)
(declare-fun sign_extend_32_32 (Int) Int)
(declare-fun sign_extend_31_64 (Int) Int)
(declare-fun sign_extend_31_32 (Int) Int)
(declare-fun sign_extend_30_64 (Int) Int)
(declare-fun sign_extend_30_32 (Int) Int)
(declare-fun sign_extend_29_64 (Int) Int)
(declare-fun sign_extend_29_32 (Int) Int)
(declare-fun sign_extend_28_64 (Int) Int)
(declare-fun sign_extend_28_32 (Int) Int)
(declare-fun sign_extend_27_64 (Int) Int)
(declare-fun sign_extend_27_32 (Int) Int)
(declare-fun sign_extend_26_64 (Int) Int)
(declare-fun sign_extend_26_32 (Int) Int)
(declare-fun sign_extend_25_64 (Int) Int)
(declare-fun sign_extend_25_32 (Int) Int)
(declare-fun sign_extend_24_64 (Int) Int)
(declare-fun sign_extend_24_32 (Int) Int)
(declare-fun sign_extend_23_64 (Int) Int)
(declare-fun sign_extend_23_32 (Int) Int)
(declare-fun sign_extend_22_64 (Int) Int)
(declare-fun sign_extend_22_32 (Int) Int)
(declare-fun sign_extend_21_64 (Int) Int)
(declare-fun sign_extend_21_32 (Int) Int)
(declare-fun sign_extend_20_64 (Int) Int)
(declare-fun sign_extend_20_32 (Int) Int)
(declare-fun sign_extend_19_64 (Int) Int)
(declare-fun sign_extend_19_32 (Int) Int)
(declare-fun sign_extend_18_64 (Int) Int)
(declare-fun sign_extend_18_32 (Int) Int)
(declare-fun sign_extend_17_64 (Int) Int)
(declare-fun sign_extend_17_32 (Int) Int)
(declare-fun sign_extend_16_64 (Int) Int)
(declare-fun sign_extend_16_32 (Int) Int)
(declare-fun sign_extend_15_64 (Int) Int)
(declare-fun sign_extend_15_32 (Int) Int)
(declare-fun sign_extend_14_64 (Int) Int)
(declare-fun sign_extend_14_32 (Int) Int)
(declare-fun sign_extend_13_64 (Int) Int)
(declare-fun sign_extend_13_32 (Int) Int)
(declare-fun sign_extend_12_64 (Int) Int)
(declare-fun sign_extend_12_32 (Int) Int)
(declare-fun sign_extend_11_64 (Int) Int)
(declare-fun sign_extend_11_32 (Int) Int)
(declare-fun sign_extend_10_64 (Int) Int)
(declare-fun sign_extend_10_32 (Int) Int)
(declare-fun sign_extend_9_64 (Int) Int)
(declare-fun sign_extend_9_32 (Int) Int)
(declare-fun sign_extend_8_64 (Int) Int)
(declare-fun sign_extend_8_32 (Int) Int)
(declare-fun sign_extend_7_64 (Int) Int)
(declare-fun sign_extend_7_32 (Int) Int)
(declare-fun sign_extend_6_64 (Int) Int)
(declare-fun sign_extend_6_32 (Int) Int)
(declare-fun sign_extend_5_64 (Int) Int)
(declare-fun sign_extend_5_32 (Int) Int)
(declare-fun sign_extend_4_64 (Int) Int)
(declare-fun sign_extend_4_32 (Int) Int)
(declare-fun sign_extend_3_64 (Int) Int)
(declare-fun sign_extend_3_32 (Int) Int)
(declare-fun sign_extend_2_64 (Int) Int)
(declare-fun sign_extend_2_32 (Int) Int)
(declare-fun sign_extend_1_64 (Int) Int)
(declare-fun sign_extend_1_32 (Int) Int)
(declare-fun base_zero (Int) Int)
(declare-fun Size () Int)
(declare-fun Mem () Int)
(declare-fun gmem () Int)
(declare-fun pa () Int)
(declare-fun mem () Int)
(declare-fun retval () Int)
(declare-fun localAllocated_0 () Int)
(declare-fun allocated_0 () Int)
(declare-fun reads_0 () Int)
(declare-fun x_2 (Int Int) Bool)
(declare-fun good_gmem (Int) Bool)
(declare-fun overlaps (Int Int) Bool)
(declare-fun is (Int Int) Bool)
(declare-fun disjoint_types (Int Int) Bool)
(declare-fun contains (Int Int) Bool)
(declare-fun set_disjoint (Int Int) Bool)
(declare-fun set_equal (Int Int) Bool)
(declare-fun set_subset (Int Int) Bool)
(declare-fun only_region_changed_or_new_trans (Int Int Int Int Int) Bool)
(declare-fun only_region_changed_or_new_nontrans (Int Int Int Int Int) Bool)
(declare-fun only_region_changed_or_new (Int Int Int Int Int) Bool)
(declare-fun alloc_grows (Int Int) Bool)
(declare-fun only_single_ghost_changed (Int Int Int Int Int Int) Bool)
(declare-fun only_region_changed (Int Int Int) Bool)
(declare-fun simple_subregion (Int Int) Bool)
(declare-fun next_mem (Int Int) Bool)
(declare-fun zero_region (Int Int Int) Bool)
(declare-fun same_region (Int Int Int Int Int) Bool)
(declare-fun valid (Int Int Int) Bool)
(declare-fun same_mem (Int Int Int Int) Bool)
(declare-fun good_mem (Int) Bool)
(declare-fun conv_i4_to_bool (Int) Bool)
(declare-fun ?o!12 (Int Int) Int)
(declare-fun z3name!15 (Int Int) Int)
(declare-fun ?p!6 (Int Int Int) Int)
(declare-fun ?o!10 (Int Int) Int)
(declare-fun ?p!13 (Int Int) Int)
(declare-fun ?p!7 (Int Int) Int)
(declare-fun ?p!5 (Int Int Int Int) Int)
(declare-fun ?n2!8 (Int Int Int Int) Int)
(declare-fun ?off!2 (Int Int Int Int) Int)
(declare-fun ?n!3 (Int Int Int) Int)
(declare-fun ?p!4 (Int Int Int) Int)
(declare-fun ?p!14 (Int Int) Int)
(declare-fun ?p!9 (Int Int Int Int) Int)
(declare-fun ?o!11 (Int Int) Int)
(declare-fun z3name!0 () Int)
(declare-fun z3name!1 () Int)
(assert (! (= (pow2 0) 1) :named A0_0))
(assert (! (forall ((?Apy0 Int)(?ipy0 Int)(?jpy0 Int)(?vpy0 Int)) (! (or (= ?ipy0 ?jpy0) (= (select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0) (select1 ?Apy0 ?jpy0))) :pattern ((select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0)) )) :named A0_1))
(assert (! (forall ((?Apy1 Int)(?ipy1 Int)(?vpy1 Int)) (! (= (select1 (store1 ?Apy1 ?ipy1 ?vpy1) ?ipy1) ?vpy1) :pattern ((store1 ?Apy1 ?ipy1 ?vpy1)) )) :named A0_2))
(assert (! (forall ((?Apy2 Int)(?opy0 Int)(?fpy0 Int)(?ppy0 Int)(?gpy0 Int)(?vpy2 Int)) (! (or (= ?fpy0 ?gpy0) (= (select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0) (select2 ?Apy2 ?ppy0 ?gpy0))) :pattern ((select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0)) )) :named A0_3))
(assert (! (forall ((?Apy3 Int)(?opy1 Int)(?fpy1 Int)(?ppy1 Int)(?gpy1 Int)(?vpy3 Int)) (! (or (= ?opy1 ?ppy1) (= (select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1) (select2 ?Apy3 ?ppy1 ?gpy1))) :pattern ((select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1)) )) :named A0_4))
(assert (! (forall ((?Apy4 Int)(?opy2 Int)(?fpy2 Int)(?vpy4 Int)) (! (= (select2 (store2 ?Apy4 ?opy2 ?fpy2 ?vpy4) ?opy2 ?fpy2) ?vpy4) :pattern ((store2 ?Apy4 ?opy2 ?fpy2 ?vpy4)) )) :named A0_5))
(assert (! (forall ((?npy0 Int)) (! (or (<= ?npy0 0) (= (pow2 ?npy0) (* 2 (pow2 (+ (- 1) ?npy0))))) :pattern ((pow2 ?npy0)) )) :named A0_6))
(assert (! (forall ((?tpy0 Int)(?upy0 Int)(?vpy5 Int)) (! (or (not (x_2 ?tpy0 ?upy0)) (not (x_2 ?upy0 ?vpy5)) (x_2 ?tpy0 ?vpy5)) :pattern ((x_2 ?tpy0 ?upy0) (x_2 ?upy0 ?vpy5)) )) :named A0_7))
(assert (! (forall ((?tpy1 Int)(?upy1 Int)) (! (or (not (x_2 ?tpy1 ?upy1)) (not (x_2 ?upy1 ?tpy1)) (= ?tpy1 ?upy1)) :pattern ((x_2 ?tpy1 ?upy1) (x_2 ?upy1 ?tpy1)) )) :named A0_8))
(assert (! (forall ((?tpy2 Int)) (! (x_2 ?tpy2 ?tpy2) :pattern ((x_2 ?tpy2 ?tpy2)) )) :named A0_9))
(assert (! (forall ((?vpy6 Int)(?apy0 Int)(?bpy0 Int)) (! (or (<= ?bpy0 0) (<= 0 (bv_concat 0 ?bpy0 ?vpy6 ?apy0))) :pattern ((bv_concat 0 ?bpy0 ?vpy6 ?apy0)) )) :named A0_10))
(assert (! (forall ((?vpy7 Int)(?lpy0 Int)(?apy1 Int)(?bpy1 Int)) (! (or (not (<= 0 ?vpy7)) (not (= ?lpy0 (+ ?apy1 ?bpy1))) (= (bv_concat 0 ?bpy1 (bv_extract ?vpy7 ?lpy0 0 ?apy1) ?apy1) ?vpy7) (<= (pow2 ?apy1) ?vpy7)) :pattern ((bv_concat 0 ?bpy1 (bv_extract ?vpy7 ?lpy0 0 ?apy1) ?apy1)) )) :named A0_11))
(assert (! (forall ((?vpy8 Int)(?lpy1 Int)) (! (= (bv_extract ?vpy8 ?lpy1 0 ?lpy1) ?vpy8) :pattern ((bv_extract ?vpy8 ?lpy1 0 ?lpy1)) )) :named A0_12))
(assert (! (forall ((?vpy9 Int)(?lvpy0 Int)(?wpy0 Int)(?lwpy0 Int)(?lvwpy0 Int)(?apy2 Int)(?bpy2 Int)) (! (or (not (<= ?bpy2 ?lwpy0)) (= (bv_extract (bv_concat ?vpy9 ?lvpy0 ?wpy0 ?lwpy0) ?lvwpy0 ?apy2 ?bpy2) (bv_extract ?wpy0 ?lwpy0 ?apy2 ?bpy2))) :pattern ((bv_extract (bv_concat ?vpy9 ?lvpy0 ?wpy0 ?lwpy0) ?lvwpy0 ?apy2 ?bpy2)) )) :named A0_13))
(assert (! (forall ((?vpy10 Int)(?lvpy1 Int)(?wpy1 Int)(?lwpy1 Int)(?lvwpy1 Int)(?apy3 Int)(?bpy3 Int)) (! (or (not (<= 0 (+ ?apy3 (* (- 1) ?lwpy1)))) (= (bv_extract (bv_concat ?vpy10 ?lvpy1 ?wpy1 ?lwpy1) ?lvwpy1 ?apy3 ?bpy3) (bv_extract ?vpy10 ?lvpy1 (+ ?apy3 (* (- 1) ?lwpy1)) (+ ?bpy3 (* (- 1) ?lwpy1))))) :pattern ((bv_extract (bv_concat ?vpy10 ?lvpy1 ?wpy1 ?lwpy1) ?lvwpy1 ?apy3 ?bpy3)) )) :named A0_14))
(assert (! (forall ((?vpy11 Int)(?lvpy2 Int)(?x_3py0 Int)(?lxvpy0 Int)(?wpy2 Int)(?apy4 Int)(?bpy4 Int)) (! (or (not (<= ?x_3py0 ?apy4)) (= (bv_extract (bv_concat (bv_extract ?vpy11 ?lvpy2 ?x_3py0 ?lvpy2) ?lxvpy0 ?wpy2 ?x_3py0) ?lvpy2 ?apy4 ?bpy4) (bv_extract ?vpy11 ?lvpy2 ?apy4 ?bpy4)) (not (= ?lxvpy0 (+ ?lvpy2 (* (- 1) ?x_3py0))))) :pattern ((bv_extract (bv_concat (bv_extract ?vpy11 ?lvpy2 ?x_3py0 ?lvpy2) ?lxvpy0 ?wpy2 ?x_3py0) ?lvpy2 ?apy4 ?bpy4)) )) :named A0_15))
(assert (! (forall ((?vpy12 Int)(?lvpy3 Int)(?x_3py1 Int)(?lxvpy1 Int)(?wpy3 Int)(?lwpy2 Int)(?lwypy0 Int)(?ypy0 Int)(?apy5 Int)(?bpy5 Int)) (! (or (not (= ?lwypy0 (+ ?wpy3 ?ypy0))) (= (bv_extract (bv_concat (bv_extract ?vpy12 ?lvpy3 ?x_3py1 ?lvpy3) ?lxvpy1 (bv_concat ?wpy3 ?lwpy2 (bv_extract ?vpy12 ?lvpy3 0 ?ypy0) ?ypy0) ?lwypy0) ?lvpy3 ?apy5 ?bpy5) (bv_extract ?vpy12 ?lvpy3 ?apy5 ?bpy5)) (not (= ?lxvpy1 (+ ?lvpy3 (* (- 1) ?x_3py1)))) (not (= ?lwpy2 (+ ?x_3py1 (* (- 1) ?ypy0)))) (and (not (<= ?x_3py1 ?apy5)) (not (<= ?bpy5 ?ypy0)))) :pattern ((bv_extract (bv_concat (bv_extract ?vpy12 ?lvpy3 ?x_3py1 ?lvpy3) ?lxvpy1 (bv_concat ?wpy3 ?lwpy2 (bv_extract ?vpy12 ?lvpy3 0 ?ypy0) ?ypy0) ?lwypy0) ?lvpy3 ?apy5 ?bpy5)) )) :named A0_16))
(assert (! (not (= false_1 true_1)) :named A0_17))
(assert (! (= (+ (conv_base_to_i8 (base ldnull)) (offset ldnull)) 0) :named A1_0))
(assert (! (= (conv_bool_to_i4 z3name!0) 1) :named A1_1))
(assert (! (= (conv_bool_to_i4 z3name!1) 0) :named A1_2))
(assert (! (= (conv_i8_to_ptr 0) ldnull) :named A1_3))
(assert (! (= (conv_u8_to_ptr 0) ldnull) :named A1_4))
(assert (! (= ldnull (ptr nullObject 0)) :named A1_5))
(assert (! (= max_i1 127) :named A1_6))
(assert (! (= max_i2 32767) :named A1_7))
(assert (! (= max_i4 2147483647) :named A1_8))
(assert (! (= max_i8 9223372036854775807) :named A1_9))
(assert (! (= max_u1 255) :named A1_10))
(assert (! (= max_u2 65535) :named A1_11))
(assert (! (= max_u4 4294967295) :named A1_12))
(assert (! (= max_u8 18446744073709551615) :named A1_13))
(assert (! (= min_i1 (- 128)) :named A1_14))
(assert (! (= min_i2 (- 32768)) :named A1_15))
(assert (! (= min_i4 (- 2147483648)) :named A1_16))
(assert (! (= min_i8 (- 9223372036854775808)) :named A1_17))
(assert (! (= min_u1 0) :named A1_18))
(assert (! (= min_u2 0) :named A1_19))
(assert (! (= min_u4 0) :named A1_20))
(assert (! (= min_u8 0) :named A1_21))
(assert (! (= z3name!0 1) :named A1_22))
(assert (! (= z3name!1 0) :named A1_23))
(assert (! (and (not (= ldnull size)) (not (= ldnull global_ghost)) (not (= ldnull fake__id)) (not (= size global_ghost)) (not (= size fake__id)) (not (= global_ghost fake__id))) :named A1_24))
(assert (! (forall ((?Basepy0 Int)(?vapy0 Int)) (! (or (not (<= min_u4 ?vapy0)) (not (<= ?vapy0 max_u4)) (not (<= min_u4 ?Basepy0)) (not (<= ?Basepy0 max_u4)) (and (= (bl_xlat ?Basepy0 ?vapy0) (+ ?Basepy0 ?vapy0)) (<= min_u4 (bl_xlat ?Basepy0 ?vapy0)) (<= (bl_xlat ?Basepy0 ?vapy0) max_u4)) (<= 4294967295 (+ ?Basepy0 ?vapy0))) :pattern ((bl_xlat ?Basepy0 ?vapy0)) )) :named A1_25))
(assert (! (forall ((?Sizepy0 Int)(?Mempy0 Int)(?vapy1 Int)) (! (or (not (<= min_u4 ?vapy1)) (not (<= ?vapy1 max_u4)) (not (<= min_u4 ?Sizepy0)) (not (<= ?Sizepy0 max_u4)) (<= ?Sizepy0 0) (<= ?Sizepy0 ?vapy1) (and (= (rot1_xlat ?Sizepy0 ?Mempy0 ?vapy1) (z3name!15 ?vapy1 ?Sizepy0)) (<= min_u4 (rot1_xlat ?Sizepy0 ?Mempy0 ?vapy1)) (<= (rot1_xlat ?Sizepy0 ?Mempy0 ?vapy1) max_u4))) :pattern ((rot1_xlat ?Sizepy0 ?Mempy0 ?vapy1)) )) :named A1_26))
(assert (! (forall ((?apy6 Int)(?bpy6 Int)(?opy3 Int)) (! (and (or (= (select1 ?apy6 ?opy3) 1) (= (select1 ?bpy6 ?opy3) 1) (not (= (select1 (set_union ?apy6 ?bpy6) ?opy3) 1))) (or (= (select1 (set_union ?apy6 ?bpy6) ?opy3) 1) (and (not (= (select1 ?apy6 ?opy3) 1)) (not (= (select1 ?bpy6 ?opy3) 1))))) :pattern ((select1 (set_union ?apy6 ?bpy6) ?opy3)) )) :named A1_27))
(assert (! (forall ((?apy7 Int)(?bpy7 Int)(?opy4 Int)) (! (and (or (not (= (select1 (set_difference ?apy7 ?bpy7) ?opy4) 1)) (and (= (select1 ?apy7 ?opy4) 1) (not (= (select1 ?bpy7 ?opy4) 1)))) (or (= (select1 ?bpy7 ?opy4) 1) (= (select1 (set_difference ?apy7 ?bpy7) ?opy4) 1) (not (= (select1 ?apy7 ?opy4) 1)))) :pattern ((select1 (set_difference ?apy7 ?bpy7) ?opy4)) )) :named A1_28))
(assert (! (forall ((?apy8 Int)(?bpy8 Int)) (! (and (or (not (set_disjoint ?apy8 ?bpy8)) (forall ((?opy5 Int)) (! (or (not (= (select1 ?apy8 ?opy5) 1)) (not (= (select1 ?bpy8 ?opy5) 1))) :pattern ((select1 ?apy8 ?opy5)) :pattern ((select1 ?bpy8 ?opy5)) ))) (or (set_disjoint ?apy8 ?bpy8) (and (= (select1 ?apy8 (?o!12 ?bpy8 ?apy8)) 1) (= (select1 ?bpy8 (?o!12 ?bpy8 ?apy8)) 1)))) :pattern ((set_disjoint ?apy8 ?bpy8)) )) :named A1_29))
(assert (! (forall ((?apy9 Int)(?bpy9 Int)) (! (and (or (not (set_equal ?apy9 ?bpy9)) (forall ((?opy6 Int)) (! (and (or (not (= (select1 ?apy9 ?opy6) 1)) (= (select1 ?bpy9 ?opy6) 1)) (or (= (select1 ?apy9 ?opy6) 1) (not (= (select1 ?bpy9 ?opy6) 1)))) :pattern ((select1 ?apy9 ?opy6)) :pattern ((select1 ?bpy9 ?opy6)) ))) (or (set_equal ?apy9 ?bpy9) (and (or (= (select1 ?apy9 (?o!11 ?bpy9 ?apy9)) 1) (= (select1 ?bpy9 (?o!11 ?bpy9 ?apy9)) 1)) (or (not (= (select1 ?apy9 (?o!11 ?bpy9 ?apy9)) 1)) (not (= (select1 ?bpy9 (?o!11 ?bpy9 ?apy9)) 1)))))) :pattern ((set_equal ?apy9 ?bpy9)) )) :named A1_30))
(assert (! (forall ((?apy10 Int)(?bpy10 Int)) (! (and (or (not (set_subset ?apy10 ?bpy10)) (forall ((?opy7 Int)) (! (or (not (= (select1 ?apy10 ?opy7) 1)) (= (select1 ?bpy10 ?opy7) 1)) :pattern ((select1 ?apy10 ?opy7)) :pattern ((select1 ?bpy10 ?opy7)) ))) (or (set_subset ?apy10 ?bpy10) (and (= (select1 ?apy10 (?o!10 ?bpy10 ?apy10)) 1) (not (= (select1 ?bpy10 (?o!10 ?bpy10 ?apy10)) 1))))) :pattern ((set_subset ?apy10 ?bpy10)) )) :named A1_31))
(assert (! (forall ((?apy11 Int)) (! (= (select2 ?apy11 (ptr2gid (ptr (base global_ghost) 0)) size) 0) :pattern ((select2 ?apy11 (ptr2gid (ptr (base global_ghost) 0)) size)) )) :named A1_32))
(assert (! (forall ((?allocpy0 Int)(?ppy2 Int)(?lenpy0 Int)) (! (and (or (not (valid ?allocpy0 ?ppy2 ?lenpy0)) (and (not (= (base ?ppy2) nullObject)) (<= 0 ?lenpy0) (<= 0 (offset ?ppy2)) (<= (+ (offset ?ppy2) ?lenpy0) (select2 ?allocpy0 (ptr2gid (ptr (base ?ppy2) 0)) size)))) (or (valid ?allocpy0 ?ppy2 ?lenpy0) (= (base ?ppy2) nullObject) (not (<= 0 ?lenpy0)) (not (<= 0 (offset ?ppy2))) (not (<= (+ (offset ?ppy2) ?lenpy0) (select2 ?allocpy0 (ptr2gid (ptr (base ?ppy2) 0)) size))))) :pattern ((valid ?allocpy0 ?ppy2 ?lenpy0)) )) :named A1_33))
(assert (! (forall ((?base_1py0 Int)(?off1py0 Int)(?len1py0 Int)(?off2py0 Int)(?len2py0 Int)) (! (or (overlaps (region (ptr ?base_1py0 ?off1py0) ?len1py0) (region (ptr ?base_1py0 ?off2py0) ?len2py0)) (and (or (not (<= 0 ?len1py0)) (not (<= ?off1py0 ?off2py0)) (<= (+ ?off1py0 ?len1py0) ?off2py0)) (or (not (<= 0 ?len2py0)) (not (<= ?off2py0 ?off1py0)) (<= (+ ?off2py0 ?len2py0) ?off1py0)))) :pattern ((overlaps (region (ptr ?base_1py0 ?off1py0) ?len1py0) (region (ptr ?base_1py0 ?off2py0) ?len2py0))) )) :named A1_34))
(assert (! (forall ((?bigpy0 Int)(?biglpy0 Int)(?smallpy0 Int)(?smalllpy0 Int)) (! (and (or (not (contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0))) (and (= (base ?bigpy0) (base ?smallpy0)) (<= (offset ?bigpy0) (offset ?smallpy0)) (<= (offset ?smallpy0) (+ (offset ?bigpy0) ?biglpy0)) (<= (offset ?bigpy0) (+ (offset ?smallpy0) ?smalllpy0)) (<= (+ (offset ?smallpy0) ?smalllpy0) (+ (offset ?bigpy0) ?biglpy0)))) (or (contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0)) (not (= (base ?bigpy0) (base ?smallpy0))) (not (<= (offset ?bigpy0) (offset ?smallpy0))) (not (<= (offset ?smallpy0) (+ (offset ?bigpy0) ?biglpy0))) (not (<= (offset ?bigpy0) (+ (offset ?smallpy0) ?smalllpy0))) (not (<= (+ (offset ?smallpy0) ?smalllpy0) (+ (offset ?bigpy0) ?biglpy0))))) :pattern ((contains (region ?smallpy0 ?smalllpy0) (region ?bigpy0 ?biglpy0))) )) :named A1_35))
(assert (! (forall ((?gmem_1py0 Int)(?gidpy0 Int)) (! (or (not (good_gmem ?gmem_1py0)) (and (<= min_u4 (select2 ?gmem_1py0 ?gidpy0 fake__id)) (<= (select2 ?gmem_1py0 ?gidpy0 fake__id) max_u4))) :pattern ((select2 ?gmem_1py0 ?gidpy0 fake__id)) )) :named A1_36))
(assert (! (forall ((?ipy2 Int)(?jpy1 Int)) (! (or (<= ?ipy2 0) (<= ?jpy1 0) (and (not (<= (* (x_1 ?ipy2 ?jpy1) ?jpy1) (+ ?ipy2 (* (- 1) ?jpy1)))) (<= (* (x_1 ?ipy2 ?jpy1) ?jpy1) ?ipy2))) :pattern ((x_1 ?ipy2 ?jpy1)) )) :named A1_37))
(assert (! (forall ((?ipy3 Int)(?jpy2 Int)) (! (or (not (<= 0 ?ipy3)) (<= (x_1 ?ipy3 ?jpy2) ?ipy3) (<= ?jpy2 0)) :pattern ((x_1 ?ipy3 ?jpy2)) )) :named A1_38))
(assert (! (forall ((?ipy4 Int)(?rpy0 Int)) (! (= (base (ptr ?rpy0 ?ipy4)) ?rpy0) :pattern ((ptr ?rpy0 ?ipy4)) )) :named A1_39))
(assert (! (forall ((?ipy5 Int)(?rpy1 Int)) (! (= (offset (ptr ?rpy1 ?ipy5)) ?ipy5) :pattern ((ptr ?rpy1 ?ipy5)) )) :named A1_40))
(assert (! (forall ((?ipy6 Int)) (! (or (= ?ipy6 0) (= (x_1 ?ipy6 ?ipy6) 1)) :pattern ((x_1 ?ipy6 ?ipy6)) )) :named A1_41))
(assert (! (forall ((?mpy0 Int)(?ppy3 Int)(?lenpy1 Int)(?leftpy0 Int)(?rightpy0 Int)) (! (= (bv_extract (ld_u4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0) (bv_extract (ld_i4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0)) :pattern ((bv_extract (ld_u4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0) (bv_extract (ld_i4 ?mpy0 ?ppy3) ?lenpy1 ?leftpy0 ?rightpy0)) )) :named A1_42))
(assert (! (forall ((?mpy1 Int)(?ppy4 Int)) (! (or (not (good_mem ?mpy1)) (and (<= min_i1 (ld_i1 ?mpy1 ?ppy4)) (<= (ld_i1 ?mpy1 ?ppy4) max_i1))) :pattern ((ld_i1 ?mpy1 ?ppy4)) )) :named A1_43))
(assert (! (forall ((?mpy2 Int)(?ppy5 Int)) (! (or (not (good_mem ?mpy2)) (and (<= min_i2 (ld_i2 ?mpy2 ?ppy5)) (<= (ld_i2 ?mpy2 ?ppy5) max_i2))) :pattern ((ld_i2 ?mpy2 ?ppy5)) )) :named A1_44))
(assert (! (forall ((?mpy3 Int)(?ppy6 Int)) (! (or (not (good_mem ?mpy3)) (and (<= min_i4 (ld_i4 ?mpy3 ?ppy6)) (<= (ld_i4 ?mpy3 ?ppy6) max_i4))) :pattern ((ld_i4 ?mpy3 ?ppy6)) )) :named A1_45))
(assert (! (forall ((?mpy4 Int)(?ppy7 Int)) (! (or (not (good_mem ?mpy4)) (and (<= min_i8 (ld_i8 ?mpy4 ?ppy7)) (<= (ld_i8 ?mpy4 ?ppy7) max_i8))) :pattern ((ld_i8 ?mpy4 ?ppy7)) )) :named A1_46))
(assert (! (forall ((?mpy5 Int)(?ppy8 Int)) (! (or (not (good_mem ?mpy5)) (and (<= min_u1 (ld_u1 ?mpy5 ?ppy8)) (<= (ld_u1 ?mpy5 ?ppy8) max_u1))) :pattern ((ld_u1 ?mpy5 ?ppy8)) )) :named A1_47))
(assert (! (forall ((?mpy6 Int)(?ppy9 Int)) (! (or (not (good_mem ?mpy6)) (and (<= min_u2 (ld_u2 ?mpy6 ?ppy9)) (<= (ld_u2 ?mpy6 ?ppy9) max_u2))) :pattern ((ld_u2 ?mpy6 ?ppy9)) )) :named A1_48))
(assert (! (forall ((?mpy7 Int)(?ppy10 Int)) (! (or (not (good_mem ?mpy7)) (and (<= min_u4 (ld_u4 ?mpy7 ?ppy10)) (<= (ld_u4 ?mpy7 ?ppy10) max_u4))) :pattern ((ld_u4 ?mpy7 ?ppy10)) )) :named A1_49))
(assert (! (forall ((?mpy8 Int)(?ppy11 Int)) (! (or (not (good_mem ?mpy8)) (and (<= min_u8 (ld_u8 ?mpy8 ?ppy11)) (<= (ld_u8 ?mpy8 ?ppy11) max_u8))) :pattern ((ld_u8 ?mpy8 ?ppy11)) )) :named A1_50))
(assert (! (forall ((?mpy9 Int)(?p1py0 Int)(?p2py0 Int)(?lenpy2 Int)) (! (or (and (<= 0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9)) (not (<= ?lenpy2 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9))) (not (= (ld_i1 ?mpy9 (add_ptr ?p1py0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9) 1)) (ld_i1 ?mpy9 (add_ptr ?p2py0 (?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9) 1))))) (same_mem ?mpy9 ?p1py0 ?p2py0 ?lenpy2)) :pattern ((?off!2 ?lenpy2 ?p2py0 ?p1py0 ?mpy9)) :pattern ((same_mem ?mpy9 ?p1py0 ?p2py0 ?lenpy2)) )) :named A1_51))
(assert (! (forall ((?mdstpy0 Int)(?dstpy0 Int)(?msrcpy0 Int)(?srcpy0 Int)(?lenpy3 Int)) (! (or (not (same_region ?mdstpy0 ?dstpy0 ?msrcpy0 ?srcpy0 ?lenpy3)) (and (forall ((?ppy12 Int)) (! (or (not (contains (region ?ppy12 1) (region ?dstpy0 ?lenpy3))) (= (ld_i1 ?mdstpy0 ?ppy12) (ld_i1 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy12 ?dstpy0) 1)))) :pattern ((ld_i1 ?mdstpy0 ?ppy12)) )) (forall ((?ppy13 Int)) (! (or (not (contains (region ?ppy13 1) (region ?dstpy0 ?lenpy3))) (= (ld_u1 ?mdstpy0 ?ppy13) (ld_u1 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy13 ?dstpy0) 1)))) :pattern ((ld_u1 ?mdstpy0 ?ppy13)) )) (forall ((?ppy14 Int)) (! (or (not (contains (region ?ppy14 2) (region ?dstpy0 ?lenpy3))) (= (ld_i2 ?mdstpy0 ?ppy14) (ld_i2 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy14 ?dstpy0) 1)))) :pattern ((ld_i2 ?mdstpy0 ?ppy14)) )) (forall ((?ppy15 Int)) (! (or (not (contains (region ?ppy15 2) (region ?dstpy0 ?lenpy3))) (= (ld_u2 ?mdstpy0 ?ppy15) (ld_u2 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy15 ?dstpy0) 1)))) :pattern ((ld_u2 ?mdstpy0 ?ppy15)) )) (forall ((?ppy16 Int)) (! (or (not (contains (region ?ppy16 4) (region ?dstpy0 ?lenpy3))) (= (ld_i4 ?mdstpy0 ?ppy16) (ld_i4 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy16 ?dstpy0) 1)))) :pattern ((ld_i4 ?mdstpy0 ?ppy16)) )) (forall ((?ppy17 Int)) (! (or (not (contains (region ?ppy17 4) (region ?dstpy0 ?lenpy3))) (= (ld_u4 ?mdstpy0 ?ppy17) (ld_u4 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy17 ?dstpy0) 1)))) :pattern ((ld_u4 ?mdstpy0 ?ppy17)) )) (forall ((?ppy18 Int)) (! (or (not (contains (region ?ppy18 8) (region ?dstpy0 ?lenpy3))) (= (ld_i8 ?mdstpy0 ?ppy18) (ld_i8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy18 ?dstpy0) 1)))) :pattern ((ld_i8 ?mdstpy0 ?ppy18)) )) (forall ((?ppy19 Int)) (! (or (not (contains (region ?ppy19 8) (region ?dstpy0 ?lenpy3))) (= (ld_u8 ?mdstpy0 ?ppy19) (ld_u8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy19 ?dstpy0) 1)))) :pattern ((ld_u8 ?mdstpy0 ?ppy19)) )) (forall ((?ppy20 Int)) (! (or (not (contains (region ?ppy20 8) (region ?dstpy0 ?lenpy3))) (= (conv_u8_to_ptr (ld_u8 ?mdstpy0 ?ppy20)) (conv_u8_to_ptr (ld_u8 ?msrcpy0 (add_ptr ?srcpy0 (sub_ptr ?ppy20 ?dstpy0) 1))))) :pattern ((conv_u8_to_ptr (ld_u8 ?mdstpy0 ?ppy20))) )))) :pattern ((same_region ?mdstpy0 ?dstpy0 ?msrcpy0 ?srcpy0 ?lenpy3)) )) :named A1_52))
(assert (! (forall ((?mem_1py0 Int)(?rpy2 Int)(?lenpy4 Int)) (! (or (not (zero_region ?mem_1py0 ?rpy2 ?lenpy4)) (and (forall ((?ppy21 Int)) (! (or (not (contains (region ?ppy21 1) (region ?rpy2 ?lenpy4))) (= (ld_i1 ?mem_1py0 ?ppy21) 0)) :pattern ((ld_i1 ?mem_1py0 ?ppy21)) )) (forall ((?ppy22 Int)) (! (or (not (contains (region ?ppy22 1) (region ?rpy2 ?lenpy4))) (= (ld_u1 ?mem_1py0 ?ppy22) 0)) :pattern ((ld_u1 ?mem_1py0 ?ppy22)) )) (forall ((?ppy23 Int)) (! (or (not (contains (region ?ppy23 2) (region ?rpy2 ?lenpy4))) (= (ld_i2 ?mem_1py0 ?ppy23) 0)) :pattern ((ld_i2 ?mem_1py0 ?ppy23)) )) (forall ((?ppy24 Int)) (! (or (not (contains (region ?ppy24 2) (region ?rpy2 ?lenpy4))) (= (ld_u2 ?mem_1py0 ?ppy24) 0)) :pattern ((ld_u2 ?mem_1py0 ?ppy24)) )) (forall ((?ppy25 Int)) (! (or (not (contains (region ?ppy25 4) (region ?rpy2 ?lenpy4))) (= (ld_i4 ?mem_1py0 ?ppy25) 0)) :pattern ((ld_i4 ?mem_1py0 ?ppy25)) )) (forall ((?ppy26 Int)) (! (or (not (contains (region ?ppy26 4) (region ?rpy2 ?lenpy4))) (= (ld_u4 ?mem_1py0 ?ppy26) 0)) :pattern ((ld_u4 ?mem_1py0 ?ppy26)) )) (forall ((?ppy27 Int)) (! (or (not (contains (region ?ppy27 8) (region ?rpy2 ?lenpy4))) (= (ld_i8 ?mem_1py0 ?ppy27) 0)) :pattern ((ld_i8 ?mem_1py0 ?ppy27)) )) (forall ((?ppy28 Int)) (! (or (not (contains (region ?ppy28 8) (region ?rpy2 ?lenpy4))) (= (ld_u8 ?mem_1py0 ?ppy28) 0)) :pattern ((ld_u8 ?mem_1py0 ?ppy28)) )) (forall ((?ppy29 Int)) (! (or (not (contains (region ?ppy29 8) (region ?rpy2 ?lenpy4))) (= (conv_u8_to_ptr (ld_u8 ?mem_1py0 ?ppy29)) ldnull)) :pattern ((conv_u8_to_ptr (ld_u8 ?mem_1py0 ?ppy29))) )))) :pattern ((zero_region ?mem_1py0 ?rpy2 ?lenpy4)) )) :named A1_53))
(assert (! (forall ((?mem_1py1 Int)(?r1py0 Int)(?len1py1 Int)(?r2py0 Int)(?len2py1 Int)) (! (or (not (contains (region ?r2py0 ?len2py1) (region ?r1py0 ?len1py1))) (not (zero_region ?mem_1py1 ?r1py0 ?len1py1)) (zero_region ?mem_1py1 ?r2py0 ?len2py1)) :pattern ((contains (region ?r2py0 ?len2py1) (region ?r1py0 ?len1py1)) (zero_region ?mem_1py1 ?r1py0 ?len1py1)) )) :named A1_54))
(assert (! (forall ((?opy8 Int)) (! (not (= (select1 set_empty ?opy8) 1)) :pattern ((select1 set_empty ?opy8)) )) :named A1_55))
(assert (! (forall ((?oldallocpy0 Int)(?newallocpy0 Int)) (! (and (or (not (alloc_grows ?oldallocpy0 ?newallocpy0)) (forall ((?ppy30 Int)) (! (or (= (select2 ?oldallocpy0 (ptr2gid (ptr ?ppy30 0)) size) 0) (= (select2 ?oldallocpy0 (ptr2gid (ptr ?ppy30 0)) size) (select2 ?newallocpy0 (ptr2gid (ptr ?ppy30 0)) size))) :pattern ((select2 ?newallocpy0 (ptr2gid (ptr ?ppy30 0)) size)) ))) (or (alloc_grows ?oldallocpy0 ?newallocpy0) (and (not (= (select2 ?oldallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size) 0)) (not (= (select2 ?oldallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size) (select2 ?newallocpy0 (ptr2gid (ptr (?p!7 ?newallocpy0 ?oldallocpy0) 0)) size)))))) :pattern ((alloc_grows ?oldallocpy0 ?newallocpy0)) )) :named A1_56))
(assert (! (forall ((?ppy31 Int)(?mpy10 Int)(?vpy13 Int)) (! (= (ld_i1 (st_i1 ?mpy10 ?ppy31 ?vpy13) ?ppy31) ?vpy13) :pattern ((st_i1 ?mpy10 ?ppy31 ?vpy13)) )) :named A1_57))
(assert (! (forall ((?ppy32 Int)(?mpy11 Int)(?vpy14 Int)) (! (= (ld_i2 (st_i2 ?mpy11 ?ppy32 ?vpy14) ?ppy32) ?vpy14) :pattern ((st_i2 ?mpy11 ?ppy32 ?vpy14)) )) :named A1_58))
(assert (! (forall ((?ppy33 Int)(?mpy12 Int)(?vpy15 Int)) (! (= (ld_i4 (st_i4 ?mpy12 ?ppy33 ?vpy15) ?ppy33) ?vpy15) :pattern ((st_i4 ?mpy12 ?ppy33 ?vpy15)) )) :named A1_59))
(assert (! (forall ((?ppy34 Int)(?mpy13 Int)(?vpy16 Int)) (! (= (ld_i8 (st_i8 ?mpy13 ?ppy34 ?vpy16) ?ppy34) ?vpy16) :pattern ((st_i8 ?mpy13 ?ppy34 ?vpy16)) )) :named A1_60))
(assert (! (forall ((?ppy35 Int)(?mpy14 Int)(?vpy17 Int)) (! (= (ld_u1 (st_u1 ?mpy14 ?ppy35 ?vpy17) ?ppy35) ?vpy17) :pattern ((st_u1 ?mpy14 ?ppy35 ?vpy17)) )) :named A1_61))
(assert (! (forall ((?ppy36 Int)(?mpy15 Int)(?vpy18 Int)) (! (= (ld_u2 (st_u2 ?mpy15 ?ppy36 ?vpy18) ?ppy36) ?vpy18) :pattern ((st_u2 ?mpy15 ?ppy36 ?vpy18)) )) :named A1_62))
(assert (! (forall ((?ppy37 Int)(?mpy16 Int)(?vpy19 Int)) (! (= (ld_u4 (st_u4 ?mpy16 ?ppy37 ?vpy19) ?ppy37) ?vpy19) :pattern ((st_u4 ?mpy16 ?ppy37 ?vpy19)) )) :named A1_63))
(assert (! (forall ((?ppy38 Int)(?mpy17 Int)(?vpy20 Int)) (! (= (ld_u8 (st_u8 ?mpy17 ?ppy38 ?vpy20) ?ppy38) ?vpy20) :pattern ((st_u8 ?mpy17 ?ppy38 ?vpy20)) )) :named A1_64))
(assert (! (forall ((?ppy39 Int)(?opy9 Int)(?szpy0 Int)) (! (= (add_ptr ?ppy39 ?opy9 ?szpy0) (ptr (base ?ppy39) (+ (offset ?ppy39) (* ?szpy0 ?opy9)))) :pattern ((add_ptr ?ppy39 ?opy9 ?szpy0)) )) :named A1_65))
(assert (! (forall ((?ppy40 Int)(?qpy0 Int)) (! (or (not (= (base ?ppy40) (base ?qpy0))) (= (sub_ptr ?ppy40 ?qpy0) (+ (offset ?ppy40) (* (- 1) (offset ?qpy0))))) :pattern ((sub_ptr ?ppy40 ?qpy0)) )) :named A1_66))
(assert (! (forall ((?ppy41 Int)) (! (= (base_zero ?ppy41) (ptr (base ?ppy41) 0)) :pattern ((base_zero ?ppy41)) )) :named A1_67))
(assert (! (forall ((?ppy42 Int)) (! (= (gid2ptr (ptr2gid ?ppy42)) ?ppy42) :pattern ((ptr2gid ?ppy42)) )) :named A1_68))
(assert (! (forall ((?ppy43 Int)) (! (= (ptr (base ?ppy43) (offset ?ppy43)) ?ppy43) :pattern ((base ?ppy43)) :pattern ((offset ?ppy43)) )) :named A1_69))
(assert (! (forall ((?ppy44 Int)) (! (= (+ (conv_base_to_i8 (base (conv_i8_to_ptr ?ppy44))) (offset (conv_i8_to_ptr ?ppy44))) ?ppy44) :pattern ((conv_i8_to_ptr ?ppy44)) )) :named A1_70))
(assert (! (forall ((?ppy45 Int)) (! (= (+ (conv_base_to_i8 (base (conv_u8_to_ptr ?ppy45))) (offset (conv_u8_to_ptr ?ppy45))) ?ppy45) :pattern ((conv_u8_to_ptr ?ppy45)) )) :named A1_71))
(assert (! (forall ((?ppy46 Int)) (! (= (conv_i8_to_ptr (+ (conv_base_to_i8 (base ?ppy46)) (offset ?ppy46))) ?ppy46) :pattern ((base ?ppy46)) :pattern ((offset ?ppy46)) )) :named A1_72))
(assert (! (forall ((?ppy47 Int)) (! (= (conv_u8_to_ptr (+ (conv_base_to_i8 (base ?ppy47)) (offset ?ppy47))) ?ppy47) :pattern ((base ?ppy47)) :pattern ((offset ?ppy47)) )) :named A1_73))
(assert (! (forall ((?p1py1 Int)(?p2py1 Int)(?mpy18 Int)(?vpy21 Int)) (! (or (overlaps (region ?p1py1 1) (region ?p2py1 1)) (= (ld_i1 (st_i1 ?mpy18 ?p1py1 ?vpy21) ?p2py1) (ld_i1 ?mpy18 ?p2py1))) :pattern ((ld_i1 (st_i1 ?mpy18 ?p1py1 ?vpy21) ?p2py1)) )) :named A1_74))
(assert (! (forall ((?p1py2 Int)(?p2py2 Int)(?mpy19 Int)(?vpy22 Int)) (! (or (overlaps (region ?p1py2 1) (region ?p2py2 1)) (= (ld_i1 (st_u1 ?mpy19 ?p1py2 ?vpy22) ?p2py2) (ld_i1 ?mpy19 ?p2py2))) :pattern ((ld_i1 (st_u1 ?mpy19 ?p1py2 ?vpy22) ?p2py2)) )) :named A1_75))
(assert (! (forall ((?p1py3 Int)(?p2py3 Int)(?mpy20 Int)(?vpy23 Int)) (! (or (overlaps (region ?p1py3 1) (region ?p2py3 1)) (= (ld_u1 (st_i1 ?mpy20 ?p1py3 ?vpy23) ?p2py3) (ld_u1 ?mpy20 ?p2py3))) :pattern ((ld_u1 (st_i1 ?mpy20 ?p1py3 ?vpy23) ?p2py3)) )) :named A1_76))
(assert (! (forall ((?p1py4 Int)(?p2py4 Int)(?mpy21 Int)(?vpy24 Int)) (! (or (overlaps (region ?p1py4 1) (region ?p2py4 1)) (= (ld_u1 (st_u1 ?mpy21 ?p1py4 ?vpy24) ?p2py4) (ld_u1 ?mpy21 ?p2py4))) :pattern ((ld_u1 (st_u1 ?mpy21 ?p1py4 ?vpy24) ?p2py4)) )) :named A1_77))
(assert (! (forall ((?p1py5 Int)(?p2py5 Int)(?mpy22 Int)(?vpy25 Int)) (! (or (overlaps (region ?p1py5 1) (region ?p2py5 2)) (= (ld_i2 (st_i1 ?mpy22 ?p1py5 ?vpy25) ?p2py5) (ld_i2 ?mpy22 ?p2py5))) :pattern ((ld_i2 (st_i1 ?mpy22 ?p1py5 ?vpy25) ?p2py5)) )) :named A1_78))
(assert (! (forall ((?p1py6 Int)(?p2py6 Int)(?mpy23 Int)(?vpy26 Int)) (! (or (overlaps (region ?p1py6 1) (region ?p2py6 2)) (= (ld_i2 (st_u1 ?mpy23 ?p1py6 ?vpy26) ?p2py6) (ld_i2 ?mpy23 ?p2py6))) :pattern ((ld_i2 (st_u1 ?mpy23 ?p1py6 ?vpy26) ?p2py6)) )) :named A1_79))
(assert (! (forall ((?p1py7 Int)(?p2py7 Int)(?mpy24 Int)(?vpy27 Int)) (! (or (overlaps (region ?p1py7 1) (region ?p2py7 2)) (= (ld_u2 (st_i1 ?mpy24 ?p1py7 ?vpy27) ?p2py7) (ld_u2 ?mpy24 ?p2py7))) :pattern ((ld_u2 (st_i1 ?mpy24 ?p1py7 ?vpy27) ?p2py7)) )) :named A1_80))
(assert (! (forall ((?p1py8 Int)(?p2py8 Int)(?mpy25 Int)(?vpy28 Int)) (! (or (overlaps (region ?p1py8 1) (region ?p2py8 2)) (= (ld_u2 (st_u1 ?mpy25 ?p1py8 ?vpy28) ?p2py8) (ld_u2 ?mpy25 ?p2py8))) :pattern ((ld_u2 (st_u1 ?mpy25 ?p1py8 ?vpy28) ?p2py8)) )) :named A1_81))
(assert (! (forall ((?p1py9 Int)(?p2py9 Int)(?mpy26 Int)(?vpy29 Int)) (! (or (overlaps (region ?p1py9 1) (region ?p2py9 4)) (= (ld_i4 (st_i1 ?mpy26 ?p1py9 ?vpy29) ?p2py9) (ld_i4 ?mpy26 ?p2py9))) :pattern ((ld_i4 (st_i1 ?mpy26 ?p1py9 ?vpy29) ?p2py9)) )) :named A1_82))
(assert (! (forall ((?p1py10 Int)(?p2py10 Int)(?mpy27 Int)(?vpy30 Int)) (! (or (overlaps (region ?p1py10 1) (region ?p2py10 4)) (= (ld_i4 (st_u1 ?mpy27 ?p1py10 ?vpy30) ?p2py10) (ld_i4 ?mpy27 ?p2py10))) :pattern ((ld_i4 (st_u1 ?mpy27 ?p1py10 ?vpy30) ?p2py10)) )) :named A1_83))
(assert (! (forall ((?p1py11 Int)(?p2py11 Int)(?mpy28 Int)(?vpy31 Int)) (! (or (overlaps (region ?p1py11 1) (region ?p2py11 4)) (= (ld_u4 (st_i1 ?mpy28 ?p1py11 ?vpy31) ?p2py11) (ld_u4 ?mpy28 ?p2py11))) :pattern ((ld_u4 (st_i1 ?mpy28 ?p1py11 ?vpy31) ?p2py11)) )) :named A1_84))
(assert (! (forall ((?p1py12 Int)(?p2py12 Int)(?mpy29 Int)(?vpy32 Int)) (! (or (overlaps (region ?p1py12 1) (region ?p2py12 4)) (= (ld_u4 (st_u1 ?mpy29 ?p1py12 ?vpy32) ?p2py12) (ld_u4 ?mpy29 ?p2py12))) :pattern ((ld_u4 (st_u1 ?mpy29 ?p1py12 ?vpy32) ?p2py12)) )) :named A1_85))
(assert (! (forall ((?p1py13 Int)(?p2py13 Int)(?mpy30 Int)(?vpy33 Int)) (! (or (overlaps (region ?p1py13 1) (region ?p2py13 8)) (= (ld_i8 (st_i1 ?mpy30 ?p1py13 ?vpy33) ?p2py13) (ld_i8 ?mpy30 ?p2py13))) :pattern ((ld_i8 (st_i1 ?mpy30 ?p1py13 ?vpy33) ?p2py13)) )) :named A1_86))
(assert (! (forall ((?p1py14 Int)(?p2py14 Int)(?mpy31 Int)(?vpy34 Int)) (! (or (overlaps (region ?p1py14 1) (region ?p2py14 8)) (= (ld_i8 (st_u1 ?mpy31 ?p1py14 ?vpy34) ?p2py14) (ld_i8 ?mpy31 ?p2py14))) :pattern ((ld_i8 (st_u1 ?mpy31 ?p1py14 ?vpy34) ?p2py14)) )) :named A1_87))
(assert (! (forall ((?p1py15 Int)(?p2py15 Int)(?mpy32 Int)(?vpy35 Int)) (! (or (overlaps (region ?p1py15 1) (region ?p2py15 8)) (= (ld_u8 (st_i1 ?mpy32 ?p1py15 ?vpy35) ?p2py15) (ld_u8 ?mpy32 ?p2py15))) :pattern ((ld_u8 (st_i1 ?mpy32 ?p1py15 ?vpy35) ?p2py15)) )) :named A1_88))
(assert (! (forall ((?p1py16 Int)(?p2py16 Int)(?mpy33 Int)(?vpy36 Int)) (! (or (overlaps (region ?p1py16 1) (region ?p2py16 8)) (= (ld_u8 (st_u1 ?mpy33 ?p1py16 ?vpy36) ?p2py16) (ld_u8 ?mpy33 ?p2py16))) :pattern ((ld_u8 (st_u1 ?mpy33 ?p1py16 ?vpy36) ?p2py16)) )) :named A1_89))
(assert (! (forall ((?p1py17 Int)(?p2py17 Int)(?mpy34 Int)(?vpy37 Int)) (! (or (overlaps (region ?p1py17 2) (region ?p2py17 1)) (= (ld_i1 (st_i2 ?mpy34 ?p1py17 ?vpy37) ?p2py17) (ld_i1 ?mpy34 ?p2py17))) :pattern ((ld_i1 (st_i2 ?mpy34 ?p1py17 ?vpy37) ?p2py17)) )) :named A1_90))
(assert (! (forall ((?p1py18 Int)(?p2py18 Int)(?mpy35 Int)(?vpy38 Int)) (! (or (overlaps (region ?p1py18 2) (region ?p2py18 1)) (= (ld_i1 (st_u2 ?mpy35 ?p1py18 ?vpy38) ?p2py18) (ld_i1 ?mpy35 ?p2py18))) :pattern ((ld_i1 (st_u2 ?mpy35 ?p1py18 ?vpy38) ?p2py18)) )) :named A1_91))
(assert (! (forall ((?p1py19 Int)(?p2py19 Int)(?mpy36 Int)(?vpy39 Int)) (! (or (overlaps (region ?p1py19 2) (region ?p2py19 1)) (= (ld_u1 (st_i2 ?mpy36 ?p1py19 ?vpy39) ?p2py19) (ld_u1 ?mpy36 ?p2py19))) :pattern ((ld_u1 (st_i2 ?mpy36 ?p1py19 ?vpy39) ?p2py19)) )) :named A1_92))
(assert (! (forall ((?p1py20 Int)(?p2py20 Int)(?mpy37 Int)(?vpy40 Int)) (! (or (overlaps (region ?p1py20 2) (region ?p2py20 1)) (= (ld_u1 (st_u2 ?mpy37 ?p1py20 ?vpy40) ?p2py20) (ld_u1 ?mpy37 ?p2py20))) :pattern ((ld_u1 (st_u2 ?mpy37 ?p1py20 ?vpy40) ?p2py20)) )) :named A1_93))
(assert (! (forall ((?p1py21 Int)(?p2py21 Int)(?mpy38 Int)(?vpy41 Int)) (! (or (overlaps (region ?p1py21 2) (region ?p2py21 2)) (= (ld_i2 (st_i2 ?mpy38 ?p1py21 ?vpy41) ?p2py21) (ld_i2 ?mpy38 ?p2py21))) :pattern ((ld_i2 (st_i2 ?mpy38 ?p1py21 ?vpy41) ?p2py21)) )) :named A1_94))
(assert (! (forall ((?p1py22 Int)(?p2py22 Int)(?mpy39 Int)(?vpy42 Int)) (! (or (overlaps (region ?p1py22 2) (region ?p2py22 2)) (= (ld_i2 (st_u2 ?mpy39 ?p1py22 ?vpy42) ?p2py22) (ld_i2 ?mpy39 ?p2py22))) :pattern ((ld_i2 (st_u2 ?mpy39 ?p1py22 ?vpy42) ?p2py22)) )) :named A1_95))
(assert (! (forall ((?p1py23 Int)(?p2py23 Int)(?mpy40 Int)(?vpy43 Int)) (! (or (overlaps (region ?p1py23 2) (region ?p2py23 2)) (= (ld_u2 (st_i2 ?mpy40 ?p1py23 ?vpy43) ?p2py23) (ld_u2 ?mpy40 ?p2py23))) :pattern ((ld_u2 (st_i2 ?mpy40 ?p1py23 ?vpy43) ?p2py23)) )) :named A1_96))
(assert (! (forall ((?p1py24 Int)(?p2py24 Int)(?mpy41 Int)(?vpy44 Int)) (! (or (overlaps (region ?p1py24 2) (region ?p2py24 2)) (= (ld_u2 (st_u2 ?mpy41 ?p1py24 ?vpy44) ?p2py24) (ld_u2 ?mpy41 ?p2py24))) :pattern ((ld_u2 (st_u2 ?mpy41 ?p1py24 ?vpy44) ?p2py24)) )) :named A1_97))
(assert (! (forall ((?p1py25 Int)(?p2py25 Int)(?mpy42 Int)(?vpy45 Int)) (! (or (overlaps (region ?p1py25 2) (region ?p2py25 4)) (= (ld_i4 (st_i2 ?mpy42 ?p1py25 ?vpy45) ?p2py25) (ld_i4 ?mpy42 ?p2py25))) :pattern ((ld_i4 (st_i2 ?mpy42 ?p1py25 ?vpy45) ?p2py25)) )) :named A1_98))
(assert (! (forall ((?p1py26 Int)(?p2py26 Int)(?mpy43 Int)(?vpy46 Int)) (! (or (overlaps (region ?p1py26 2) (region ?p2py26 4)) (= (ld_i4 (st_u2 ?mpy43 ?p1py26 ?vpy46) ?p2py26) (ld_i4 ?mpy43 ?p2py26))) :pattern ((ld_i4 (st_u2 ?mpy43 ?p1py26 ?vpy46) ?p2py26)) )) :named A1_99))
(assert (! (forall ((?p1py27 Int)(?p2py27 Int)(?mpy44 Int)(?vpy47 Int)) (! (or (overlaps (region ?p1py27 2) (region ?p2py27 4)) (= (ld_u4 (st_i2 ?mpy44 ?p1py27 ?vpy47) ?p2py27) (ld_u4 ?mpy44 ?p2py27))) :pattern ((ld_u4 (st_i2 ?mpy44 ?p1py27 ?vpy47) ?p2py27)) )) :named A1_100))
(assert (! (forall ((?p1py28 Int)(?p2py28 Int)(?mpy45 Int)(?vpy48 Int)) (! (or (overlaps (region ?p1py28 2) (region ?p2py28 4)) (= (ld_u4 (st_u2 ?mpy45 ?p1py28 ?vpy48) ?p2py28) (ld_u4 ?mpy45 ?p2py28))) :pattern ((ld_u4 (st_u2 ?mpy45 ?p1py28 ?vpy48) ?p2py28)) )) :named A1_101))
(assert (! (forall ((?p1py29 Int)(?p2py29 Int)(?mpy46 Int)(?vpy49 Int)) (! (or (overlaps (region ?p1py29 2) (region ?p2py29 8)) (= (ld_i8 (st_i2 ?mpy46 ?p1py29 ?vpy49) ?p2py29) (ld_i8 ?mpy46 ?p2py29))) :pattern ((ld_i8 (st_i2 ?mpy46 ?p1py29 ?vpy49) ?p2py29)) )) :named A1_102))
(assert (! (forall ((?p1py30 Int)(?p2py30 Int)(?mpy47 Int)(?vpy50 Int)) (! (or (overlaps (region ?p1py30 2) (region ?p2py30 8)) (= (ld_i8 (st_u2 ?mpy47 ?p1py30 ?vpy50) ?p2py30) (ld_i8 ?mpy47 ?p2py30))) :pattern ((ld_i8 (st_u2 ?mpy47 ?p1py30 ?vpy50) ?p2py30)) )) :named A1_103))
(assert (! (forall ((?p1py31 Int)(?p2py31 Int)(?mpy48 Int)(?vpy51 Int)) (! (or (overlaps (region ?p1py31 2) (region ?p2py31 8)) (= (ld_u8 (st_i2 ?mpy48 ?p1py31 ?vpy51) ?p2py31) (ld_u8 ?mpy48 ?p2py31))) :pattern ((ld_u8 (st_i2 ?mpy48 ?p1py31 ?vpy51) ?p2py31)) )) :named A1_104))
(assert (! (forall ((?p1py32 Int)(?p2py32 Int)(?mpy49 Int)(?vpy52 Int)) (! (or (overlaps (region ?p1py32 2) (region ?p2py32 8)) (= (ld_u8 (st_u2 ?mpy49 ?p1py32 ?vpy52) ?p2py32) (ld_u8 ?mpy49 ?p2py32))) :pattern ((ld_u8 (st_u2 ?mpy49 ?p1py32 ?vpy52) ?p2py32)) )) :named A1_105))
(assert (! (forall ((?p1py33 Int)(?p2py33 Int)(?mpy50 Int)(?vpy53 Int)) (! (or (overlaps (region ?p1py33 4) (region ?p2py33 1)) (= (ld_i1 (st_i4 ?mpy50 ?p1py33 ?vpy53) ?p2py33) (ld_i1 ?mpy50 ?p2py33))) :pattern ((ld_i1 (st_i4 ?mpy50 ?p1py33 ?vpy53) ?p2py33)) )) :named A1_106))
(assert (! (forall ((?p1py34 Int)(?p2py34 Int)(?mpy51 Int)(?vpy54 Int)) (! (or (overlaps (region ?p1py34 4) (region ?p2py34 1)) (= (ld_i1 (st_u4 ?mpy51 ?p1py34 ?vpy54) ?p2py34) (ld_i1 ?mpy51 ?p2py34))) :pattern ((ld_i1 (st_u4 ?mpy51 ?p1py34 ?vpy54) ?p2py34)) )) :named A1_107))
(assert (! (forall ((?p1py35 Int)(?p2py35 Int)(?mpy52 Int)(?vpy55 Int)) (! (or (overlaps (region ?p1py35 4) (region ?p2py35 1)) (= (ld_u1 (st_i4 ?mpy52 ?p1py35 ?vpy55) ?p2py35) (ld_u1 ?mpy52 ?p2py35))) :pattern ((ld_u1 (st_i4 ?mpy52 ?p1py35 ?vpy55) ?p2py35)) )) :named A1_108))
(assert (! (forall ((?p1py36 Int)(?p2py36 Int)(?mpy53 Int)(?vpy56 Int)) (! (or (overlaps (region ?p1py36 4) (region ?p2py36 1)) (= (ld_u1 (st_u4 ?mpy53 ?p1py36 ?vpy56) ?p2py36) (ld_u1 ?mpy53 ?p2py36))) :pattern ((ld_u1 (st_u4 ?mpy53 ?p1py36 ?vpy56) ?p2py36)) )) :named A1_109))
(assert (! (forall ((?p1py37 Int)(?p2py37 Int)(?mpy54 Int)(?vpy57 Int)) (! (or (overlaps (region ?p1py37 4) (region ?p2py37 2)) (= (ld_i2 (st_i4 ?mpy54 ?p1py37 ?vpy57) ?p2py37) (ld_i2 ?mpy54 ?p2py37))) :pattern ((ld_i2 (st_i4 ?mpy54 ?p1py37 ?vpy57) ?p2py37)) )) :named A1_110))
(assert (! (forall ((?p1py38 Int)(?p2py38 Int)(?mpy55 Int)(?vpy58 Int)) (! (or (overlaps (region ?p1py38 4) (region ?p2py38 2)) (= (ld_i2 (st_u4 ?mpy55 ?p1py38 ?vpy58) ?p2py38) (ld_i2 ?mpy55 ?p2py38))) :pattern ((ld_i2 (st_u4 ?mpy55 ?p1py38 ?vpy58) ?p2py38)) )) :named A1_111))
(assert (! (forall ((?p1py39 Int)(?p2py39 Int)(?mpy56 Int)(?vpy59 Int)) (! (or (overlaps (region ?p1py39 4) (region ?p2py39 2)) (= (ld_u2 (st_i4 ?mpy56 ?p1py39 ?vpy59) ?p2py39) (ld_u2 ?mpy56 ?p2py39))) :pattern ((ld_u2 (st_i4 ?mpy56 ?p1py39 ?vpy59) ?p2py39)) )) :named A1_112))
(assert (! (forall ((?p1py40 Int)(?p2py40 Int)(?mpy57 Int)(?vpy60 Int)) (! (or (overlaps (region ?p1py40 4) (region ?p2py40 2)) (= (ld_u2 (st_u4 ?mpy57 ?p1py40 ?vpy60) ?p2py40) (ld_u2 ?mpy57 ?p2py40))) :pattern ((ld_u2 (st_u4 ?mpy57 ?p1py40 ?vpy60) ?p2py40)) )) :named A1_113))
(assert (! (forall ((?p1py41 Int)(?p2py41 Int)(?mpy58 Int)(?vpy61 Int)) (! (or (overlaps (region ?p1py41 4) (region ?p2py41 4)) (= (ld_i4 (st_i4 ?mpy58 ?p1py41 ?vpy61) ?p2py41) (ld_i4 ?mpy58 ?p2py41))) :pattern ((ld_i4 (st_i4 ?mpy58 ?p1py41 ?vpy61) ?p2py41)) )) :named A1_114))
(assert (! (forall ((?p1py42 Int)(?p2py42 Int)(?mpy59 Int)(?vpy62 Int)) (! (or (overlaps (region ?p1py42 4) (region ?p2py42 4)) (= (ld_i4 (st_u4 ?mpy59 ?p1py42 ?vpy62) ?p2py42) (ld_i4 ?mpy59 ?p2py42))) :pattern ((ld_i4 (st_u4 ?mpy59 ?p1py42 ?vpy62) ?p2py42)) )) :named A1_115))
(assert (! (forall ((?p1py43 Int)(?p2py43 Int)(?mpy60 Int)(?vpy63 Int)) (! (or (overlaps (region ?p1py43 4) (region ?p2py43 4)) (= (ld_u4 (st_i4 ?mpy60 ?p1py43 ?vpy63) ?p2py43) (ld_u4 ?mpy60 ?p2py43))) :pattern ((ld_u4 (st_i4 ?mpy60 ?p1py43 ?vpy63) ?p2py43)) )) :named A1_116))
(assert (! (forall ((?p1py44 Int)(?p2py44 Int)(?mpy61 Int)(?vpy64 Int)) (! (or (overlaps (region ?p1py44 4) (region ?p2py44 4)) (= (ld_u4 (st_u4 ?mpy61 ?p1py44 ?vpy64) ?p2py44) (ld_u4 ?mpy61 ?p2py44))) :pattern ((ld_u4 (st_u4 ?mpy61 ?p1py44 ?vpy64) ?p2py44)) )) :named A1_117))
(assert (! (forall ((?p1py45 Int)(?p2py45 Int)(?mpy62 Int)(?vpy65 Int)) (! (or (overlaps (region ?p1py45 4) (region ?p2py45 8)) (= (ld_i8 (st_i4 ?mpy62 ?p1py45 ?vpy65) ?p2py45) (ld_i8 ?mpy62 ?p2py45))) :pattern ((ld_i8 (st_i4 ?mpy62 ?p1py45 ?vpy65) ?p2py45)) )) :named A1_118))
(assert (! (forall ((?p1py46 Int)(?p2py46 Int)(?mpy63 Int)(?vpy66 Int)) (! (or (overlaps (region ?p1py46 4) (region ?p2py46 8)) (= (ld_i8 (st_u4 ?mpy63 ?p1py46 ?vpy66) ?p2py46) (ld_i8 ?mpy63 ?p2py46))) :pattern ((ld_i8 (st_u4 ?mpy63 ?p1py46 ?vpy66) ?p2py46)) )) :named A1_119))
(assert (! (forall ((?p1py47 Int)(?p2py47 Int)(?mpy64 Int)(?vpy67 Int)) (! (or (overlaps (region ?p1py47 4) (region ?p2py47 8)) (= (ld_u8 (st_i4 ?mpy64 ?p1py47 ?vpy67) ?p2py47) (ld_u8 ?mpy64 ?p2py47))) :pattern ((ld_u8 (st_i4 ?mpy64 ?p1py47 ?vpy67) ?p2py47)) )) :named A1_120))
(assert (! (forall ((?p1py48 Int)(?p2py48 Int)(?mpy65 Int)(?vpy68 Int)) (! (or (overlaps (region ?p1py48 4) (region ?p2py48 8)) (= (ld_u8 (st_u4 ?mpy65 ?p1py48 ?vpy68) ?p2py48) (ld_u8 ?mpy65 ?p2py48))) :pattern ((ld_u8 (st_u4 ?mpy65 ?p1py48 ?vpy68) ?p2py48)) )) :named A1_121))
(assert (! (forall ((?p1py49 Int)(?p2py49 Int)(?mpy66 Int)(?vpy69 Int)) (! (or (overlaps (region ?p1py49 8) (region ?p2py49 1)) (= (ld_i1 (st_i8 ?mpy66 ?p1py49 ?vpy69) ?p2py49) (ld_i1 ?mpy66 ?p2py49))) :pattern ((ld_i1 (st_i8 ?mpy66 ?p1py49 ?vpy69) ?p2py49)) )) :named A1_122))
(assert (! (forall ((?p1py50 Int)(?p2py50 Int)(?mpy67 Int)(?vpy70 Int)) (! (or (overlaps (region ?p1py50 8) (region ?p2py50 1)) (= (ld_i1 (st_u8 ?mpy67 ?p1py50 ?vpy70) ?p2py50) (ld_i1 ?mpy67 ?p2py50))) :pattern ((ld_i1 (st_u8 ?mpy67 ?p1py50 ?vpy70) ?p2py50)) )) :named A1_123))
(assert (! (forall ((?p1py51 Int)(?p2py51 Int)(?mpy68 Int)(?vpy71 Int)) (! (or (overlaps (region ?p1py51 8) (region ?p2py51 1)) (= (ld_u1 (st_i8 ?mpy68 ?p1py51 ?vpy71) ?p2py51) (ld_u1 ?mpy68 ?p2py51))) :pattern ((ld_u1 (st_i8 ?mpy68 ?p1py51 ?vpy71) ?p2py51)) )) :named A1_124))
(assert (! (forall ((?p1py52 Int)(?p2py52 Int)(?mpy69 Int)(?vpy72 Int)) (! (or (overlaps (region ?p1py52 8) (region ?p2py52 1)) (= (ld_u1 (st_u8 ?mpy69 ?p1py52 ?vpy72) ?p2py52) (ld_u1 ?mpy69 ?p2py52))) :pattern ((ld_u1 (st_u8 ?mpy69 ?p1py52 ?vpy72) ?p2py52)) )) :named A1_125))
(assert (! (forall ((?p1py53 Int)(?p2py53 Int)(?mpy70 Int)(?vpy73 Int)) (! (or (overlaps (region ?p1py53 8) (region ?p2py53 2)) (= (ld_i2 (st_i8 ?mpy70 ?p1py53 ?vpy73) ?p2py53) (ld_i2 ?mpy70 ?p2py53))) :pattern ((ld_i2 (st_i8 ?mpy70 ?p1py53 ?vpy73) ?p2py53)) )) :named A1_126))
(assert (! (forall ((?p1py54 Int)(?p2py54 Int)(?mpy71 Int)(?vpy74 Int)) (! (or (overlaps (region ?p1py54 8) (region ?p2py54 2)) (= (ld_i2 (st_u8 ?mpy71 ?p1py54 ?vpy74) ?p2py54) (ld_i2 ?mpy71 ?p2py54))) :pattern ((ld_i2 (st_u8 ?mpy71 ?p1py54 ?vpy74) ?p2py54)) )) :named A1_127))
(assert (! (forall ((?p1py55 Int)(?p2py55 Int)(?mpy72 Int)(?vpy75 Int)) (! (or (overlaps (region ?p1py55 8) (region ?p2py55 2)) (= (ld_u2 (st_i8 ?mpy72 ?p1py55 ?vpy75) ?p2py55) (ld_u2 ?mpy72 ?p2py55))) :pattern ((ld_u2 (st_i8 ?mpy72 ?p1py55 ?vpy75) ?p2py55)) )) :named A1_128))
(assert (! (forall ((?p1py56 Int)(?p2py56 Int)(?mpy73 Int)(?vpy76 Int)) (! (or (overlaps (region ?p1py56 8) (region ?p2py56 2)) (= (ld_u2 (st_u8 ?mpy73 ?p1py56 ?vpy76) ?p2py56) (ld_u2 ?mpy73 ?p2py56))) :pattern ((ld_u2 (st_u8 ?mpy73 ?p1py56 ?vpy76) ?p2py56)) )) :named A1_129))
(assert (! (forall ((?p1py57 Int)(?p2py57 Int)(?mpy74 Int)(?vpy77 Int)) (! (or (overlaps (region ?p1py57 8) (region ?p2py57 4)) (= (ld_i4 (st_i8 ?mpy74 ?p1py57 ?vpy77) ?p2py57) (ld_i4 ?mpy74 ?p2py57))) :pattern ((ld_i4 (st_i8 ?mpy74 ?p1py57 ?vpy77) ?p2py57)) )) :named A1_130))
(assert (! (forall ((?p1py58 Int)(?p2py58 Int)(?mpy75 Int)(?vpy78 Int)) (! (or (overlaps (region ?p1py58 8) (region ?p2py58 4)) (= (ld_i4 (st_u8 ?mpy75 ?p1py58 ?vpy78) ?p2py58) (ld_i4 ?mpy75 ?p2py58))) :pattern ((ld_i4 (st_u8 ?mpy75 ?p1py58 ?vpy78) ?p2py58)) )) :named A1_131))
(assert (! (forall ((?p1py59 Int)(?p2py59 Int)(?mpy76 Int)(?vpy79 Int)) (! (or (overlaps (region ?p1py59 8) (region ?p2py59 4)) (= (ld_u4 (st_i8 ?mpy76 ?p1py59 ?vpy79) ?p2py59) (ld_u4 ?mpy76 ?p2py59))) :pattern ((ld_u4 (st_i8 ?mpy76 ?p1py59 ?vpy79) ?p2py59)) )) :named A1_132))
(assert (! (forall ((?p1py60 Int)(?p2py60 Int)(?mpy77 Int)(?vpy80 Int)) (! (or (overlaps (region ?p1py60 8) (region ?p2py60 4)) (= (ld_u4 (st_u8 ?mpy77 ?p1py60 ?vpy80) ?p2py60) (ld_u4 ?mpy77 ?p2py60))) :pattern ((ld_u4 (st_u8 ?mpy77 ?p1py60 ?vpy80) ?p2py60)) )) :named A1_133))
(assert (! (forall ((?p1py61 Int)(?p2py61 Int)(?mpy78 Int)(?vpy81 Int)) (! (or (overlaps (region ?p1py61 8) (region ?p2py61 8)) (= (ld_i8 (st_i8 ?mpy78 ?p1py61 ?vpy81) ?p2py61) (ld_i8 ?mpy78 ?p2py61))) :pattern ((ld_i8 (st_i8 ?mpy78 ?p1py61 ?vpy81) ?p2py61)) )) :named A1_134))
(assert (! (forall ((?p1py62 Int)(?p2py62 Int)(?mpy79 Int)(?vpy82 Int)) (! (or (overlaps (region ?p1py62 8) (region ?p2py62 8)) (= (ld_i8 (st_u8 ?mpy79 ?p1py62 ?vpy82) ?p2py62) (ld_i8 ?mpy79 ?p2py62))) :pattern ((ld_i8 (st_u8 ?mpy79 ?p1py62 ?vpy82) ?p2py62)) )) :named A1_135))
(assert (! (forall ((?p1py63 Int)(?p2py63 Int)(?mpy80 Int)(?vpy83 Int)) (! (or (overlaps (region ?p1py63 8) (region ?p2py63 8)) (= (ld_u8 (st_i8 ?mpy80 ?p1py63 ?vpy83) ?p2py63) (ld_u8 ?mpy80 ?p2py63))) :pattern ((ld_u8 (st_i8 ?mpy80 ?p1py63 ?vpy83) ?p2py63)) )) :named A1_136))
(assert (! (forall ((?p1py64 Int)(?p2py64 Int)(?mpy81 Int)(?vpy84 Int)) (! (or (overlaps (region ?p1py64 8) (region ?p2py64 8)) (= (ld_u8 (st_u8 ?mpy81 ?p1py64 ?vpy84) ?p2py64) (ld_u8 ?mpy81 ?p2py64))) :pattern ((ld_u8 (st_u8 ?mpy81 ?p1py64 ?vpy84) ?p2py64)) )) :named A1_137))
(assert (! (forall ((?ptr1py0 Int)(?len1py2 Int)(?ptr2py0 Int)(?len2py2 Int)) (! (or (not (overlaps (region ?ptr1py0 ?len1py2) (region ?ptr2py0 ?len2py2))) (and (= (base ?ptr1py0) (base ?ptr2py0)) (or (and (<= 0 ?len2py2) (<= (offset ?ptr2py0) (offset ?ptr1py0)) (not (<= (+ (offset ?ptr2py0) ?len2py2) (offset ?ptr1py0)))) (and (<= 0 ?len1py2) (<= (offset ?ptr1py0) (offset ?ptr2py0)) (not (<= (+ (offset ?ptr1py0) ?len1py2) (offset ?ptr2py0))))))) :pattern ((overlaps (region ?ptr1py0 ?len1py2) (region ?ptr2py0 ?len2py2))) )) :named A1_138))
(assert (! (forall ((?rpy3 Int)(?npy1 Int)(?oldgmempy0 Int)(?newgmempy0 Int)(?oldmempy0 Int)(?newmempy0 Int)) (! (and (or (not (= ?oldmempy0 ?newmempy0)) (only_single_ghost_changed ?rpy3 ?npy1 ?oldgmempy0 ?newgmempy0 ?oldmempy0 ?newmempy0) (and (or (not (overlaps (region (?p!9 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3) 1) ?rpy3)) (not (= (?n2!8 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3) ?npy1))) (not (= (select2 ?oldgmempy0 (ptr2gid (?p!9 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3)) (?n2!8 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3)) (select2 ?newgmempy0 (ptr2gid (?p!9 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3)) (?n2!8 ?newgmempy0 ?oldgmempy0 ?npy1 ?rpy3)))))) (or (and (forall ((?ppy48 Int)(?n2py0 Int)) (! (or (= (select2 ?oldgmempy0 (ptr2gid ?ppy48) ?n2py0) (select2 ?newgmempy0 (ptr2gid ?ppy48) ?n2py0)) (and (overlaps (region ?ppy48 1) ?rpy3) (= ?n2py0 ?npy1))) :pattern ((select2 ?newgmempy0 (ptr2gid ?ppy48) ?n2py0)) )) (= ?oldmempy0 ?newmempy0)) (not (only_single_ghost_changed ?rpy3 ?npy1 ?oldgmempy0 ?newgmempy0 ?oldmempy0 ?newmempy0)))) :pattern ((only_single_ghost_changed ?rpy3 ?npy1 ?oldgmempy0 ?newgmempy0 ?oldmempy0 ?newmempy0)) )) :named A1_139))
(assert (! (forall ((?rpy4 Int)(?opy10 Int)) (! (and (or (not (= (select1 (set_singleton ?rpy4) ?opy10) 1)) (= ?rpy4 ?opy10)) (or (not (= ?rpy4 ?opy10)) (= (select1 (set_singleton ?rpy4) ?opy10) 1))) :pattern ((select1 (set_singleton ?rpy4) ?opy10)) )) :named A1_140))
(assert (! (forall ((?rpy5 Int)(?oldgmempy1 Int)(?newgmempy1 Int)(?oldmempy1 Int)(?newmempy1 Int)) (! (or (not (only_region_changed_or_new ?rpy5 ?oldgmempy1 ?newgmempy1 ?oldmempy1 ?newmempy1)) (and (forall ((?ppy49 Int)(?npy2 Int)) (! (or (= ?npy2 size) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy49) 0)) size) 0) (overlaps (region ?ppy49 1) ?rpy5) (= (select2 ?oldgmempy1 (ptr2gid ?ppy49) ?npy2) (select2 ?newgmempy1 (ptr2gid ?ppy49) ?npy2))) :pattern ((select2 ?newgmempy1 (ptr2gid ?ppy49) ?npy2)) )) (forall ((?ppy50 Int)) (! (or (= (ld_i1 ?oldmempy1 ?ppy50) (ld_i1 ?newmempy1 ?ppy50)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy50) 0)) size) 0) (overlaps (region ?ppy50 1) ?rpy5)) :pattern ((ld_i1 ?newmempy1 ?ppy50)) )) (forall ((?ppy51 Int)) (! (or (= (ld_u1 ?oldmempy1 ?ppy51) (ld_u1 ?newmempy1 ?ppy51)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy51) 0)) size) 0) (overlaps (region ?ppy51 1) ?rpy5)) :pattern ((ld_u1 ?newmempy1 ?ppy51)) )) (forall ((?ppy52 Int)) (! (or (= (ld_i2 ?oldmempy1 ?ppy52) (ld_i2 ?newmempy1 ?ppy52)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy52) 0)) size) 0) (overlaps (region ?ppy52 2) ?rpy5)) :pattern ((ld_i2 ?newmempy1 ?ppy52)) )) (forall ((?ppy53 Int)) (! (or (= (ld_u2 ?oldmempy1 ?ppy53) (ld_u2 ?newmempy1 ?ppy53)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy53) 0)) size) 0) (overlaps (region ?ppy53 2) ?rpy5)) :pattern ((ld_u2 ?newmempy1 ?ppy53)) )) (forall ((?ppy54 Int)) (! (or (= (ld_i4 ?oldmempy1 ?ppy54) (ld_i4 ?newmempy1 ?ppy54)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy54) 0)) size) 0) (overlaps (region ?ppy54 4) ?rpy5)) :pattern ((ld_i4 ?newmempy1 ?ppy54)) )) (forall ((?ppy55 Int)) (! (or (= (ld_u4 ?oldmempy1 ?ppy55) (ld_u4 ?newmempy1 ?ppy55)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy55) 0)) size) 0) (overlaps (region ?ppy55 4) ?rpy5)) :pattern ((ld_u4 ?newmempy1 ?ppy55)) )) (forall ((?ppy56 Int)) (! (or (= (ld_i8 ?oldmempy1 ?ppy56) (ld_i8 ?newmempy1 ?ppy56)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy56) 0)) size) 0) (overlaps (region ?ppy56 8) ?rpy5)) :pattern ((ld_i8 ?newmempy1 ?ppy56)) )) (forall ((?ppy57 Int)) (! (or (= (ld_u8 ?oldmempy1 ?ppy57) (ld_u8 ?newmempy1 ?ppy57)) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy57) 0)) size) 0) (overlaps (region ?ppy57 8) ?rpy5)) :pattern ((ld_u8 ?newmempy1 ?ppy57)) )) (forall ((?ppy58 Int)) (! (or (= (conv_u8_to_ptr (ld_u8 ?oldmempy1 ?ppy58)) (conv_u8_to_ptr (ld_u8 ?newmempy1 ?ppy58))) (= (select2 ?oldgmempy1 (ptr2gid (ptr (base ?ppy58) 0)) size) 0) (overlaps (region ?ppy58 8) ?rpy5)) :pattern ((conv_u8_to_ptr (ld_u8 ?newmempy1 ?ppy58))) )))) :pattern ((only_region_changed_or_new ?rpy5 ?oldgmempy1 ?newgmempy1 ?oldmempy1 ?newmempy1)) )) :named A1_141))
(assert (! (forall ((?rpy6 Int)(?oldgmempy2 Int)(?newgmempy2 Int)(?oldmempy2 Int)(?newmempy2 Int)) (! (or (not (only_region_changed_or_new ?rpy6 ?oldgmempy2 ?newgmempy2 ?oldmempy2 ?newmempy2)) (next_mem ?oldmempy2 ?newmempy2)) :pattern ((only_region_changed_or_new ?rpy6 ?oldgmempy2 ?newgmempy2 ?oldmempy2 ?newmempy2)) )) :named A1_142))
(assert (! (forall ((?rpy7 Int)(?oldgmempy3 Int)(?newgmempy3 Int)(?oldmempy3 Int)(?newmempy3 Int)) (! (or (not (only_region_changed_or_new ?rpy7 ?oldgmempy3 ?newgmempy3 ?oldmempy3 ?newmempy3)) (not (alloc_grows ?oldgmempy3 ?newgmempy3)) (only_region_changed_or_new_nontrans ?rpy7 ?oldgmempy3 ?newgmempy3 ?oldmempy3 ?newmempy3)) :pattern ((only_region_changed_or_new ?rpy7 ?oldgmempy3 ?newgmempy3 ?oldmempy3 ?newmempy3)) )) :named A1_143))
(assert (! (forall ((?rpy8 Int)(?oldgmempy4 Int)(?newgmempy4 Int)(?oldmempy4 Int)(?newmempy4 Int)) (! (or (not (only_region_changed_or_new_nontrans ?rpy8 ?oldgmempy4 ?newgmempy4 ?oldmempy4 ?newmempy4)) (only_region_changed_or_new_trans ?rpy8 ?oldgmempy4 ?newgmempy4 ?oldmempy4 ?newmempy4)) :pattern ((only_region_changed_or_new_nontrans ?rpy8 ?oldgmempy4 ?newgmempy4 ?oldmempy4 ?newmempy4)) )) :named A1_144))
(assert (! (forall ((?rpy9 Int)(?oldgmempy5 Int)(?newgmempy5 Int)(?oldmempy5 Int)(?newmempy5 Int)) (! (or (only_region_changed_or_new ?rpy9 ?oldgmempy5 ?newgmempy5 ?oldmempy5 ?newmempy5) (and (not (= (?n!3 ?newgmempy5 ?oldgmempy5 ?rpy9) size)) (not (= (select2 ?oldgmempy5 (ptr2gid (ptr (base (?p!4 ?newgmempy5 ?oldgmempy5 ?rpy9)) 0)) size) 0)) (not (contains (region (?p!4 ?newgmempy5 ?oldgmempy5 ?rpy9) 1) ?rpy9)) (not (= (select2 ?oldgmempy5 (ptr2gid (?p!4 ?newgmempy5 ?oldgmempy5 ?rpy9)) (?n!3 ?newgmempy5 ?oldgmempy5 ?rpy9)) (select2 ?newgmempy5 (ptr2gid (?p!4 ?newgmempy5 ?oldgmempy5 ?rpy9)) (?n!3 ?newgmempy5 ?oldgmempy5 ?rpy9))))) (and (not (= (select2 ?oldgmempy5 (ptr2gid (ptr (base (?p!5 ?newmempy5 ?oldmempy5 ?oldgmempy5 ?rpy9)) 0)) size) 0)) (not (contains (region (?p!5 ?newmempy5 ?oldmempy5 ?oldgmempy5 ?rpy9) 1) ?rpy9)) (not (= (ld_u1 ?oldmempy5 (?p!5 ?newmempy5 ?oldmempy5 ?oldgmempy5 ?rpy9)) (ld_u1 ?newmempy5 (?p!5 ?newmempy5 ?oldmempy5 ?oldgmempy5 ?rpy9)))))) :pattern ((only_region_changed_or_new ?rpy9 ?oldgmempy5 ?newgmempy5 ?oldmempy5 ?newmempy5)) )) :named A1_145))
(assert (! (forall ((?rpy10 Int)(?oldmempy6 Int)(?newmempy6 Int)) (! (or (and (not (contains (region (?p!6 ?newmempy6 ?oldmempy6 ?rpy10) 1) ?rpy10)) (not (= (ld_u1 ?oldmempy6 (?p!6 ?newmempy6 ?oldmempy6 ?rpy10)) (ld_u1 ?newmempy6 (?p!6 ?newmempy6 ?oldmempy6 ?rpy10))))) (only_region_changed ?rpy10 ?oldmempy6 ?newmempy6)) :pattern ((only_region_changed ?rpy10 ?oldmempy6 ?newmempy6)) )) :named A1_146))
(assert (! (forall ((?rpy11 Int)(?oldmempy7 Int)(?newmempy7 Int)) (! (or (not (only_region_changed ?rpy11 ?oldmempy7 ?newmempy7)) (and (forall ((?ppy59 Int)) (! (or (overlaps (region ?ppy59 1) ?rpy11) (= (ld_i1 ?oldmempy7 ?ppy59) (ld_i1 ?newmempy7 ?ppy59))) :pattern ((ld_i1 ?newmempy7 ?ppy59)) )) (forall ((?ppy60 Int)) (! (or (overlaps (region ?ppy60 1) ?rpy11) (= (ld_u1 ?oldmempy7 ?ppy60) (ld_u1 ?newmempy7 ?ppy60))) :pattern ((ld_u1 ?newmempy7 ?ppy60)) )) (forall ((?ppy61 Int)) (! (or (overlaps (region ?ppy61 2) ?rpy11) (= (ld_i2 ?oldmempy7 ?ppy61) (ld_i2 ?newmempy7 ?ppy61))) :pattern ((ld_i2 ?newmempy7 ?ppy61)) )) (forall ((?ppy62 Int)) (! (or (overlaps (region ?ppy62 2) ?rpy11) (= (ld_u2 ?oldmempy7 ?ppy62) (ld_u2 ?newmempy7 ?ppy62))) :pattern ((ld_u2 ?newmempy7 ?ppy62)) )) (forall ((?ppy63 Int)) (! (or (overlaps (region ?ppy63 4) ?rpy11) (= (ld_i4 ?oldmempy7 ?ppy63) (ld_i4 ?newmempy7 ?ppy63))) :pattern ((ld_i4 ?newmempy7 ?ppy63)) )) (forall ((?ppy64 Int)) (! (or (overlaps (region ?ppy64 4) ?rpy11) (= (ld_u4 ?oldmempy7 ?ppy64) (ld_u4 ?newmempy7 ?ppy64))) :pattern ((ld_u4 ?newmempy7 ?ppy64)) )) (forall ((?ppy65 Int)) (! (or (overlaps (region ?ppy65 8) ?rpy11) (= (ld_i8 ?oldmempy7 ?ppy65) (ld_i8 ?newmempy7 ?ppy65))) :pattern ((ld_i8 ?newmempy7 ?ppy65)) )) (forall ((?ppy66 Int)) (! (or (overlaps (region ?ppy66 8) ?rpy11) (= (ld_u8 ?oldmempy7 ?ppy66) (ld_u8 ?newmempy7 ?ppy66))) :pattern ((ld_u8 ?newmempy7 ?ppy66)) )) (forall ((?ppy67 Int)) (! (or (overlaps (region ?ppy67 8) ?rpy11) (= (conv_u8_to_ptr (ld_u8 ?oldmempy7 ?ppy67)) (conv_u8_to_ptr (ld_u8 ?newmempy7 ?ppy67)))) :pattern ((conv_u8_to_ptr (ld_u8 ?newmempy7 ?ppy67))) )))) :pattern ((only_region_changed ?rpy11 ?oldmempy7 ?newmempy7)) )) :named A1_147))
(assert (! (forall ((?rpy12 Int)(?oldmempy8 Int)(?newmempy8 Int)) (! (or (not (only_region_changed ?rpy12 ?oldmempy8 ?newmempy8)) (next_mem ?oldmempy8 ?newmempy8)) :pattern ((only_region_changed ?rpy12 ?oldmempy8 ?newmempy8)) )) :named A1_148))
(assert (! (forall ((?rpy13 Int)(?spy0 Int)) (! (and (or (not (contains (set_to_region ?spy0) ?rpy13)) (forall ((?ppy68 Int)) (! (or (not (= (select1 ?spy0 ?ppy68) 1)) (overlaps (region ?ppy68 1) ?rpy13)) :pattern ((select1 ?spy0 ?ppy68)) :pattern ((region ?ppy68 1)) ))) (or (contains (set_to_region ?spy0) ?rpy13) (and (= (select1 ?spy0 (?p!13 ?spy0 ?rpy13)) 1) (not (overlaps (region (?p!13 ?spy0 ?rpy13) 1) ?rpy13))))) :pattern ((contains (set_to_region ?spy0) ?rpy13)) )) :named A1_149))
(assert (! (forall ((?rpy14 Int)(?spy1 Int)) (! (and (or (not (overlaps (set_to_region ?spy1) ?rpy14)) (and (= (select1 ?spy1 (?p!14 ?spy1 ?rpy14)) 1) (overlaps (region (?p!14 ?spy1 ?rpy14) 1) ?rpy14))) (or (overlaps (set_to_region ?spy1) ?rpy14) (forall ((?ppy69 Int)) (! (or (not (= (select1 ?spy1 ?ppy69) 1)) (not (overlaps (region ?ppy69 1) ?rpy14))) :pattern ((select1 ?spy1 ?ppy69)) :pattern ((region ?ppy69 1)) )))) :pattern ((overlaps (set_to_region ?spy1) ?rpy14)) )) :named A1_150))
(assert (! (forall ((?rpy15 Int)(?spy2 Int)) (! (and (or (not (overlaps ?rpy15 (set_to_region ?spy2))) (and (= (select1 ?spy2 (?p!14 ?spy2 ?rpy15)) 1) (overlaps (region (?p!14 ?spy2 ?rpy15) 1) ?rpy15))) (or (overlaps ?rpy15 (set_to_region ?spy2)) (forall ((?ppy70 Int)) (! (or (not (= (select1 ?spy2 ?ppy70) 1)) (not (overlaps (region ?ppy70 1) ?rpy15))) :pattern ((select1 ?spy2 ?ppy70)) :pattern ((region ?ppy70 1)) )))) :pattern ((overlaps ?rpy15 (set_to_region ?spy2))) )) :named A1_151))
(assert (! (forall ((?rpy16 Int)) (! (= (subtraction ?rpy16 ?rpy16) empty) :pattern ((subtraction ?rpy16 ?rpy16)) )) :named A1_152))
(assert (! (forall ((?rpy17 Int)) (! (= (subtraction ?rpy17 empty) ?rpy17) :pattern ((subtraction ?rpy17 empty)) )) :named A1_153))
(assert (! (forall ((?rpy18 Int)) (! (= (subtraction ?rpy18 universe) empty) :pattern ((subtraction ?rpy18 universe)) )) :named A1_154))
(assert (! (forall ((?rpy19 Int)) (! (= (subtraction empty ?rpy19) empty) :pattern ((subtraction empty ?rpy19)) )) :named A1_155))
(assert (! (forall ((?rpy20 Int)) (! (= (union ?rpy20 ?rpy20) ?rpy20) :pattern ((union ?rpy20 ?rpy20)) )) :named A1_156))
(assert (! (forall ((?rpy21 Int)) (! (= (union ?rpy21 empty) ?rpy21) :pattern ((union ?rpy21 empty)) )) :named A1_157))
(assert (! (forall ((?rpy22 Int)) (! (= (union ?rpy22 universe) universe) :pattern ((union ?rpy22 universe)) )) :named A1_158))
(assert (! (forall ((?rpy23 Int)) (! (= (union empty ?rpy23) ?rpy23) :pattern ((union empty ?rpy23)) )) :named A1_159))
(assert (! (forall ((?rpy24 Int)) (! (= (union universe ?rpy24) universe) :pattern ((union universe ?rpy24)) )) :named A1_160))
(assert (! (forall ((?rpy25 Int)) (! (contains ?rpy25 ?rpy25) :pattern ((contains ?rpy25 ?rpy25)) )) :named A1_161))
(assert (! (forall ((?rpy26 Int)) (! (contains ?rpy26 universe) :pattern ((contains ?rpy26 universe)) )) :named A1_162))
(assert (! (forall ((?rpy27 Int)) (! (contains empty ?rpy27) :pattern ((contains empty ?rpy27)) )) :named A1_163))
(assert (! (forall ((?rpy28 Int)) (! (not (overlaps ?rpy28 empty)) :pattern ((overlaps ?rpy28 empty)) )) :named A1_164))
(assert (! (forall ((?rpy29 Int)) (! (not (overlaps empty ?rpy29)) :pattern ((overlaps empty ?rpy29)) )) :named A1_165))
(assert (! (forall ((?rpy30 Int)) (! (or (= ?rpy30 empty) (overlaps ?rpy30 ?rpy30)) :pattern ((overlaps ?rpy30 ?rpy30)) )) :named A1_166))
(assert (! (forall ((?rpy31 Int)) (! (or (= ?rpy31 empty) (overlaps ?rpy31 universe)) :pattern ((overlaps ?rpy31 universe)) )) :named A1_167))
(assert (! (forall ((?rpy32 Int)) (! (or (= ?rpy32 empty) (overlaps universe ?rpy32)) :pattern ((overlaps universe ?rpy32)) )) :named A1_168))
(assert (! (forall ((?rpy33 Int)) (! (or (not (contains ?rpy33 empty)) (= ?rpy33 empty)) :pattern ((contains ?rpy33 empty)) )) :named A1_169))
(assert (! (forall ((?rpy34 Int)) (! (or (not (contains universe ?rpy34)) (= ?rpy34 universe)) :pattern ((contains universe ?rpy34)) )) :named A1_170))
(assert (! (forall ((?rpy35 Int)) (! (simple_subregion ?rpy35 ?rpy35) :pattern ((simple_subregion ?rpy35 ?rpy35)) )) :named A1_171))
(assert (! (forall ((?r1py1 Int)(?oldgmempy6 Int)(?newgmempy6 Int)(?oldmempy9 Int)(?newmempy9 Int)) (! (or (not (only_region_changed_or_new_trans ?r1py1 ?oldgmempy6 ?newgmempy6 ?oldmempy9 ?newmempy9)) (not (<= (memory_id ?newgmempy6 ?newmempy9) (memory_id ?oldgmempy6 ?oldmempy9))) (and (= ?oldgmempy6 ?newgmempy6) (= ?oldmempy9 ?newmempy9))) :pattern ((only_region_changed_or_new_trans ?r1py1 ?oldgmempy6 ?newgmempy6 ?oldmempy9 ?newmempy9)) )) :named A1_172))
(assert (! (forall ((?r1py2 Int)(?r2py1 Int)(?gmem1py0 Int)(?gmem2py0 Int)(?gmem3py0 Int)(?mem1py0 Int)(?mem2py0 Int)(?mem3py0 Int)) (! (or (not (only_region_changed_or_new_trans ?r1py2 ?gmem1py0 ?gmem2py0 ?mem1py0 ?mem2py0)) (not (only_region_changed_or_new_nontrans ?r2py1 ?gmem2py0 ?gmem3py0 ?mem2py0 ?mem3py0)) (only_region_changed_or_new_trans (union ?r1py2 ?r2py1) ?gmem1py0 ?gmem3py0 ?mem1py0 ?mem3py0)) :pattern ((only_region_changed_or_new_trans ?r1py2 ?gmem1py0 ?gmem2py0 ?mem1py0 ?mem2py0) (only_region_changed_or_new_nontrans ?r2py1 ?gmem2py0 ?gmem3py0 ?mem2py0 ?mem3py0)) )) :named A1_173))
(assert (! (forall ((?r1py3 Int)(?r2py2 Int)(?r3py0 Int)) (! (= (subtraction (union ?r1py3 ?r2py2) (union ?r1py3 ?r3py0)) (subtraction ?r2py2 (union ?r1py3 ?r3py0))) :pattern ((subtraction (union ?r1py3 ?r2py2) (union ?r1py3 ?r3py0))) )) :named A1_174))
(assert (! (forall ((?r1py4 Int)(?r2py3 Int)(?r3py1 Int)) (! (and (or (overlaps ?r1py4 ?r3py1) (overlaps ?r2py3 ?r3py1) (not (overlaps (union ?r1py4 ?r2py3) ?r3py1))) (or (overlaps (union ?r1py4 ?r2py3) ?r3py1) (and (not (overlaps ?r1py4 ?r3py1)) (not (overlaps ?r2py3 ?r3py1))))) :pattern ((overlaps (union ?r1py4 ?r2py3) ?r3py1)) )) :named A1_175))
(assert (! (forall ((?r1py5 Int)(?r2py4 Int)(?r3py2 Int)) (! (and (or (overlaps ?r3py2 ?r1py5) (overlaps ?r3py2 ?r2py4) (not (overlaps ?r3py2 (union ?r1py5 ?r2py4)))) (or (overlaps ?r3py2 (union ?r1py5 ?r2py4)) (and (not (overlaps ?r3py2 ?r1py5)) (not (overlaps ?r3py2 ?r2py4))))) :pattern ((overlaps ?r3py2 (union ?r1py5 ?r2py4))) )) :named A1_176))
(assert (! (forall ((?r1py6 Int)(?r2py5 Int)(?r3py3 Int)) (! (or (contains ?r1py6 (union ?r2py5 ?r3py3)) (and (not (contains ?r1py6 ?r2py5)) (not (contains ?r1py6 ?r3py3)))) :pattern ((contains ?r1py6 (union ?r2py5 ?r3py3))) )) :named A1_177))
(assert (! (forall ((?r1py7 Int)(?r2py6 Int)(?r3py4 Int)) (! (or (not (contains ?r1py7 ?r2py6)) (overlaps ?r1py7 ?r3py4) (contains ?r1py7 (subtraction ?r2py6 ?r3py4))) :pattern ((contains ?r1py7 (subtraction ?r2py6 ?r3py4))) )) :named A1_178))
(assert (! (forall ((?r1py8 Int)(?r2py7 Int)(?r3py5 Int)) (! (or (not (contains ?r1py8 ?r3py5)) (contains (subtraction ?r1py8 ?r2py7) ?r3py5)) :pattern ((contains (subtraction ?r1py8 ?r2py7) ?r3py5)) )) :named A1_179))
(assert (! (forall ((?r1py9 Int)(?r2py8 Int)(?r3py6 Int)) (! (or (not (contains ?r1py9 ?r3py6)) (not (contains ?r2py8 ?r3py6)) (contains (union ?r1py9 ?r2py8) ?r3py6)) :pattern ((contains (union ?r1py9 ?r2py8) ?r3py6)) )) :named A1_180))
(assert (! (forall ((?r1py10 Int)(?r2py9 Int)(?r3py7 Int)) (! (or (not (contains ?r3py7 ?r2py9)) (not (overlaps (subtraction ?r1py10 ?r2py9) ?r3py7))) :pattern ((overlaps (subtraction ?r1py10 ?r2py9) ?r3py7)) )) :named A1_181))
(assert (! (forall ((?r1py11 Int)(?r2py10 Int)(?r3py8 Int)) (! (or (not (contains ?r3py8 ?r2py10)) (not (overlaps ?r3py8 (subtraction ?r1py11 ?r2py10)))) :pattern ((overlaps ?r3py8 (subtraction ?r1py11 ?r2py10))) )) :named A1_182))
(assert (! (forall ((?r1py12 Int)(?r2py11 Int)(?r3py9 Int)) (! (or (not (simple_subregion ?r1py12 ?r2py11)) (not (simple_subregion (subtraction ?r3py9 ?r1py12) ?r2py11)) (simple_subregion ?r3py9 ?r2py11)) :pattern ((simple_subregion ?r1py12 ?r2py11) (simple_subregion (subtraction ?r3py9 ?r1py12) ?r2py11)) )) :named A1_183))
(assert (! (forall ((?r1py13 Int)(?r2py12 Int)(?r3py10 Int)) (! (or (overlaps ?r1py13 ?r3py10) (not (overlaps (subtraction ?r1py13 ?r2py12) ?r3py10))) :pattern ((overlaps (subtraction ?r1py13 ?r2py12) ?r3py10)) )) :named A1_184))
(assert (! (forall ((?r1py14 Int)(?r2py13 Int)(?r3py11 Int)) (! (or (overlaps ?r3py11 ?r1py14) (not (overlaps ?r3py11 (subtraction ?r1py14 ?r2py13)))) :pattern ((overlaps ?r3py11 (subtraction ?r1py14 ?r2py13))) )) :named A1_185))
(assert (! (forall ((?r1py15 Int)(?r2py14 Int)(?r3py12 Int)) (! (simple_subregion (union ?r2py14 ?r3py12) (union ?r2py14 ?r3py12)) :pattern ((contains ?r1py15 (union ?r2py14 ?r3py12))) )) :named A1_186))
(assert (! (forall ((?r1py16 Int)(?r2py15 Int)(?r3py13 Int)) (! (or (not (simple_subregion (union ?r1py16 ?r2py15) ?r3py13)) (and (simple_subregion ?r1py16 ?r3py13) (simple_subregion ?r2py15 ?r3py13))) :pattern ((simple_subregion (union ?r1py16 ?r2py15) ?r3py13)) )) :named A1_187))
(assert (! (forall ((?r1py17 Int)(?r2py16 Int)) (! (or (not (simple_subregion ?r1py17 ?r2py16)) (contains ?r1py17 ?r2py16)) :pattern ((simple_subregion ?r1py17 ?r2py16) (contains ?r1py17 ?r2py16)) )) :named A1_188))
(assert (! (forall ((?tpy3 Int)(?p1py65 Int)(?p2py65 Int)(?l1py0 Int)(?l2py0 Int)(?o1py0 Int)(?o2py0 Int)) (! (or (not (<= 0 ?l1py0)) (not (<= 0 ?o1py0)) (not (<= 0 ?o2py0)) (not (is ?p2py65 ?tpy3)) (not (<= 0 ?l2py0)) (not (<= (+ ?l2py0 ?o2py0) (sizeof ?tpy3))) (not (overlaps (region (add_ptr ?p1py65 ?o1py0 1) ?l1py0) (region (add_ptr ?p2py65 ?o2py0 1) ?l2py0))) (not (is ?p1py65 ?tpy3)) (not (<= (+ ?l1py0 ?o1py0) (sizeof ?tpy3))) (= ?p1py65 ?p2py65)) :pattern ((is ?p1py65 ?tpy3) (is ?p2py65 ?tpy3) (overlaps (region (add_ptr ?p1py65 ?o1py0 1) ?l1py0) (region (add_ptr ?p2py65 ?o2py0 1) ?l2py0))) )) :named A1_189))
(assert (! (forall ((?tpy4 Int)(?p1py66 Int)(?p2py66 Int)(?l1py1 Int)(?l2py1 Int)) (! (or (not (<= 0 ?l1py1)) (not (<= 0 ?l2py1)) (= ?p1py66 ?p2py66) (not (is ?p2py66 ?tpy4)) (not (<= ?l2py1 (sizeof ?tpy4))) (not (overlaps (region ?p1py66 ?l1py1) (region ?p2py66 ?l2py1))) (not (is ?p1py66 ?tpy4)) (not (<= ?l1py1 (sizeof ?tpy4)))) :pattern ((is ?p1py66 ?tpy4) (is ?p2py66 ?tpy4) (overlaps (region ?p1py66 ?l1py1) (region ?p2py66 ?l2py1))) )) :named A1_190))
(assert (! (forall ((?t1py0 Int)(?t2py0 Int)(?p1py67 Int)(?p2py67 Int)(?l1py2 Int)(?l2py2 Int)(?o1py1 Int)(?o2py1 Int)) (! (or (not (<= 0 ?l1py2)) (not (<= 0 ?o1py1)) (not (<= 0 ?o2py1)) (not (is ?p1py67 ?t1py0)) (not (is ?p2py67 ?t2py0)) (not (disjoint_types ?t1py0 ?t2py0)) (not (<= 0 ?l2py2)) (not (<= (+ ?l1py2 ?o1py1) (sizeof ?t1py0))) (not (<= (+ ?l2py2 ?o2py1) (sizeof ?t2py0))) (not (overlaps (region (add_ptr ?p1py67 ?o1py1 1) ?l1py2) (region (add_ptr ?p2py67 ?o2py1 1) ?l2py2)))) :pattern ((is ?p1py67 ?t1py0) (is ?p2py67 ?t2py0) (disjoint_types ?t1py0 ?t2py0) (overlaps (region (add_ptr ?p1py67 ?o1py1 1) ?l1py2) (region (add_ptr ?p2py67 ?o2py1 1) ?l2py2))) )) :named A1_191))
(assert (! (forall ((?t1py1 Int)(?t2py1 Int)(?p1py68 Int)(?p2py68 Int)(?l1py3 Int)(?l2py3 Int)) (! (or (not (<= 0 ?l1py3)) (not (<= 0 ?l2py3)) (not (is ?p1py68 ?t1py1)) (not (is ?p2py68 ?t2py1)) (not (disjoint_types ?t1py1 ?t2py1)) (not (<= ?l1py3 (sizeof ?t1py1))) (not (<= ?l2py3 (sizeof ?t2py1))) (not (overlaps (region ?p1py68 ?l1py3) (region ?p2py68 ?l2py3)))) :pattern ((is ?p1py68 ?t1py1) (is ?p2py68 ?t2py1) (disjoint_types ?t1py1 ?t2py1) (overlaps (region ?p1py68 ?l1py3) (region ?p2py68 ?l2py3))) )) :named A1_192))
(assert (! (forall ((?vpy85 Int)) (! (or (= ?vpy85 0) (conv_i4_to_bool ?vpy85)) :pattern ((conv_i4_to_bool ?vpy85)) )) :named A1_193))
(assert (! (forall ((?x_3py2 Int)(?ypy1 Int)) (! (= (and_1 ?x_3py2 ?ypy1) (and_1 ?ypy1 ?x_3py2)) :pattern ((and_1 ?x_3py2 ?ypy1)) )) :named A1_194))
(assert (! (forall ((?x_3py3 Int)(?ypy2 Int)) (! (= (or_1 ?x_3py3 ?ypy2) (or_1 ?ypy2 ?x_3py3)) :pattern ((or_1 ?x_3py3 ?ypy2)) )) :named A1_195))
(assert (! (forall ((?x_3py4 Int)(?ypy3 Int)) (! (= (x ?x_3py4 ?ypy3) (+ ?x_3py4 (* (- 1) (x_1 ?x_3py4 ?ypy3) ?ypy3))) :pattern ((x ?x_3py4 ?ypy3)) :pattern ((x_1 ?x_3py4 ?ypy3)) )) :named A1_196))
(assert (! (forall ((?x_3py5 Int)(?ypy4 Int)) (! (= (x ?x_3py5 ?ypy4) (rem_unchk_u4 ?x_3py5 ?ypy4)) :pattern ((rem_unchk_u4 ?x_3py5 ?ypy4)) )) :named A1_197))
(assert (! (forall ((?x_3py6 Int)(?ypy5 Int)) (! (= (x ?x_3py6 ?ypy5) (rem_unchk_u8 ?x_3py6 ?ypy5)) :pattern ((rem_unchk_u8 ?x_3py6 ?ypy5)) )) :named A1_198))
(assert (! (forall ((?x_3py7 Int)(?ypy6 Int)) (! (= (x_1 ?x_3py7 ?ypy6) (div_unchk_u4 ?x_3py7 ?ypy6)) :pattern ((div_unchk_u4 ?x_3py7 ?ypy6)) )) :named A1_199))
(assert (! (forall ((?x_3py8 Int)(?ypy7 Int)) (! (= (x_1 ?x_3py8 ?ypy7) (div_unchk_u8 ?x_3py8 ?ypy7)) :pattern ((div_unchk_u8 ?x_3py8 ?ypy7)) )) :named A1_200))
(assert (! (forall ((?x_3py9 Int)(?ypy8 Int)) (! (= (xor_1 ?x_3py9 ?ypy8) (xor_1 ?ypy8 ?x_3py9)) :pattern ((xor_1 ?x_3py9 ?ypy8)) )) :named A1_201))
(assert (! (forall ((?x_3py10 Int)(?ypy9 Int)) (! (and (<= min_i4 (add_unchk_i4 ?x_3py10 ?ypy9)) (<= (add_unchk_i4 ?x_3py10 ?ypy9) max_i4)) :pattern ((add_unchk_i4 ?x_3py10 ?ypy9)) )) :named A1_202))
(assert (! (forall ((?x_3py11 Int)(?ypy10 Int)) (! (and (<= min_i4 (div_unchk_i4 ?x_3py11 ?ypy10)) (<= (div_unchk_i4 ?x_3py11 ?ypy10) max_i4)) :pattern ((div_unchk_i4 ?x_3py11 ?ypy10)) )) :named A1_203))
(assert (! (forall ((?x_3py12 Int)(?ypy11 Int)) (! (and (<= min_i4 (mul_unchk_i4 ?x_3py12 ?ypy11)) (<= (mul_unchk_i4 ?x_3py12 ?ypy11) max_i4)) :pattern ((mul_unchk_i4 ?x_3py12 ?ypy11)) )) :named A1_204))
(assert (! (forall ((?x_3py13 Int)(?ypy12 Int)) (! (and (<= min_i4 (rem_unchk_i4 ?x_3py13 ?ypy12)) (<= (rem_unchk_i4 ?x_3py13 ?ypy12) max_i4)) :pattern ((rem_unchk_i4 ?x_3py13 ?ypy12)) )) :named A1_205))
(assert (! (forall ((?x_3py14 Int)(?ypy13 Int)) (! (and (<= min_i4 (sub_unchk_i4 ?x_3py14 ?ypy13)) (<= (sub_unchk_i4 ?x_3py14 ?ypy13) max_i4)) :pattern ((sub_unchk_i4 ?x_3py14 ?ypy13)) )) :named A1_206))
(assert (! (forall ((?x_3py15 Int)(?ypy14 Int)) (! (and (<= min_i8 (add_unchk_i8 ?x_3py15 ?ypy14)) (<= (add_unchk_i8 ?x_3py15 ?ypy14) max_i8)) :pattern ((add_unchk_i8 ?x_3py15 ?ypy14)) )) :named A1_207))
(assert (! (forall ((?x_3py16 Int)(?ypy15 Int)) (! (and (<= min_i8 (div_unchk_i8 ?x_3py16 ?ypy15)) (<= (div_unchk_i8 ?x_3py16 ?ypy15) max_i8)) :pattern ((div_unchk_i8 ?x_3py16 ?ypy15)) )) :named A1_208))
(assert (! (forall ((?x_3py17 Int)(?ypy16 Int)) (! (and (<= min_i8 (mul_unchk_i8 ?x_3py17 ?ypy16)) (<= (mul_unchk_i8 ?x_3py17 ?ypy16) max_i8)) :pattern ((mul_unchk_i8 ?x_3py17 ?ypy16)) )) :named A1_209))
(assert (! (forall ((?x_3py18 Int)(?ypy17 Int)) (! (and (<= min_i8 (rem_unchk_i8 ?x_3py18 ?ypy17)) (<= (rem_unchk_i8 ?x_3py18 ?ypy17) max_i8)) :pattern ((rem_unchk_i8 ?x_3py18 ?ypy17)) )) :named A1_210))
(assert (! (forall ((?x_3py19 Int)(?ypy18 Int)) (! (and (<= min_i8 (sub_unchk_i8 ?x_3py19 ?ypy18)) (<= (sub_unchk_i8 ?x_3py19 ?ypy18) max_i8)) :pattern ((sub_unchk_i8 ?x_3py19 ?ypy18)) )) :named A1_211))
(assert (! (forall ((?x_3py20 Int)(?ypy19 Int)) (! (and (<= min_u4 (add_unchk_u4 ?x_3py20 ?ypy19)) (<= (add_unchk_u4 ?x_3py20 ?ypy19) max_u4)) :pattern ((add_unchk_u4 ?x_3py20 ?ypy19)) )) :named A1_212))
(assert (! (forall ((?x_3py21 Int)(?ypy20 Int)) (! (and (<= min_u4 (div_unchk_u4 ?x_3py21 ?ypy20)) (<= (div_unchk_u4 ?x_3py21 ?ypy20) max_u4)) :pattern ((div_unchk_u4 ?x_3py21 ?ypy20)) )) :named A1_213))
(assert (! (forall ((?x_3py22 Int)(?ypy21 Int)) (! (and (<= min_u4 (mul_unchk_u4 ?x_3py22 ?ypy21)) (<= (mul_unchk_u4 ?x_3py22 ?ypy21) max_u4)) :pattern ((mul_unchk_u4 ?x_3py22 ?ypy21)) )) :named A1_214))
(assert (! (forall ((?x_3py23 Int)(?ypy22 Int)) (! (and (<= min_u4 (rem_unchk_u4 ?x_3py23 ?ypy22)) (<= (rem_unchk_u4 ?x_3py23 ?ypy22) max_u4)) :pattern ((rem_unchk_u4 ?x_3py23 ?ypy22)) )) :named A1_215))
(assert (! (forall ((?x_3py24 Int)(?ypy23 Int)) (! (and (<= min_u4 (sub_unchk_u4 ?x_3py24 ?ypy23)) (<= (sub_unchk_u4 ?x_3py24 ?ypy23) max_u4)) :pattern ((sub_unchk_u4 ?x_3py24 ?ypy23)) )) :named A1_216))
(assert (! (forall ((?x_3py25 Int)(?ypy24 Int)) (! (and (<= min_u8 (add_unchk_u8 ?x_3py25 ?ypy24)) (<= (add_unchk_u8 ?x_3py25 ?ypy24) max_u8)) :pattern ((add_unchk_u8 ?x_3py25 ?ypy24)) )) :named A1_217))
(assert (! (forall ((?x_3py26 Int)(?ypy25 Int)) (! (and (<= min_u8 (div_unchk_u8 ?x_3py26 ?ypy25)) (<= (div_unchk_u8 ?x_3py26 ?ypy25) max_u8)) :pattern ((div_unchk_u8 ?x_3py26 ?ypy25)) )) :named A1_218))
(assert (! (forall ((?x_3py27 Int)(?ypy26 Int)) (! (and (<= min_u8 (mul_unchk_u8 ?x_3py27 ?ypy26)) (<= (mul_unchk_u8 ?x_3py27 ?ypy26) max_u8)) :pattern ((mul_unchk_u8 ?x_3py27 ?ypy26)) )) :named A1_219))
(assert (! (forall ((?x_3py28 Int)(?ypy27 Int)) (! (and (<= min_u8 (rem_unchk_u8 ?x_3py28 ?ypy27)) (<= (rem_unchk_u8 ?x_3py28 ?ypy27) max_u8)) :pattern ((rem_unchk_u8 ?x_3py28 ?ypy27)) )) :named A1_220))
(assert (! (forall ((?x_3py29 Int)(?ypy28 Int)) (! (and (<= min_u8 (sub_unchk_u8 ?x_3py29 ?ypy28)) (<= (sub_unchk_u8 ?x_3py29 ?ypy28) max_u8)) :pattern ((sub_unchk_u8 ?x_3py29 ?ypy28)) )) :named A1_221))
(assert (! (forall ((?x_3py30 Int)(?ypy29 Int)) (! (or (<= 0 ?ypy29) (not (<= ?x_3py30 0)) (and (not (<= (x ?x_3py30 ?ypy29) ?ypy29)) (<= (x ?x_3py30 ?ypy29) 0))) :pattern ((x ?x_3py30 ?ypy29)) )) :named A1_222))
(assert (! (forall ((?x_3py31 Int)(?ypy30 Int)) (! (or (= (x ?x_3py31 ?ypy30) (rem_unchk_i4 ?x_3py31 ?ypy30)) (and (= ?x_3py31 min_i4) (= ?ypy30 (- 1)))) :pattern ((rem_unchk_i4 ?x_3py31 ?ypy30)) )) :named A1_223))
(assert (! (forall ((?x_3py32 Int)(?ypy31 Int)) (! (or (= (x ?x_3py32 ?ypy31) (rem_unchk_i8 ?x_3py32 ?ypy31)) (and (= ?x_3py32 min_i8) (= ?ypy31 (- 1)))) :pattern ((rem_unchk_i8 ?x_3py32 ?ypy31)) )) :named A1_224))
(assert (! (forall ((?x_3py33 Int)(?ypy32 Int)) (! (or (= (x_1 ?x_3py33 ?ypy32) (div_unchk_i4 ?x_3py33 ?ypy32)) (and (= ?x_3py33 min_i4) (= ?ypy32 (- 1)))) :pattern ((div_unchk_i4 ?x_3py33 ?ypy32)) )) :named A1_225))
(assert (! (forall ((?x_3py34 Int)(?ypy33 Int)) (! (or (= (x_1 ?x_3py34 ?ypy33) (div_unchk_i8 ?x_3py34 ?ypy33)) (and (= ?x_3py34 min_i8) (= ?ypy33 (- 1)))) :pattern ((div_unchk_i8 ?x_3py34 ?ypy33)) )) :named A1_226))
(assert (! (forall ((?x_3py35 Int)(?ypy34 Int)) (! (or (not (<= (+ ?x_3py35 (* (- 1) ?ypy34)) max_i4)) (= (+ ?x_3py35 (* (- 1) ?ypy34)) (sub_unchk_i4 ?x_3py35 ?ypy34)) (not (<= min_i4 (+ ?x_3py35 (* (- 1) ?ypy34))))) :pattern ((sub_unchk_i4 ?x_3py35 ?ypy34)) )) :named A1_227))
(assert (! (forall ((?x_3py36 Int)(?ypy35 Int)) (! (or (not (<= (+ ?x_3py36 (* (- 1) ?ypy35)) max_u4)) (not (<= min_u4 (+ ?x_3py36 (* (- 1) ?ypy35)))) (= (+ ?x_3py36 (* (- 1) ?ypy35)) (sub_unchk_u4 ?x_3py36 ?ypy35))) :pattern ((sub_unchk_u4 ?x_3py36 ?ypy35)) )) :named A1_228))
(assert (! (forall ((?x_3py37 Int)(?ypy36 Int)) (! (or (not (<= 0 ?x_3py37)) (<= 0 ?ypy36) (and (<= 0 (x ?x_3py37 ?ypy36)) (not (<= (* (- 1) ?ypy36) (x ?x_3py37 ?ypy36))))) :pattern ((x ?x_3py37 ?ypy36)) )) :named A1_229))
(assert (! (forall ((?x_3py38 Int)(?ypy37 Int)) (! (or (not (<= 0 ?x_3py38)) (<= ?ypy37 0) (and (<= 0 (x ?x_3py38 ?ypy37)) (not (<= ?ypy37 (x ?x_3py38 ?ypy37))))) :pattern ((x ?x_3py38 ?ypy37)) )) :named A1_230))
(assert (! (forall ((?x_3py39 Int)(?ypy38 Int)) (! (or (not (<= 0 ?x_3py39)) (and (<= 0 (and_1 ?x_3py39 ?ypy38)) (<= (and_1 ?x_3py39 ?ypy38) ?x_3py39))) :pattern ((and_1 ?x_3py39 ?ypy38)) )) :named A1_231))
(assert (! (forall ((?x_3py40 Int)(?ypy39 Int)) (! (or (not (<= 0 ?x_3py40)) (not (<= 0 ?ypy39)) (<= 0 (or_1 ?x_3py40 ?ypy39))) :pattern ((or_1 ?x_3py40 ?ypy39)) )) :named A1_232))
(assert (! (forall ((?x_3py41 Int)(?ypy40 Int)) (! (or (not (<= 0 ?x_3py41)) (not (<= 0 ?ypy40)) (<= 0 (xor_1 ?x_3py41 ?ypy40))) :pattern ((xor_1 ?x_3py41 ?ypy40)) )) :named A1_233))
(assert (! (forall ((?x_3py42 Int)(?ypy41 Int)) (! (or (not (<= 0 ?x_3py42)) (not (<= 0 ?ypy41)) (<= 1 ?x_3py42) (<= 1 ?ypy41) (not (<= 1 (or_1 ?x_3py42 ?ypy41)))) :pattern ((or_1 ?x_3py42 ?ypy41)) )) :named A1_234))
(assert (! (forall ((?x_3py43 Int)(?ypy42 Int)) (! (or (not (<= 0 ?x_3py43)) (not (<= 0 ?ypy42)) (<= 1 ?x_3py43) (<= 1 ?ypy42) (not (<= 1 (xor_1 ?x_3py43 ?ypy42)))) :pattern ((xor_1 ?x_3py43 ?ypy42)) )) :named A1_235))
(assert (! (forall ((?x_3py44 Int)(?ypy43 Int)) (! (or (not (<= 0 ?x_3py44)) (not (<= 0 ?ypy43)) (<= 1024 ?ypy43) (<= 1024 ?x_3py44) (not (<= 1024 (xor_1 ?x_3py44 ?ypy43)))) :pattern ((xor_1 ?x_3py44 ?ypy43)) )) :named A1_236))
(assert (! (forall ((?x_3py45 Int)(?ypy44 Int)) (! (or (not (<= 0 ?x_3py45)) (not (<= 0 ?ypy44)) (<= 1024 ?ypy44) (not (<= 1024 (or_1 ?x_3py45 ?ypy44))) (<= 1024 ?x_3py45)) :pattern ((or_1 ?x_3py45 ?ypy44)) )) :named A1_237))
(assert (! (forall ((?x_3py46 Int)(?ypy45 Int)) (! (or (not (<= 0 ?x_3py46)) (not (<= 0 ?ypy45)) (<= 1048576 ?ypy45) (<= 1048576 ?x_3py46) (not (<= 1048576 (xor_1 ?x_3py46 ?ypy45)))) :pattern ((xor_1 ?x_3py46 ?ypy45)) )) :named A1_238))
(assert (! (forall ((?x_3py47 Int)(?ypy46 Int)) (! (or (not (<= 0 ?x_3py47)) (not (<= 0 ?ypy46)) (<= 1048576 ?ypy46) (not (<= 1048576 (or_1 ?x_3py47 ?ypy46))) (<= 1048576 ?x_3py47)) :pattern ((or_1 ?x_3py47 ?ypy46)) )) :named A1_239))
(assert (! (forall ((?x_3py48 Int)(?ypy47 Int)) (! (or (not (<= 0 ?x_3py48)) (not (<= 0 ?ypy47)) (<= 1073741824 ?ypy47) (<= 1073741824 ?x_3py48) (not (<= 1073741824 (xor_1 ?x_3py48 ?ypy47)))) :pattern ((xor_1 ?x_3py48 ?ypy47)) )) :named A1_240))
(assert (! (forall ((?x_3py49 Int)(?ypy48 Int)) (! (or (not (<= 0 ?x_3py49)) (not (<= 0 ?ypy48)) (<= 1073741824 ?ypy48) (not (<= 1073741824 (or_1 ?x_3py49 ?ypy48))) (<= 1073741824 ?x_3py49)) :pattern ((or_1 ?x_3py49 ?ypy48)) )) :named A1_241))
(assert (! (forall ((?x_3py50 Int)(?ypy49 Int)) (! (or (not (<= 0 ?x_3py50)) (not (<= 0 ?ypy49)) (<= 1099511627776 ?ypy49) (<= 1099511627776 ?x_3py50) (not (<= 1099511627776 (or_1 ?x_3py50 ?ypy49)))) :pattern ((or_1 ?x_3py50 ?ypy49)) )) :named A1_242))
(assert (! (forall ((?x_3py51 Int)(?ypy50 Int)) (! (or (not (<= 0 ?x_3py51)) (not (<= 0 ?ypy50)) (<= 1099511627776 ?ypy50) (<= 1099511627776 ?x_3py51) (not (<= 1099511627776 (xor_1 ?x_3py51 ?ypy50)))) :pattern ((xor_1 ?x_3py51 ?ypy50)) )) :named A1_243))
(assert (! (forall ((?x_3py52 Int)(?ypy51 Int)) (! (or (not (<= 0 ?x_3py52)) (not (<= 0 ?ypy51)) (<= 1125899906842624 ?ypy51) (<= 1125899906842624 ?x_3py52) (not (<= 1125899906842624 (xor_1 ?x_3py52 ?ypy51)))) :pattern ((xor_1 ?x_3py52 ?ypy51)) )) :named A1_244))
(assert (! (forall ((?x_3py53 Int)(?ypy52 Int)) (! (or (not (<= 0 ?x_3py53)) (not (<= 0 ?ypy52)) (<= 1125899906842624 ?ypy52) (not (<= 1125899906842624 (or_1 ?x_3py53 ?ypy52))) (<= 1125899906842624 ?x_3py53)) :pattern ((or_1 ?x_3py53 ?ypy52)) )) :named A1_245))
(assert (! (forall ((?x_3py54 Int)(?ypy53 Int)) (! (or (not (<= 0 ?x_3py54)) (not (<= 0 ?ypy53)) (<= 1152921504606846976 ?ypy53) (<= 1152921504606846976 ?x_3py54) (not (<= 1152921504606846976 (or_1 ?x_3py54 ?ypy53)))) :pattern ((or_1 ?x_3py54 ?ypy53)) )) :named A1_246))
(assert (! (forall ((?x_3py55 Int)(?ypy54 Int)) (! (or (not (<= 0 ?x_3py55)) (not (<= 0 ?ypy54)) (<= 1152921504606846976 ?ypy54) (<= 1152921504606846976 ?x_3py55) (not (<= 1152921504606846976 (xor_1 ?x_3py55 ?ypy54)))) :pattern ((xor_1 ?x_3py55 ?ypy54)) )) :named A1_247))
(assert (! (forall ((?x_3py56 Int)(?ypy55 Int)) (! (or (not (<= 0 ?x_3py56)) (not (<= 0 ?ypy55)) (<= 128 ?ypy55) (<= 128 ?x_3py56) (not (<= 128 (xor_1 ?x_3py56 ?ypy55)))) :pattern ((xor_1 ?x_3py56 ?ypy55)) )) :named A1_248))
(assert (! (forall ((?x_3py57 Int)(?ypy56 Int)) (! (or (not (<= 0 ?x_3py57)) (not (<= 0 ?ypy56)) (<= 128 ?ypy56) (not (<= 128 (or_1 ?x_3py57 ?ypy56))) (<= 128 ?x_3py57)) :pattern ((or_1 ?x_3py57 ?ypy56)) )) :named A1_249))
(assert (! (forall ((?x_3py58 Int)(?ypy57 Int)) (! (or (not (<= 0 ?x_3py58)) (not (<= 0 ?ypy57)) (<= 131072 ?ypy57) (<= 131072 ?x_3py58) (not (<= 131072 (or_1 ?x_3py58 ?ypy57)))) :pattern ((or_1 ?x_3py58 ?ypy57)) )) :named A1_250))
(assert (! (forall ((?x_3py59 Int)(?ypy58 Int)) (! (or (not (<= 0 ?x_3py59)) (not (<= 0 ?ypy58)) (<= 131072 ?ypy58) (<= 131072 ?x_3py59) (not (<= 131072 (xor_1 ?x_3py59 ?ypy58)))) :pattern ((xor_1 ?x_3py59 ?ypy58)) )) :named A1_251))
(assert (! (forall ((?x_3py60 Int)(?ypy59 Int)) (! (or (not (<= 0 ?x_3py60)) (not (<= 0 ?ypy59)) (<= 134217728 ?ypy59) (<= 134217728 ?x_3py60) (not (<= 134217728 (xor_1 ?x_3py60 ?ypy59)))) :pattern ((xor_1 ?x_3py60 ?ypy59)) )) :named A1_252))
(assert (! (forall ((?x_3py61 Int)(?ypy60 Int)) (! (or (not (<= 0 ?x_3py61)) (not (<= 0 ?ypy60)) (<= 134217728 ?ypy60) (not (<= 134217728 (or_1 ?x_3py61 ?ypy60))) (<= 134217728 ?x_3py61)) :pattern ((or_1 ?x_3py61 ?ypy60)) )) :named A1_253))
(assert (! (forall ((?x_3py62 Int)(?ypy61 Int)) (! (or (not (<= 0 ?x_3py62)) (not (<= 0 ?ypy61)) (<= 137438953472 ?ypy61) (<= 137438953472 ?x_3py62) (not (<= 137438953472 (xor_1 ?x_3py62 ?ypy61)))) :pattern ((xor_1 ?x_3py62 ?ypy61)) )) :named A1_254))
(assert (! (forall ((?x_3py63 Int)(?ypy62 Int)) (! (or (not (<= 0 ?x_3py63)) (not (<= 0 ?ypy62)) (<= 137438953472 ?ypy62) (not (<= 137438953472 (or_1 ?x_3py63 ?ypy62))) (<= 137438953472 ?x_3py63)) :pattern ((or_1 ?x_3py63 ?ypy62)) )) :named A1_255))
(assert (! (forall ((?x_3py64 Int)(?ypy63 Int)) (! (or (not (<= 0 ?x_3py64)) (not (<= 0 ?ypy63)) (<= 140737488355328 ?ypy63) (<= 140737488355328 ?x_3py64) (not (<= 140737488355328 (or_1 ?x_3py64 ?ypy63)))) :pattern ((or_1 ?x_3py64 ?ypy63)) )) :named A1_256))
(assert (! (forall ((?x_3py65 Int)(?ypy64 Int)) (! (or (not (<= 0 ?x_3py65)) (not (<= 0 ?ypy64)) (<= 140737488355328 ?ypy64) (<= 140737488355328 ?x_3py65) (not (<= 140737488355328 (xor_1 ?x_3py65 ?ypy64)))) :pattern ((xor_1 ?x_3py65 ?ypy64)) )) :named A1_257))
(assert (! (forall ((?x_3py66 Int)(?ypy65 Int)) (! (or (not (<= 0 ?x_3py66)) (not (<= 0 ?ypy65)) (<= 144115188075855872 ?ypy65) (<= 144115188075855872 ?x_3py66) (not (<= 144115188075855872 (or_1 ?x_3py66 ?ypy65)))) :pattern ((or_1 ?x_3py66 ?ypy65)) )) :named A1_258))
(assert (! (forall ((?x_3py67 Int)(?ypy66 Int)) (! (or (not (<= 0 ?x_3py67)) (not (<= 0 ?ypy66)) (<= 144115188075855872 ?ypy66) (<= 144115188075855872 ?x_3py67) (not (<= 144115188075855872 (xor_1 ?x_3py67 ?ypy66)))) :pattern ((xor_1 ?x_3py67 ?ypy66)) )) :named A1_259))
(assert (! (forall ((?x_3py68 Int)(?ypy67 Int)) (! (or (not (<= 0 ?x_3py68)) (not (<= 0 ?ypy67)) (<= 16 ?ypy67) (<= 16 ?x_3py68) (not (<= 16 (xor_1 ?x_3py68 ?ypy67)))) :pattern ((xor_1 ?x_3py68 ?ypy67)) )) :named A1_260))
(assert (! (forall ((?x_3py69 Int)(?ypy68 Int)) (! (or (not (<= 0 ?x_3py69)) (not (<= 0 ?ypy68)) (<= 16 ?ypy68) (not (<= 16 (or_1 ?x_3py69 ?ypy68))) (<= 16 ?x_3py69)) :pattern ((or_1 ?x_3py69 ?ypy68)) )) :named A1_261))
(assert (! (forall ((?x_3py70 Int)(?ypy69 Int)) (! (or (not (<= 0 ?x_3py70)) (not (<= 0 ?ypy69)) (<= 16384 ?ypy69) (<= 16384 ?x_3py70) (not (<= 16384 (xor_1 ?x_3py70 ?ypy69)))) :pattern ((xor_1 ?x_3py70 ?ypy69)) )) :named A1_262))
(assert (! (forall ((?x_3py71 Int)(?ypy70 Int)) (! (or (not (<= 0 ?x_3py71)) (not (<= 0 ?ypy70)) (<= 16384 ?ypy70) (not (<= 16384 (or_1 ?x_3py71 ?ypy70))) (<= 16384 ?x_3py71)) :pattern ((or_1 ?x_3py71 ?ypy70)) )) :named A1_263))
(assert (! (forall ((?x_3py72 Int)(?ypy71 Int)) (! (or (not (<= 0 ?x_3py72)) (not (<= 0 ?ypy71)) (<= 16777216 ?ypy71) (<= 16777216 ?x_3py72) (not (<= 16777216 (xor_1 ?x_3py72 ?ypy71)))) :pattern ((xor_1 ?x_3py72 ?ypy71)) )) :named A1_264))
(assert (! (forall ((?x_3py73 Int)(?ypy72 Int)) (! (or (not (<= 0 ?x_3py73)) (not (<= 0 ?ypy72)) (<= 16777216 ?ypy72) (not (<= 16777216 (or_1 ?x_3py73 ?ypy72))) (<= 16777216 ?x_3py73)) :pattern ((or_1 ?x_3py73 ?ypy72)) )) :named A1_265))
(assert (! (forall ((?x_3py74 Int)(?ypy73 Int)) (! (or (not (<= 0 ?x_3py74)) (not (<= 0 ?ypy73)) (<= 17179869184 ?ypy73) (<= 17179869184 ?x_3py74) (not (<= 17179869184 (or_1 ?x_3py74 ?ypy73)))) :pattern ((or_1 ?x_3py74 ?ypy73)) )) :named A1_266))
(assert (! (forall ((?x_3py75 Int)(?ypy74 Int)) (! (or (not (<= 0 ?x_3py75)) (not (<= 0 ?ypy74)) (<= 17179869184 ?ypy74) (<= 17179869184 ?x_3py75) (not (<= 17179869184 (xor_1 ?x_3py75 ?ypy74)))) :pattern ((xor_1 ?x_3py75 ?ypy74)) )) :named A1_267))
(assert (! (forall ((?x_3py76 Int)(?ypy75 Int)) (! (or (not (<= 0 ?x_3py76)) (not (<= 0 ?ypy75)) (<= 17592186044416 ?ypy75) (<= 17592186044416 ?x_3py76) (not (<= 17592186044416 (xor_1 ?x_3py76 ?ypy75)))) :pattern ((xor_1 ?x_3py76 ?ypy75)) )) :named A1_268))
(assert (! (forall ((?x_3py77 Int)(?ypy76 Int)) (! (or (not (<= 0 ?x_3py77)) (not (<= 0 ?ypy76)) (<= 17592186044416 ?ypy76) (not (<= 17592186044416 (or_1 ?x_3py77 ?ypy76))) (<= 17592186044416 ?x_3py77)) :pattern ((or_1 ?x_3py77 ?ypy76)) )) :named A1_269))
(assert (! (forall ((?x_3py78 Int)(?ypy77 Int)) (! (or (not (<= 0 ?x_3py78)) (not (<= 0 ?ypy77)) (<= 18014398509481984 ?ypy77) (<= 18014398509481984 ?x_3py78) (not (<= 18014398509481984 (xor_1 ?x_3py78 ?ypy77)))) :pattern ((xor_1 ?x_3py78 ?ypy77)) )) :named A1_270))
(assert (! (forall ((?x_3py79 Int)(?ypy78 Int)) (! (or (not (<= 0 ?x_3py79)) (not (<= 0 ?ypy78)) (<= 18014398509481984 ?ypy78) (not (<= 18014398509481984 (or_1 ?x_3py79 ?ypy78))) (<= 18014398509481984 ?x_3py79)) :pattern ((or_1 ?x_3py79 ?ypy78)) )) :named A1_271))
(assert (! (forall ((?x_3py80 Int)(?ypy79 Int)) (! (or (not (<= 0 ?x_3py80)) (not (<= 0 ?ypy79)) (<= 2 ?ypy79) (<= 2 ?x_3py80) (not (<= 2 (xor_1 ?x_3py80 ?ypy79)))) :pattern ((xor_1 ?x_3py80 ?ypy79)) )) :named A1_272))
(assert (! (forall ((?x_3py81 Int)(?ypy80 Int)) (! (or (not (<= 0 ?x_3py81)) (not (<= 0 ?ypy80)) (<= 2 ?ypy80) (not (<= 2 (or_1 ?x_3py81 ?ypy80))) (<= 2 ?x_3py81)) :pattern ((or_1 ?x_3py81 ?ypy80)) )) :named A1_273))
(assert (! (forall ((?x_3py82 Int)(?ypy81 Int)) (! (or (not (<= 0 ?x_3py82)) (not (<= 0 ?ypy81)) (<= 2048 ?ypy81) (<= 2048 ?x_3py82) (not (<= 2048 (xor_1 ?x_3py82 ?ypy81)))) :pattern ((xor_1 ?x_3py82 ?ypy81)) )) :named A1_274))
(assert (! (forall ((?x_3py83 Int)(?ypy82 Int)) (! (or (not (<= 0 ?x_3py83)) (not (<= 0 ?ypy82)) (<= 2048 ?ypy82) (not (<= 2048 (or_1 ?x_3py83 ?ypy82))) (<= 2048 ?x_3py83)) :pattern ((or_1 ?x_3py83 ?ypy82)) )) :named A1_275))
(assert (! (forall ((?x_3py84 Int)(?ypy83 Int)) (! (or (not (<= 0 ?x_3py84)) (not (<= 0 ?ypy83)) (<= 2097152 ?ypy83) (<= 2097152 ?x_3py84) (not (<= 2097152 (xor_1 ?x_3py84 ?ypy83)))) :pattern ((xor_1 ?x_3py84 ?ypy83)) )) :named A1_276))
(assert (! (forall ((?x_3py85 Int)(?ypy84 Int)) (! (or (not (<= 0 ?x_3py85)) (not (<= 0 ?ypy84)) (<= 2097152 ?ypy84) (not (<= 2097152 (or_1 ?x_3py85 ?ypy84))) (<= 2097152 ?x_3py85)) :pattern ((or_1 ?x_3py85 ?ypy84)) )) :named A1_277))
(assert (! (forall ((?x_3py86 Int)(?ypy85 Int)) (! (or (not (<= 0 ?x_3py86)) (not (<= 0 ?ypy85)) (<= 2147483648 ?ypy85) (<= 2147483648 ?x_3py86) (not (<= 2147483648 (xor_1 ?x_3py86 ?ypy85)))) :pattern ((xor_1 ?x_3py86 ?ypy85)) )) :named A1_278))
(assert (! (forall ((?x_3py87 Int)(?ypy86 Int)) (! (or (not (<= 0 ?x_3py87)) (not (<= 0 ?ypy86)) (<= 2147483648 ?ypy86) (not (<= 2147483648 (or_1 ?x_3py87 ?ypy86))) (<= 2147483648 ?x_3py87)) :pattern ((or_1 ?x_3py87 ?ypy86)) )) :named A1_279))
(assert (! (forall ((?x_3py88 Int)(?ypy87 Int)) (! (or (not (<= 0 ?x_3py88)) (not (<= 0 ?ypy87)) (<= 2199023255552 ?ypy87) (<= 2199023255552 ?x_3py88) (not (<= 2199023255552 (or_1 ?x_3py88 ?ypy87)))) :pattern ((or_1 ?x_3py88 ?ypy87)) )) :named A1_280))
(assert (! (forall ((?x_3py89 Int)(?ypy88 Int)) (! (or (not (<= 0 ?x_3py89)) (not (<= 0 ?ypy88)) (<= 2199023255552 ?ypy88) (<= 2199023255552 ?x_3py89) (not (<= 2199023255552 (xor_1 ?x_3py89 ?ypy88)))) :pattern ((xor_1 ?x_3py89 ?ypy88)) )) :named A1_281))
(assert (! (forall ((?x_3py90 Int)(?ypy89 Int)) (! (or (not (<= 0 ?x_3py90)) (not (<= 0 ?ypy89)) (<= 2251799813685248 ?ypy89) (<= 2251799813685248 ?x_3py90) (not (<= 2251799813685248 (xor_1 ?x_3py90 ?ypy89)))) :pattern ((xor_1 ?x_3py90 ?ypy89)) )) :named A1_282))
(assert (! (forall ((?x_3py91 Int)(?ypy90 Int)) (! (or (not (<= 0 ?x_3py91)) (not (<= 0 ?ypy90)) (<= 2251799813685248 ?ypy90) (not (<= 2251799813685248 (or_1 ?x_3py91 ?ypy90))) (<= 2251799813685248 ?x_3py91)) :pattern ((or_1 ?x_3py91 ?ypy90)) )) :named A1_283))
(assert (! (forall ((?x_3py92 Int)(?ypy91 Int)) (! (or (not (<= 0 ?x_3py92)) (not (<= 0 ?ypy91)) (<= 2305843009213693952 ?ypy91) (<= 2305843009213693952 ?x_3py92) (not (<= 2305843009213693952 (or_1 ?x_3py92 ?ypy91)))) :pattern ((or_1 ?x_3py92 ?ypy91)) )) :named A1_284))
(assert (! (forall ((?x_3py93 Int)(?ypy92 Int)) (! (or (not (<= 0 ?x_3py93)) (not (<= 0 ?ypy92)) (<= 2305843009213693952 ?ypy92) (<= 2305843009213693952 ?x_3py93) (not (<= 2305843009213693952 (xor_1 ?x_3py93 ?ypy92)))) :pattern ((xor_1 ?x_3py93 ?ypy92)) )) :named A1_285))
(assert (! (forall ((?x_3py94 Int)(?ypy93 Int)) (! (or (not (<= 0 ?x_3py94)) (not (<= 0 ?ypy93)) (<= 256 ?x_3py94) (<= 256 ?ypy93) (not (<= 256 (xor_1 ?x_3py94 ?ypy93)))) :pattern ((xor_1 ?x_3py94 ?ypy93)) )) :named A1_286))
(assert (! (forall ((?x_3py95 Int)(?ypy94 Int)) (! (or (not (<= 0 ?x_3py95)) (not (<= 0 ?ypy94)) (<= 256 ?x_3py95) (not (<= 256 (or_1 ?x_3py95 ?ypy94))) (<= 256 ?ypy94)) :pattern ((or_1 ?x_3py95 ?ypy94)) )) :named A1_287))
(assert (! (forall ((?x_3py96 Int)(?ypy95 Int)) (! (or (not (<= 0 ?x_3py96)) (not (<= 0 ?ypy95)) (<= 262144 ?ypy95) (<= 262144 ?x_3py96) (not (<= 262144 (xor_1 ?x_3py96 ?ypy95)))) :pattern ((xor_1 ?x_3py96 ?ypy95)) )) :named A1_288))
(assert (! (forall ((?x_3py97 Int)(?ypy96 Int)) (! (or (not (<= 0 ?x_3py97)) (not (<= 0 ?ypy96)) (<= 262144 ?ypy96) (not (<= 262144 (or_1 ?x_3py97 ?ypy96))) (<= 262144 ?x_3py97)) :pattern ((or_1 ?x_3py97 ?ypy96)) )) :named A1_289))
(assert (! (forall ((?x_3py98 Int)(?ypy97 Int)) (! (or (not (<= 0 ?x_3py98)) (not (<= 0 ?ypy97)) (<= 268435456 ?ypy97) (<= 268435456 ?x_3py98) (not (<= 268435456 (xor_1 ?x_3py98 ?ypy97)))) :pattern ((xor_1 ?x_3py98 ?ypy97)) )) :named A1_290))
(assert (! (forall ((?x_3py99 Int)(?ypy98 Int)) (! (or (not (<= 0 ?x_3py99)) (not (<= 0 ?ypy98)) (<= 268435456 ?ypy98) (not (<= 268435456 (or_1 ?x_3py99 ?ypy98))) (<= 268435456 ?x_3py99)) :pattern ((or_1 ?x_3py99 ?ypy98)) )) :named A1_291))
(assert (! (forall ((?x_3py100 Int)(?ypy99 Int)) (! (or (not (<= 0 ?x_3py100)) (not (<= 0 ?ypy99)) (<= 274877906944 ?ypy99) (<= 274877906944 ?x_3py100) (not (<= 274877906944 (xor_1 ?x_3py100 ?ypy99)))) :pattern ((xor_1 ?x_3py100 ?ypy99)) )) :named A1_292))
(assert (! (forall ((?x_3py101 Int)(?ypy100 Int)) (! (or (not (<= 0 ?x_3py101)) (not (<= 0 ?ypy100)) (<= 274877906944 ?ypy100) (not (<= 274877906944 (or_1 ?x_3py101 ?ypy100))) (<= 274877906944 ?x_3py101)) :pattern ((or_1 ?x_3py101 ?ypy100)) )) :named A1_293))
(assert (! (forall ((?x_3py102 Int)(?ypy101 Int)) (! (or (not (<= 0 ?x_3py102)) (not (<= 0 ?ypy101)) (<= 281474976710656 ?ypy101) (<= 281474976710656 ?x_3py102) (not (<= 281474976710656 (xor_1 ?x_3py102 ?ypy101)))) :pattern ((xor_1 ?x_3py102 ?ypy101)) )) :named A1_294))
(assert (! (forall ((?x_3py103 Int)(?ypy102 Int)) (! (or (not (<= 0 ?x_3py103)) (not (<= 0 ?ypy102)) (<= 281474976710656 ?ypy102) (not (<= 281474976710656 (or_1 ?x_3py103 ?ypy102))) (<= 281474976710656 ?x_3py103)) :pattern ((or_1 ?x_3py103 ?ypy102)) )) :named A1_295))
(assert (! (forall ((?x_3py104 Int)(?ypy103 Int)) (! (or (not (<= 0 ?x_3py104)) (not (<= 0 ?ypy103)) (<= 288230376151711744 ?ypy103) (<= 288230376151711744 ?x_3py104) (not (<= 288230376151711744 (or_1 ?x_3py104 ?ypy103)))) :pattern ((or_1 ?x_3py104 ?ypy103)) )) :named A1_296))
(assert (! (forall ((?x_3py105 Int)(?ypy104 Int)) (! (or (not (<= 0 ?x_3py105)) (not (<= 0 ?ypy104)) (<= 288230376151711744 ?ypy104) (<= 288230376151711744 ?x_3py105) (not (<= 288230376151711744 (xor_1 ?x_3py105 ?ypy104)))) :pattern ((xor_1 ?x_3py105 ?ypy104)) )) :named A1_297))
(assert (! (forall ((?x_3py106 Int)(?ypy105 Int)) (! (or (not (<= 0 ?x_3py106)) (not (<= 0 ?ypy105)) (<= 32 ?ypy105) (<= 32 ?x_3py106) (not (<= 32 (xor_1 ?x_3py106 ?ypy105)))) :pattern ((xor_1 ?x_3py106 ?ypy105)) )) :named A1_298))
(assert (! (forall ((?x_3py107 Int)(?ypy106 Int)) (! (or (not (<= 0 ?x_3py107)) (not (<= 0 ?ypy106)) (<= 32 ?ypy106) (not (<= 32 (or_1 ?x_3py107 ?ypy106))) (<= 32 ?x_3py107)) :pattern ((or_1 ?x_3py107 ?ypy106)) )) :named A1_299))
(assert (! (forall ((?x_3py108 Int)(?ypy107 Int)) (! (or (not (<= 0 ?x_3py108)) (not (<= 0 ?ypy107)) (<= 32768 ?ypy107) (<= 32768 ?x_3py108) (not (<= 32768 (xor_1 ?x_3py108 ?ypy107)))) :pattern ((xor_1 ?x_3py108 ?ypy107)) )) :named A1_300))
(assert (! (forall ((?x_3py109 Int)(?ypy108 Int)) (! (or (not (<= 0 ?x_3py109)) (not (<= 0 ?ypy108)) (<= 32768 ?ypy108) (not (<= 32768 (or_1 ?x_3py109 ?ypy108))) (<= 32768 ?x_3py109)) :pattern ((or_1 ?x_3py109 ?ypy108)) )) :named A1_301))
(assert (! (forall ((?x_3py110 Int)(?ypy109 Int)) (! (or (not (<= 0 ?x_3py110)) (not (<= 0 ?ypy109)) (<= 33554432 ?ypy109) (<= 33554432 ?x_3py110) (not (<= 33554432 (xor_1 ?x_3py110 ?ypy109)))) :pattern ((xor_1 ?x_3py110 ?ypy109)) )) :named A1_302))
(assert (! (forall ((?x_3py111 Int)(?ypy110 Int)) (! (or (not (<= 0 ?x_3py111)) (not (<= 0 ?ypy110)) (<= 33554432 ?ypy110) (not (<= 33554432 (or_1 ?x_3py111 ?ypy110))) (<= 33554432 ?x_3py111)) :pattern ((or_1 ?x_3py111 ?ypy110)) )) :named A1_303))
(assert (! (forall ((?x_3py112 Int)(?ypy111 Int)) (! (or (not (<= 0 ?x_3py112)) (not (<= 0 ?ypy111)) (<= 34359738368 ?ypy111) (<= 34359738368 ?x_3py112) (not (<= 34359738368 (xor_1 ?x_3py112 ?ypy111)))) :pattern ((xor_1 ?x_3py112 ?ypy111)) )) :named A1_304))
(assert (! (forall ((?x_3py113 Int)(?ypy112 Int)) (! (or (not (<= 0 ?x_3py113)) (not (<= 0 ?ypy112)) (<= 34359738368 ?ypy112) (not (<= 34359738368 (or_1 ?x_3py113 ?ypy112))) (<= 34359738368 ?x_3py113)) :pattern ((or_1 ?x_3py113 ?ypy112)) )) :named A1_305))
(assert (! (forall ((?x_3py114 Int)(?ypy113 Int)) (! (or (not (<= 0 ?x_3py114)) (not (<= 0 ?ypy113)) (<= 35184372088832 ?ypy113) (<= 35184372088832 ?x_3py114) (not (<= 35184372088832 (or_1 ?x_3py114 ?ypy113)))) :pattern ((or_1 ?x_3py114 ?ypy113)) )) :named A1_306))
(assert (! (forall ((?x_3py115 Int)(?ypy114 Int)) (! (or (not (<= 0 ?x_3py115)) (not (<= 0 ?ypy114)) (<= 35184372088832 ?ypy114) (<= 35184372088832 ?x_3py115) (not (<= 35184372088832 (xor_1 ?x_3py115 ?ypy114)))) :pattern ((xor_1 ?x_3py115 ?ypy114)) )) :named A1_307))
(assert (! (forall ((?x_3py116 Int)(?ypy115 Int)) (! (or (not (<= 0 ?x_3py116)) (not (<= 0 ?ypy115)) (<= 36028797018963968 ?ypy115) (<= 36028797018963968 ?x_3py116) (not (<= 36028797018963968 (xor_1 ?x_3py116 ?ypy115)))) :pattern ((xor_1 ?x_3py116 ?ypy115)) )) :named A1_308))
(assert (! (forall ((?x_3py117 Int)(?ypy116 Int)) (! (or (not (<= 0 ?x_3py117)) (not (<= 0 ?ypy116)) (<= 36028797018963968 ?ypy116) (not (<= 36028797018963968 (or_1 ?x_3py117 ?ypy116))) (<= 36028797018963968 ?x_3py117)) :pattern ((or_1 ?x_3py117 ?ypy116)) )) :named A1_309))
(assert (! (forall ((?x_3py118 Int)(?ypy117 Int)) (! (or (not (<= 0 ?x_3py118)) (not (<= 0 ?ypy117)) (<= 4 ?ypy117) (<= 4 ?x_3py118) (not (<= 4 (xor_1 ?x_3py118 ?ypy117)))) :pattern ((xor_1 ?x_3py118 ?ypy117)) )) :named A1_310))
(assert (! (forall ((?x_3py119 Int)(?ypy118 Int)) (! (or (not (<= 0 ?x_3py119)) (not (<= 0 ?ypy118)) (<= 4 ?ypy118) (not (<= 4 (or_1 ?x_3py119 ?ypy118))) (<= 4 ?x_3py119)) :pattern ((or_1 ?x_3py119 ?ypy118)) )) :named A1_311))
(assert (! (forall ((?x_3py120 Int)(?ypy119 Int)) (! (or (not (<= 0 ?x_3py120)) (not (<= 0 ?ypy119)) (<= 4096 ?ypy119) (<= 4096 ?x_3py120) (not (<= 4096 (or_1 ?x_3py120 ?ypy119)))) :pattern ((or_1 ?x_3py120 ?ypy119)) )) :named A1_312))
(assert (! (forall ((?x_3py121 Int)(?ypy120 Int)) (! (or (not (<= 0 ?x_3py121)) (not (<= 0 ?ypy120)) (<= 4096 ?ypy120) (<= 4096 ?x_3py121) (not (<= 4096 (xor_1 ?x_3py121 ?ypy120)))) :pattern ((xor_1 ?x_3py121 ?ypy120)) )) :named A1_313))
(assert (! (forall ((?x_3py122 Int)(?ypy121 Int)) (! (or (not (<= 0 ?x_3py122)) (not (<= 0 ?ypy121)) (<= 4194304 ?ypy121) (<= 4194304 ?x_3py122) (not (<= 4194304 (or_1 ?x_3py122 ?ypy121)))) :pattern ((or_1 ?x_3py122 ?ypy121)) )) :named A1_314))
(assert (! (forall ((?x_3py123 Int)(?ypy122 Int)) (! (or (not (<= 0 ?x_3py123)) (not (<= 0 ?ypy122)) (<= 4194304 ?ypy122) (<= 4194304 ?x_3py123) (not (<= 4194304 (xor_1 ?x_3py123 ?ypy122)))) :pattern ((xor_1 ?x_3py123 ?ypy122)) )) :named A1_315))
(assert (! (forall ((?x_3py124 Int)(?ypy123 Int)) (! (or (not (<= 0 ?x_3py124)) (not (<= 0 ?ypy123)) (<= 4294967296 ?x_3py124) (<= 4294967296 ?ypy123) (not (<= 4294967296 (xor_1 ?x_3py124 ?ypy123)))) :pattern ((xor_1 ?x_3py124 ?ypy123)) )) :named A1_316))
(assert (! (forall ((?x_3py125 Int)(?ypy124 Int)) (! (or (not (<= 0 ?x_3py125)) (not (<= 0 ?ypy124)) (<= 4294967296 ?x_3py125) (not (<= 4294967296 (or_1 ?x_3py125 ?ypy124))) (<= 4294967296 ?ypy124)) :pattern ((or_1 ?x_3py125 ?ypy124)) )) :named A1_317))
(assert (! (forall ((?x_3py126 Int)(?ypy125 Int)) (! (or (not (<= 0 ?x_3py126)) (not (<= 0 ?ypy125)) (<= 4398046511104 ?ypy125) (<= 4398046511104 ?x_3py126) (not (<= 4398046511104 (xor_1 ?x_3py126 ?ypy125)))) :pattern ((xor_1 ?x_3py126 ?ypy125)) )) :named A1_318))
(assert (! (forall ((?x_3py127 Int)(?ypy126 Int)) (! (or (not (<= 0 ?x_3py127)) (not (<= 0 ?ypy126)) (<= 4398046511104 ?ypy126) (not (<= 4398046511104 (or_1 ?x_3py127 ?ypy126))) (<= 4398046511104 ?x_3py127)) :pattern ((or_1 ?x_3py127 ?ypy126)) )) :named A1_319))
(assert (! (forall ((?x_3py128 Int)(?ypy127 Int)) (! (or (not (<= 0 ?x_3py128)) (not (<= 0 ?ypy127)) (<= 4503599627370496 ?ypy127) (<= 4503599627370496 ?x_3py128) (not (<= 4503599627370496 (or_1 ?x_3py128 ?ypy127)))) :pattern ((or_1 ?x_3py128 ?ypy127)) )) :named A1_320))
(assert (! (forall ((?x_3py129 Int)(?ypy128 Int)) (! (or (not (<= 0 ?x_3py129)) (not (<= 0 ?ypy128)) (<= 4503599627370496 ?ypy128) (<= 4503599627370496 ?x_3py129) (not (<= 4503599627370496 (xor_1 ?x_3py129 ?ypy128)))) :pattern ((xor_1 ?x_3py129 ?ypy128)) )) :named A1_321))
(assert (! (forall ((?x_3py130 Int)(?ypy129 Int)) (! (or (not (<= 0 ?x_3py130)) (not (<= 0 ?ypy129)) (<= 4611686018427387904 ?ypy129) (<= 4611686018427387904 ?x_3py130) (not (<= 4611686018427387904 (or_1 ?x_3py130 ?ypy129)))) :pattern ((or_1 ?x_3py130 ?ypy129)) )) :named A1_322))
(assert (! (forall ((?x_3py131 Int)(?ypy130 Int)) (! (or (not (<= 0 ?x_3py131)) (not (<= 0 ?ypy130)) (<= 4611686018427387904 ?ypy130) (<= 4611686018427387904 ?x_3py131) (not (<= 4611686018427387904 (xor_1 ?x_3py131 ?ypy130)))) :pattern ((xor_1 ?x_3py131 ?ypy130)) )) :named A1_323))
(assert (! (forall ((?x_3py132 Int)(?ypy131 Int)) (! (or (not (<= 0 ?x_3py132)) (not (<= 0 ?ypy131)) (<= 512 ?ypy131) (<= 512 ?x_3py132) (not (<= 512 (xor_1 ?x_3py132 ?ypy131)))) :pattern ((xor_1 ?x_3py132 ?ypy131)) )) :named A1_324))
(assert (! (forall ((?x_3py133 Int)(?ypy132 Int)) (! (or (not (<= 0 ?x_3py133)) (not (<= 0 ?ypy132)) (<= 512 ?ypy132) (not (<= 512 (or_1 ?x_3py133 ?ypy132))) (<= 512 ?x_3py133)) :pattern ((or_1 ?x_3py133 ?ypy132)) )) :named A1_325))
(assert (! (forall ((?x_3py134 Int)(?ypy133 Int)) (! (or (not (<= 0 ?x_3py134)) (not (<= 0 ?ypy133)) (<= 524288 ?ypy133) (<= 524288 ?x_3py134) (not (<= 524288 (or_1 ?x_3py134 ?ypy133)))) :pattern ((or_1 ?x_3py134 ?ypy133)) )) :named A1_326))
(assert (! (forall ((?x_3py135 Int)(?ypy134 Int)) (! (or (not (<= 0 ?x_3py135)) (not (<= 0 ?ypy134)) (<= 524288 ?ypy134) (<= 524288 ?x_3py135) (not (<= 524288 (xor_1 ?x_3py135 ?ypy134)))) :pattern ((xor_1 ?x_3py135 ?ypy134)) )) :named A1_327))
(assert (! (forall ((?x_3py136 Int)(?ypy135 Int)) (! (or (not (<= 0 ?x_3py136)) (not (<= 0 ?ypy135)) (<= 536870912 ?ypy135) (<= 536870912 ?x_3py136) (not (<= 536870912 (xor_1 ?x_3py136 ?ypy135)))) :pattern ((xor_1 ?x_3py136 ?ypy135)) )) :named A1_328))
(assert (! (forall ((?x_3py137 Int)(?ypy136 Int)) (! (or (not (<= 0 ?x_3py137)) (not (<= 0 ?ypy136)) (<= 536870912 ?ypy136) (not (<= 536870912 (or_1 ?x_3py137 ?ypy136))) (<= 536870912 ?x_3py137)) :pattern ((or_1 ?x_3py137 ?ypy136)) )) :named A1_329))
(assert (! (forall ((?x_3py138 Int)(?ypy137 Int)) (! (or (not (<= 0 ?x_3py138)) (not (<= 0 ?ypy137)) (<= 549755813888 ?ypy137) (<= 549755813888 ?x_3py138) (not (<= 549755813888 (or_1 ?x_3py138 ?ypy137)))) :pattern ((or_1 ?x_3py138 ?ypy137)) )) :named A1_330))
(assert (! (forall ((?x_3py139 Int)(?ypy138 Int)) (! (or (not (<= 0 ?x_3py139)) (not (<= 0 ?ypy138)) (<= 549755813888 ?ypy138) (<= 549755813888 ?x_3py139) (not (<= 549755813888 (xor_1 ?x_3py139 ?ypy138)))) :pattern ((xor_1 ?x_3py139 ?ypy138)) )) :named A1_331))
(assert (! (forall ((?x_3py140 Int)(?ypy139 Int)) (! (or (not (<= 0 ?x_3py140)) (not (<= 0 ?ypy139)) (<= 562949953421312 ?ypy139) (<= 562949953421312 ?x_3py140) (not (<= 562949953421312 (xor_1 ?x_3py140 ?ypy139)))) :pattern ((xor_1 ?x_3py140 ?ypy139)) )) :named A1_332))
(assert (! (forall ((?x_3py141 Int)(?ypy140 Int)) (! (or (not (<= 0 ?x_3py141)) (not (<= 0 ?ypy140)) (<= 562949953421312 ?ypy140) (not (<= 562949953421312 (or_1 ?x_3py141 ?ypy140))) (<= 562949953421312 ?x_3py141)) :pattern ((or_1 ?x_3py141 ?ypy140)) )) :named A1_333))
(assert (! (forall ((?x_3py142 Int)(?ypy141 Int)) (! (or (not (<= 0 ?x_3py142)) (not (<= 0 ?ypy141)) (<= 576460752303423488 ?ypy141) (<= 576460752303423488 ?x_3py142) (not (<= 576460752303423488 (or_1 ?x_3py142 ?ypy141)))) :pattern ((or_1 ?x_3py142 ?ypy141)) )) :named A1_334))
(assert (! (forall ((?x_3py143 Int)(?ypy142 Int)) (! (or (not (<= 0 ?x_3py143)) (not (<= 0 ?ypy142)) (<= 576460752303423488 ?ypy142) (<= 576460752303423488 ?x_3py143) (not (<= 576460752303423488 (xor_1 ?x_3py143 ?ypy142)))) :pattern ((xor_1 ?x_3py143 ?ypy142)) )) :named A1_335))
(assert (! (forall ((?x_3py144 Int)(?ypy143 Int)) (! (or (not (<= 0 ?x_3py144)) (not (<= 0 ?ypy143)) (<= 64 ?ypy143) (<= 64 ?x_3py144) (not (<= 64 (or_1 ?x_3py144 ?ypy143)))) :pattern ((or_1 ?x_3py144 ?ypy143)) )) :named A1_336))
(assert (! (forall ((?x_3py145 Int)(?ypy144 Int)) (! (or (not (<= 0 ?x_3py145)) (not (<= 0 ?ypy144)) (<= 64 ?ypy144) (<= 64 ?x_3py145) (not (<= 64 (xor_1 ?x_3py145 ?ypy144)))) :pattern ((xor_1 ?x_3py145 ?ypy144)) )) :named A1_337))
(assert (! (forall ((?x_3py146 Int)(?ypy145 Int)) (! (or (not (<= 0 ?x_3py146)) (not (<= 0 ?ypy145)) (<= 65536 ?x_3py146) (<= 65536 ?ypy145) (not (<= 65536 (xor_1 ?x_3py146 ?ypy145)))) :pattern ((xor_1 ?x_3py146 ?ypy145)) )) :named A1_338))
(assert (! (forall ((?x_3py147 Int)(?ypy146 Int)) (! (or (not (<= 0 ?x_3py147)) (not (<= 0 ?ypy146)) (<= 67108864 ?ypy146) (<= 67108864 ?x_3py147) (not (<= 67108864 (or_1 ?x_3py147 ?ypy146)))) :pattern ((or_1 ?x_3py147 ?ypy146)) )) :named A1_339))
(assert (! (forall ((?x_3py148 Int)(?ypy147 Int)) (! (or (not (<= 0 ?x_3py148)) (not (<= 0 ?ypy147)) (<= 67108864 ?ypy147) (<= 67108864 ?x_3py148) (not (<= 67108864 (xor_1 ?x_3py148 ?ypy147)))) :pattern ((xor_1 ?x_3py148 ?ypy147)) )) :named A1_340))
(assert (! (forall ((?x_3py149 Int)(?ypy148 Int)) (! (or (not (<= 0 ?x_3py149)) (not (<= 0 ?ypy148)) (<= 68719476736 ?ypy148) (<= 68719476736 ?x_3py149) (not (<= 68719476736 (or_1 ?x_3py149 ?ypy148)))) :pattern ((or_1 ?x_3py149 ?ypy148)) )) :named A1_341))
(assert (! (forall ((?x_3py150 Int)(?ypy149 Int)) (! (or (not (<= 0 ?x_3py150)) (not (<= 0 ?ypy149)) (<= 68719476736 ?ypy149) (<= 68719476736 ?x_3py150) (not (<= 68719476736 (xor_1 ?x_3py150 ?ypy149)))) :pattern ((xor_1 ?x_3py150 ?ypy149)) )) :named A1_342))
(assert (! (forall ((?x_3py151 Int)(?ypy150 Int)) (! (or (not (<= 0 ?x_3py151)) (not (<= 0 ?ypy150)) (<= 70368744177664 ?ypy150) (<= 70368744177664 ?x_3py151) (not (<= 70368744177664 (xor_1 ?x_3py151 ?ypy150)))) :pattern ((xor_1 ?x_3py151 ?ypy150)) )) :named A1_343))
(assert (! (forall ((?x_3py152 Int)(?ypy151 Int)) (! (or (not (<= 0 ?x_3py152)) (not (<= 0 ?ypy151)) (<= 70368744177664 ?ypy151) (not (<= 70368744177664 (or_1 ?x_3py152 ?ypy151))) (<= 70368744177664 ?x_3py152)) :pattern ((or_1 ?x_3py152 ?ypy151)) )) :named A1_344))
(assert (! (forall ((?x_3py153 Int)(?ypy152 Int)) (! (or (not (<= 0 ?x_3py153)) (not (<= 0 ?ypy152)) (<= 72057594037927936 ?ypy152) (<= 72057594037927936 ?x_3py153) (not (<= 72057594037927936 (xor_1 ?x_3py153 ?ypy152)))) :pattern ((xor_1 ?x_3py153 ?ypy152)) )) :named A1_345))
(assert (! (forall ((?x_3py154 Int)(?ypy153 Int)) (! (or (not (<= 0 ?x_3py154)) (not (<= 0 ?ypy153)) (<= 72057594037927936 ?ypy153) (not (<= 72057594037927936 (or_1 ?x_3py154 ?ypy153))) (<= 72057594037927936 ?x_3py154)) :pattern ((or_1 ?x_3py154 ?ypy153)) )) :named A1_346))
(assert (! (forall ((?x_3py155 Int)(?ypy154 Int)) (! (or (not (<= 0 ?x_3py155)) (not (<= 0 ?ypy154)) (<= 8 ?ypy154) (<= 8 ?x_3py155) (not (<= 8 (xor_1 ?x_3py155 ?ypy154)))) :pattern ((xor_1 ?x_3py155 ?ypy154)) )) :named A1_347))
(assert (! (forall ((?x_3py156 Int)(?ypy155 Int)) (! (or (not (<= 0 ?x_3py156)) (not (<= 0 ?ypy155)) (<= 8 ?ypy155) (not (<= 8 (or_1 ?x_3py156 ?ypy155))) (<= 8 ?x_3py156)) :pattern ((or_1 ?x_3py156 ?ypy155)) )) :named A1_348))
(assert (! (forall ((?x_3py157 Int)(?ypy156 Int)) (! (or (not (<= 0 ?x_3py157)) (not (<= 0 ?ypy156)) (<= 8192 ?ypy156) (<= 8192 ?x_3py157) (not (<= 8192 (xor_1 ?x_3py157 ?ypy156)))) :pattern ((xor_1 ?x_3py157 ?ypy156)) )) :named A1_349))
(assert (! (forall ((?x_3py158 Int)(?ypy157 Int)) (! (or (not (<= 0 ?x_3py158)) (not (<= 0 ?ypy157)) (<= 8192 ?ypy157) (not (<= 8192 (or_1 ?x_3py158 ?ypy157))) (<= 8192 ?x_3py158)) :pattern ((or_1 ?x_3py158 ?ypy157)) )) :named A1_350))
(assert (! (forall ((?x_3py159 Int)(?ypy158 Int)) (! (or (not (<= 0 ?x_3py159)) (not (<= 0 ?ypy158)) (<= 8388608 ?ypy158) (<= 8388608 ?x_3py159) (not (<= 8388608 (or_1 ?x_3py159 ?ypy158)))) :pattern ((or_1 ?x_3py159 ?ypy158)) )) :named A1_351))
(assert (! (forall ((?x_3py160 Int)(?ypy159 Int)) (! (or (not (<= 0 ?x_3py160)) (not (<= 0 ?ypy159)) (<= 8388608 ?ypy159) (<= 8388608 ?x_3py160) (not (<= 8388608 (xor_1 ?x_3py160 ?ypy159)))) :pattern ((xor_1 ?x_3py160 ?ypy159)) )) :named A1_352))
(assert (! (forall ((?x_3py161 Int)(?ypy160 Int)) (! (or (not (<= 0 ?x_3py161)) (not (<= 0 ?ypy160)) (<= 8589934592 ?ypy160) (<= 8589934592 ?x_3py161) (not (<= 8589934592 (xor_1 ?x_3py161 ?ypy160)))) :pattern ((xor_1 ?x_3py161 ?ypy160)) )) :named A1_353))
(assert (! (forall ((?x_3py162 Int)(?ypy161 Int)) (! (or (not (<= 0 ?x_3py162)) (not (<= 0 ?ypy161)) (<= 8589934592 ?ypy161) (not (<= 8589934592 (or_1 ?x_3py162 ?ypy161))) (<= 8589934592 ?x_3py162)) :pattern ((or_1 ?x_3py162 ?ypy161)) )) :named A1_354))
(assert (! (forall ((?x_3py163 Int)(?ypy162 Int)) (! (or (not (<= 0 ?x_3py163)) (not (<= 0 ?ypy162)) (<= 8796093022208 ?ypy162) (<= 8796093022208 ?x_3py163) (not (<= 8796093022208 (or_1 ?x_3py163 ?ypy162)))) :pattern ((or_1 ?x_3py163 ?ypy162)) )) :named A1_355))
(assert (! (forall ((?x_3py164 Int)(?ypy163 Int)) (! (or (not (<= 0 ?x_3py164)) (not (<= 0 ?ypy163)) (<= 8796093022208 ?ypy163) (<= 8796093022208 ?x_3py164) (not (<= 8796093022208 (xor_1 ?x_3py164 ?ypy163)))) :pattern ((xor_1 ?x_3py164 ?ypy163)) )) :named A1_356))
(assert (! (forall ((?x_3py165 Int)(?ypy164 Int)) (! (or (not (<= 0 ?x_3py165)) (not (<= 0 ?ypy164)) (<= 9007199254740992 ?ypy164) (<= 9007199254740992 ?x_3py165) (not (<= 9007199254740992 (xor_1 ?x_3py165 ?ypy164)))) :pattern ((xor_1 ?x_3py165 ?ypy164)) )) :named A1_357))
(assert (! (forall ((?x_3py166 Int)(?ypy165 Int)) (! (or (not (<= 0 ?x_3py166)) (not (<= 0 ?ypy165)) (<= 9007199254740992 ?ypy165) (not (<= 9007199254740992 (or_1 ?x_3py166 ?ypy165))) (<= 9007199254740992 ?x_3py166)) :pattern ((or_1 ?x_3py166 ?ypy165)) )) :named A1_358))
(assert (! (forall ((?x_3py167 Int)(?ypy166 Int)) (! (or (not (<= 0 ?x_3py167)) (not (<= 0 ?ypy166)) (<= 9223372036854775808 ?ypy166) (<= 9223372036854775808 ?x_3py167) (not (<= 9223372036854775808 (or_1 ?x_3py167 ?ypy166)))) :pattern ((or_1 ?x_3py167 ?ypy166)) )) :named A1_359))
(assert (! (forall ((?x_3py168 Int)(?ypy167 Int)) (! (or (not (<= 0 ?x_3py168)) (not (<= 0 ?ypy167)) (<= 9223372036854775808 ?ypy167) (<= 9223372036854775808 ?x_3py168) (not (<= 9223372036854775808 (xor_1 ?x_3py168 ?ypy167)))) :pattern ((xor_1 ?x_3py168 ?ypy167)) )) :named A1_360))
(assert (! (forall ((?x_3py169 Int)(?ypy168 Int)) (! (or (not (<= 0 ?x_3py169)) (not (<= 0 ?ypy168)) (= (x (+ ?x_3py169 ?ypy168) ?ypy168) (x ?x_3py169 ?ypy168))) :pattern ((x (+ ?x_3py169 ?ypy168) ?ypy168)) )) :named A1_361))
(assert (! (forall ((?x_3py170 Int)(?ypy169 Int)) (! (or (not (<= 0 ?x_3py170)) (not (<= 0 ?ypy169)) (= (x (+ ?ypy169 ?x_3py170) ?ypy169) (x ?x_3py170 ?ypy169))) :pattern ((x (+ ?ypy169 ?x_3py170) ?ypy169)) )) :named A1_362))
(assert (! (forall ((?x_3py171 Int)(?ypy170 Int)) (! (or (not (<= 0 ?x_3py171)) (not (<= 0 ?ypy170)) (and (<= (and_1 ?x_3py171 ?ypy170) ?x_3py171) (<= (and_1 ?x_3py171 ?ypy170) ?ypy170))) :pattern ((and_1 ?x_3py171 ?ypy170)) )) :named A1_363))
(assert (! (forall ((?x_3py172 Int)(?ypy171 Int)) (! (or (not (<= 0 ?x_3py172)) (not (<= 0 ?ypy171)) (and (<= 0 (or_1 ?x_3py172 ?ypy171)) (<= (or_1 ?x_3py172 ?ypy171) (+ ?x_3py172 ?ypy171)))) :pattern ((or_1 ?x_3py172 ?ypy171)) )) :named A1_364))
(assert (! (forall ((?x_3py173 Int)(?ypy172 Int)) (! (or (not (<= 0 ?x_3py173)) (not (<= 0 ?ypy172)) (and (<= ?x_3py173 (or_1 ?x_3py173 ?ypy172)) (<= ?ypy172 (or_1 ?x_3py173 ?ypy172)))) :pattern ((or_1 ?x_3py173 ?ypy172)) )) :named A1_365))
(assert (! (forall ((?x_3py174 Int)(?ypy173 Int)) (! (or (not (<= 0 ?x_3py174)) (not (<= 0 ?ypy173)) (not (<= 65536 (or_1 ?x_3py174 ?ypy173))) (<= 65536 ?x_3py174) (<= 65536 ?ypy173)) :pattern ((or_1 ?x_3py174 ?ypy173)) )) :named A1_366))
(assert (! (forall ((?x_3py175 Int)(?ypy174 Int)) (! (or (not (<= 0 ?ypy174)) (= (x (+ ?x_3py175 (* (- 1) ?ypy174)) ?ypy174) (x ?x_3py175 ?ypy174)) (not (<= 0 (+ ?x_3py175 (* (- 1) ?ypy174))))) :pattern ((x (- ?x_3py175 ?ypy174) ?ypy174)) )) :named A1_367))
(assert (! (forall ((?x_3py176 Int)(?ypy175 Int)) (! (or (not (<= ?x_3py176 0)) (<= ?ypy175 0) (and (not (<= (x ?x_3py176 ?ypy175) (* (- 1) ?ypy175))) (<= (x ?x_3py176 ?ypy175) 0))) :pattern ((x ?x_3py176 ?ypy175)) )) :named A1_368))
(assert (! (forall ((?x_3py177 Int)(?ypy176 Int)) (! (or (not (<= min_i4 (* ?ypy176 ?x_3py177))) (not (<= (* ?ypy176 ?x_3py177) max_i4)) (= (* ?ypy176 ?x_3py177) (mul_unchk_i4 ?x_3py177 ?ypy176))) :pattern ((mul_unchk_i4 ?x_3py177 ?ypy176)) )) :named A1_369))
(assert (! (forall ((?x_3py178 Int)(?ypy177 Int)) (! (or (not (<= min_i4 (+ ?x_3py178 ?ypy177))) (not (<= (+ ?x_3py178 ?ypy177) max_i4)) (= (+ ?x_3py178 ?ypy177) (add_unchk_i4 ?x_3py178 ?ypy177))) :pattern ((add_unchk_i4 ?x_3py178 ?ypy177)) )) :named A1_370))
(assert (! (forall ((?x_3py179 Int)(?ypy178 Int)) (! (or (not (<= min_i8 (* ?ypy178 ?x_3py179))) (not (<= (* ?ypy178 ?x_3py179) max_i8)) (= (* ?ypy178 ?x_3py179) (mul_unchk_i8 ?x_3py179 ?ypy178))) :pattern ((mul_unchk_i8 ?x_3py179 ?ypy178)) )) :named A1_371))
(assert (! (forall ((?x_3py180 Int)(?ypy179 Int)) (! (or (not (<= min_i8 (+ ?x_3py180 (* (- 1) ?ypy179)))) (not (<= (+ ?x_3py180 (* (- 1) ?ypy179)) max_i8)) (= (+ ?x_3py180 (* (- 1) ?ypy179)) (sub_unchk_i8 ?x_3py180 ?ypy179))) :pattern ((sub_unchk_i8 ?x_3py180 ?ypy179)) )) :named A1_372))
(assert (! (forall ((?x_3py181 Int)(?ypy180 Int)) (! (or (not (<= min_i8 (+ ?x_3py181 ?ypy180))) (not (<= (+ ?x_3py181 ?ypy180) max_i8)) (= (+ ?x_3py181 ?ypy180) (add_unchk_i8 ?x_3py181 ?ypy180))) :pattern ((add_unchk_i8 ?x_3py181 ?ypy180)) )) :named A1_373))
(assert (! (forall ((?x_3py182 Int)(?ypy181 Int)) (! (or (not (<= min_u4 (* ?ypy181 ?x_3py182))) (not (<= (* ?ypy181 ?x_3py182) max_u4)) (= (* ?ypy181 ?x_3py182) (mul_unchk_u4 ?x_3py182 ?ypy181))) :pattern ((mul_unchk_u4 ?x_3py182 ?ypy181)) )) :named A1_374))
(assert (! (forall ((?x_3py183 Int)(?ypy182 Int)) (! (or (not (<= min_u4 (+ ?x_3py183 ?ypy182))) (not (<= (+ ?x_3py183 ?ypy182) max_u4)) (= (+ ?x_3py183 ?ypy182) (add_unchk_u4 ?x_3py183 ?ypy182))) :pattern ((add_unchk_u4 ?x_3py183 ?ypy182)) )) :named A1_375))
(assert (! (forall ((?x_3py184 Int)(?ypy183 Int)) (! (or (not (<= min_u8 (* ?ypy183 ?x_3py184))) (not (<= (* ?ypy183 ?x_3py184) max_u8)) (= (* ?ypy183 ?x_3py184) (mul_unchk_u8 ?x_3py184 ?ypy183))) :pattern ((mul_unchk_u8 ?x_3py184 ?ypy183)) )) :named A1_376))
(assert (! (forall ((?x_3py185 Int)(?ypy184 Int)) (! (or (not (<= min_u8 (+ ?x_3py185 (* (- 1) ?ypy184)))) (not (<= (+ ?x_3py185 (* (- 1) ?ypy184)) max_u8)) (= (+ ?x_3py185 (* (- 1) ?ypy184)) (sub_unchk_u8 ?x_3py185 ?ypy184))) :pattern ((sub_unchk_u8 ?x_3py185 ?ypy184)) )) :named A1_377))
(assert (! (forall ((?x_3py186 Int)(?ypy185 Int)) (! (or (not (<= min_u8 (+ ?x_3py186 ?ypy185))) (not (<= (+ ?x_3py186 ?ypy185) max_u8)) (= (+ ?x_3py186 ?ypy185) (add_unchk_u8 ?x_3py186 ?ypy185))) :pattern ((add_unchk_u8 ?x_3py186 ?ypy185)) )) :named A1_378))
(assert (! (forall ((?x_3py187 Int)) (! (= (and_1 ?x_3py187 (not_1 0)) ?x_3py187) :pattern ((and_1 ?x_3py187 (not_1 0))) )) :named A1_379))
(assert (! (forall ((?x_3py188 Int)) (! (= (and_1 ?x_3py188 (not_1 ?x_3py188)) 0) :pattern ((and_1 ?x_3py188 (not_1 ?x_3py188))) )) :named A1_380))
(assert (! (forall ((?x_3py189 Int)) (! (= (and_1 ?x_3py189 0) 0) :pattern ((and_1 ?x_3py189 0)) )) :named A1_381))
(assert (! (forall ((?x_3py190 Int)) (! (= (not_1 (not_1 ?x_3py190)) ?x_3py190) :pattern ((not_1 (not_1 ?x_3py190))) )) :named A1_382))
(assert (! (forall ((?x_3py191 Int)) (! (= (or_1 ?x_3py191 (not_1 0)) (not_1 0)) :pattern ((or_1 ?x_3py191 (not_1 0))) )) :named A1_383))
(assert (! (forall ((?x_3py192 Int)) (! (= (or_1 ?x_3py192 (not_1 ?x_3py192)) (not_1 0)) :pattern ((or_1 ?x_3py192 (not_1 ?x_3py192))) )) :named A1_384))
(assert (! (forall ((?x_3py193 Int)) (! (= (or_1 ?x_3py193 0) ?x_3py193) :pattern ((or_1 ?x_3py193 0)) )) :named A1_385))
(assert (! (forall ((?x_3py194 Int)) (! (= (shl ?x_3py194 0) ?x_3py194) :pattern ((shl ?x_3py194 0)) )) :named A1_386))
(assert (! (forall ((?x_3py195 Int)) (! (= (shl ?x_3py195 1) (* 2 ?x_3py195)) :pattern ((shl ?x_3py195 1)) )) :named A1_387))
(assert (! (forall ((?x_3py196 Int)) (! (= (shl ?x_3py196 10) (* 1024 ?x_3py196)) :pattern ((shl ?x_3py196 10)) )) :named A1_388))
(assert (! (forall ((?x_3py197 Int)) (! (= (shl ?x_3py197 11) (* 2048 ?x_3py197)) :pattern ((shl ?x_3py197 11)) )) :named A1_389))
(assert (! (forall ((?x_3py198 Int)) (! (= (shl ?x_3py198 12) (* 4096 ?x_3py198)) :pattern ((shl ?x_3py198 12)) )) :named A1_390))
(assert (! (forall ((?x_3py199 Int)) (! (= (shl ?x_3py199 13) (* 8192 ?x_3py199)) :pattern ((shl ?x_3py199 13)) )) :named A1_391))
(assert (! (forall ((?x_3py200 Int)) (! (= (shl ?x_3py200 14) (* 16384 ?x_3py200)) :pattern ((shl ?x_3py200 14)) )) :named A1_392))
(assert (! (forall ((?x_3py201 Int)) (! (= (shl ?x_3py201 15) (* 32768 ?x_3py201)) :pattern ((shl ?x_3py201 15)) )) :named A1_393))
(assert (! (forall ((?x_3py202 Int)) (! (= (shl ?x_3py202 16) (* 65536 ?x_3py202)) :pattern ((shl ?x_3py202 16)) )) :named A1_394))
(assert (! (forall ((?x_3py203 Int)) (! (= (shl ?x_3py203 17) (* 131072 ?x_3py203)) :pattern ((shl ?x_3py203 17)) )) :named A1_395))
(assert (! (forall ((?x_3py204 Int)) (! (= (shl ?x_3py204 18) (* 262144 ?x_3py204)) :pattern ((shl ?x_3py204 18)) )) :named A1_396))
(assert (! (forall ((?x_3py205 Int)) (! (= (shl ?x_3py205 19) (* 524288 ?x_3py205)) :pattern ((shl ?x_3py205 19)) )) :named A1_397))
(assert (! (forall ((?x_3py206 Int)) (! (= (shl ?x_3py206 2) (* 4 ?x_3py206)) :pattern ((shl ?x_3py206 2)) )) :named A1_398))
(assert (! (forall ((?x_3py207 Int)) (! (= (shl ?x_3py207 20) (* 1048576 ?x_3py207)) :pattern ((shl ?x_3py207 20)) )) :named A1_399))
(assert (! (forall ((?x_3py208 Int)) (! (= (shl ?x_3py208 21) (* 2097152 ?x_3py208)) :pattern ((shl ?x_3py208 21)) )) :named A1_400))
(assert (! (forall ((?x_3py209 Int)) (! (= (shl ?x_3py209 22) (* 4194304 ?x_3py209)) :pattern ((shl ?x_3py209 22)) )) :named A1_401))
(assert (! (forall ((?x_3py210 Int)) (! (= (shl ?x_3py210 23) (* 8388608 ?x_3py210)) :pattern ((shl ?x_3py210 23)) )) :named A1_402))
(assert (! (forall ((?x_3py211 Int)) (! (= (shl ?x_3py211 24) (* 16777216 ?x_3py211)) :pattern ((shl ?x_3py211 24)) )) :named A1_403))
(assert (! (forall ((?x_3py212 Int)) (! (= (shl ?x_3py212 25) (* 33554432 ?x_3py212)) :pattern ((shl ?x_3py212 25)) )) :named A1_404))
(assert (! (forall ((?x_3py213 Int)) (! (= (shl ?x_3py213 26) (* 67108864 ?x_3py213)) :pattern ((shl ?x_3py213 26)) )) :named A1_405))
(assert (! (forall ((?x_3py214 Int)) (! (= (shl ?x_3py214 27) (* 134217728 ?x_3py214)) :pattern ((shl ?x_3py214 27)) )) :named A1_406))
(assert (! (forall ((?x_3py215 Int)) (! (= (shl ?x_3py215 28) (* 268435456 ?x_3py215)) :pattern ((shl ?x_3py215 28)) )) :named A1_407))
(assert (! (forall ((?x_3py216 Int)) (! (= (shl ?x_3py216 29) (* 536870912 ?x_3py216)) :pattern ((shl ?x_3py216 29)) )) :named A1_408))
(assert (! (forall ((?x_3py217 Int)) (! (= (shl ?x_3py217 3) (* 8 ?x_3py217)) :pattern ((shl ?x_3py217 3)) )) :named A1_409))
(assert (! (forall ((?x_3py218 Int)) (! (= (shl ?x_3py218 30) (* 1073741824 ?x_3py218)) :pattern ((shl ?x_3py218 30)) )) :named A1_410))
(assert (! (forall ((?x_3py219 Int)) (! (= (shl ?x_3py219 31) (* 2147483648 ?x_3py219)) :pattern ((shl ?x_3py219 31)) )) :named A1_411))
(assert (! (forall ((?x_3py220 Int)) (! (= (shl ?x_3py220 32) (* 4294967296 ?x_3py220)) :pattern ((shl ?x_3py220 32)) )) :named A1_412))
(assert (! (forall ((?x_3py221 Int)) (! (= (shl ?x_3py221 33) (* 8589934592 ?x_3py221)) :pattern ((shl ?x_3py221 33)) )) :named A1_413))
(assert (! (forall ((?x_3py222 Int)) (! (= (shl ?x_3py222 34) (* 17179869184 ?x_3py222)) :pattern ((shl ?x_3py222 34)) )) :named A1_414))
(assert (! (forall ((?x_3py223 Int)) (! (= (shl ?x_3py223 35) (* 34359738368 ?x_3py223)) :pattern ((shl ?x_3py223 35)) )) :named A1_415))
(assert (! (forall ((?x_3py224 Int)) (! (= (shl ?x_3py224 36) (* 68719476736 ?x_3py224)) :pattern ((shl ?x_3py224 36)) )) :named A1_416))
(assert (! (forall ((?x_3py225 Int)) (! (= (shl ?x_3py225 37) (* 137438953472 ?x_3py225)) :pattern ((shl ?x_3py225 37)) )) :named A1_417))
(assert (! (forall ((?x_3py226 Int)) (! (= (shl ?x_3py226 38) (* 274877906944 ?x_3py226)) :pattern ((shl ?x_3py226 38)) )) :named A1_418))
(assert (! (forall ((?x_3py227 Int)) (! (= (shl ?x_3py227 39) (* 549755813888 ?x_3py227)) :pattern ((shl ?x_3py227 39)) )) :named A1_419))
(assert (! (forall ((?x_3py228 Int)) (! (= (shl ?x_3py228 4) (* 16 ?x_3py228)) :pattern ((shl ?x_3py228 4)) )) :named A1_420))
(assert (! (forall ((?x_3py229 Int)) (! (= (shl ?x_3py229 40) (* 1099511627776 ?x_3py229)) :pattern ((shl ?x_3py229 40)) )) :named A1_421))
(assert (! (forall ((?x_3py230 Int)) (! (= (shl ?x_3py230 41) (* 2199023255552 ?x_3py230)) :pattern ((shl ?x_3py230 41)) )) :named A1_422))
(assert (! (forall ((?x_3py231 Int)) (! (= (shl ?x_3py231 42) (* 4398046511104 ?x_3py231)) :pattern ((shl ?x_3py231 42)) )) :named A1_423))
(assert (! (forall ((?x_3py232 Int)) (! (= (shl ?x_3py232 43) (* 8796093022208 ?x_3py232)) :pattern ((shl ?x_3py232 43)) )) :named A1_424))
(assert (! (forall ((?x_3py233 Int)) (! (= (shl ?x_3py233 44) (* 17592186044416 ?x_3py233)) :pattern ((shl ?x_3py233 44)) )) :named A1_425))
(assert (! (forall ((?x_3py234 Int)) (! (= (shl ?x_3py234 45) (* 35184372088832 ?x_3py234)) :pattern ((shl ?x_3py234 45)) )) :named A1_426))
(assert (! (forall ((?x_3py235 Int)) (! (= (shl ?x_3py235 46) (* 70368744177664 ?x_3py235)) :pattern ((shl ?x_3py235 46)) )) :named A1_427))
(assert (! (forall ((?x_3py236 Int)) (! (= (shl ?x_3py236 47) (* 140737488355328 ?x_3py236)) :pattern ((shl ?x_3py236 47)) )) :named A1_428))
(assert (! (forall ((?x_3py237 Int)) (! (= (shl ?x_3py237 48) (* 281474976710656 ?x_3py237)) :pattern ((shl ?x_3py237 48)) )) :named A1_429))
(assert (! (forall ((?x_3py238 Int)) (! (= (shl ?x_3py238 49) (* 562949953421312 ?x_3py238)) :pattern ((shl ?x_3py238 49)) )) :named A1_430))
(assert (! (forall ((?x_3py239 Int)) (! (= (shl ?x_3py239 5) (* 32 ?x_3py239)) :pattern ((shl ?x_3py239 5)) )) :named A1_431))
(assert (! (forall ((?x_3py240 Int)) (! (= (shl ?x_3py240 50) (* 1125899906842624 ?x_3py240)) :pattern ((shl ?x_3py240 50)) )) :named A1_432))
(assert (! (forall ((?x_3py241 Int)) (! (= (shl ?x_3py241 51) (* 2251799813685248 ?x_3py241)) :pattern ((shl ?x_3py241 51)) )) :named A1_433))
(assert (! (forall ((?x_3py242 Int)) (! (= (shl ?x_3py242 52) (* 4503599627370496 ?x_3py242)) :pattern ((shl ?x_3py242 52)) )) :named A1_434))
(assert (! (forall ((?x_3py243 Int)) (! (= (shl ?x_3py243 53) (* 9007199254740992 ?x_3py243)) :pattern ((shl ?x_3py243 53)) )) :named A1_435))
(assert (! (forall ((?x_3py244 Int)) (! (= (shl ?x_3py244 54) (* 18014398509481984 ?x_3py244)) :pattern ((shl ?x_3py244 54)) )) :named A1_436))
(assert (! (forall ((?x_3py245 Int)) (! (= (shl ?x_3py245 55) (* 36028797018963968 ?x_3py245)) :pattern ((shl ?x_3py245 55)) )) :named A1_437))
(assert (! (forall ((?x_3py246 Int)) (! (= (shl ?x_3py246 56) (* 72057594037927936 ?x_3py246)) :pattern ((shl ?x_3py246 56)) )) :named A1_438))
(assert (! (forall ((?x_3py247 Int)) (! (= (shl ?x_3py247 57) (* 144115188075855872 ?x_3py247)) :pattern ((shl ?x_3py247 57)) )) :named A1_439))
(assert (! (forall ((?x_3py248 Int)) (! (= (shl ?x_3py248 58) (* 288230376151711744 ?x_3py248)) :pattern ((shl ?x_3py248 58)) )) :named A1_440))
(assert (! (forall ((?x_3py249 Int)) (! (= (shl ?x_3py249 59) (* 576460752303423488 ?x_3py249)) :pattern ((shl ?x_3py249 59)) )) :named A1_441))
(assert (! (forall ((?x_3py250 Int)) (! (= (shl ?x_3py250 6) (* 64 ?x_3py250)) :pattern ((shl ?x_3py250 6)) )) :named A1_442))
(assert (! (forall ((?x_3py251 Int)) (! (= (shl ?x_3py251 60) (* 1152921504606846976 ?x_3py251)) :pattern ((shl ?x_3py251 60)) )) :named A1_443))
(assert (! (forall ((?x_3py252 Int)) (! (= (shl ?x_3py252 61) (* 2305843009213693952 ?x_3py252)) :pattern ((shl ?x_3py252 61)) )) :named A1_444))
(assert (! (forall ((?x_3py253 Int)) (! (= (shl ?x_3py253 62) (* 4611686018427387904 ?x_3py253)) :pattern ((shl ?x_3py253 62)) )) :named A1_445))
(assert (! (forall ((?x_3py254 Int)) (! (= (shl ?x_3py254 63) (* 9223372036854775808 ?x_3py254)) :pattern ((shl ?x_3py254 63)) )) :named A1_446))
(assert (! (forall ((?x_3py255 Int)) (! (= (shl ?x_3py255 7) (* 128 ?x_3py255)) :pattern ((shl ?x_3py255 7)) )) :named A1_447))
(assert (! (forall ((?x_3py256 Int)) (! (= (shl ?x_3py256 8) (* 256 ?x_3py256)) :pattern ((shl ?x_3py256 8)) )) :named A1_448))
(assert (! (forall ((?x_3py257 Int)) (! (= (shl ?x_3py257 9) (* 512 ?x_3py257)) :pattern ((shl ?x_3py257 9)) )) :named A1_449))
(assert (! (forall ((?x_3py258 Int)) (! (= (shr ?x_3py258 0) (x_1 ?x_3py258 1)) :pattern ((shr ?x_3py258 0)) )) :named A1_450))
(assert (! (forall ((?x_3py259 Int)) (! (= (shr ?x_3py259 1) (x_1 ?x_3py259 2)) :pattern ((shr ?x_3py259 1)) )) :named A1_451))
(assert (! (forall ((?x_3py260 Int)) (! (= (shr ?x_3py260 10) (x_1 ?x_3py260 1024)) :pattern ((shr ?x_3py260 10)) )) :named A1_452))
(assert (! (forall ((?x_3py261 Int)) (! (= (shr ?x_3py261 11) (x_1 ?x_3py261 2048)) :pattern ((shr ?x_3py261 11)) )) :named A1_453))
(assert (! (forall ((?x_3py262 Int)) (! (= (shr ?x_3py262 12) (x_1 ?x_3py262 4096)) :pattern ((shr ?x_3py262 12)) )) :named A1_454))
(assert (! (forall ((?x_3py263 Int)) (! (= (shr ?x_3py263 13) (x_1 ?x_3py263 8192)) :pattern ((shr ?x_3py263 13)) )) :named A1_455))
(assert (! (forall ((?x_3py264 Int)) (! (= (shr ?x_3py264 14) (x_1 ?x_3py264 16384)) :pattern ((shr ?x_3py264 14)) )) :named A1_456))
(assert (! (forall ((?x_3py265 Int)) (! (= (shr ?x_3py265 15) (x_1 ?x_3py265 32768)) :pattern ((shr ?x_3py265 15)) )) :named A1_457))
(assert (! (forall ((?x_3py266 Int)) (! (= (shr ?x_3py266 16) (x_1 ?x_3py266 65536)) :pattern ((shr ?x_3py266 16)) )) :named A1_458))
(assert (! (forall ((?x_3py267 Int)) (! (= (shr ?x_3py267 17) (x_1 ?x_3py267 131072)) :pattern ((shr ?x_3py267 17)) )) :named A1_459))
(assert (! (forall ((?x_3py268 Int)) (! (= (shr ?x_3py268 18) (x_1 ?x_3py268 262144)) :pattern ((shr ?x_3py268 18)) )) :named A1_460))
(assert (! (forall ((?x_3py269 Int)) (! (= (shr ?x_3py269 19) (x_1 ?x_3py269 524288)) :pattern ((shr ?x_3py269 19)) )) :named A1_461))
(assert (! (forall ((?x_3py270 Int)) (! (= (shr ?x_3py270 2) (x_1 ?x_3py270 4)) :pattern ((shr ?x_3py270 2)) )) :named A1_462))
(assert (! (forall ((?x_3py271 Int)) (! (= (shr ?x_3py271 20) (x_1 ?x_3py271 1048576)) :pattern ((shr ?x_3py271 20)) )) :named A1_463))
(assert (! (forall ((?x_3py272 Int)) (! (= (shr ?x_3py272 21) (x_1 ?x_3py272 2097152)) :pattern ((shr ?x_3py272 21)) )) :named A1_464))
(assert (! (forall ((?x_3py273 Int)) (! (= (shr ?x_3py273 22) (x_1 ?x_3py273 4194304)) :pattern ((shr ?x_3py273 22)) )) :named A1_465))
(assert (! (forall ((?x_3py274 Int)) (! (= (shr ?x_3py274 23) (x_1 ?x_3py274 8388608)) :pattern ((shr ?x_3py274 23)) )) :named A1_466))
(assert (! (forall ((?x_3py275 Int)) (! (= (shr ?x_3py275 24) (x_1 ?x_3py275 16777216)) :pattern ((shr ?x_3py275 24)) )) :named A1_467))
(assert (! (forall ((?x_3py276 Int)) (! (= (shr ?x_3py276 25) (x_1 ?x_3py276 33554432)) :pattern ((shr ?x_3py276 25)) )) :named A1_468))
(assert (! (forall ((?x_3py277 Int)) (! (= (shr ?x_3py277 26) (x_1 ?x_3py277 67108864)) :pattern ((shr ?x_3py277 26)) )) :named A1_469))
(assert (! (forall ((?x_3py278 Int)) (! (= (shr ?x_3py278 27) (x_1 ?x_3py278 134217728)) :pattern ((shr ?x_3py278 27)) )) :named A1_470))
(assert (! (forall ((?x_3py279 Int)) (! (= (shr ?x_3py279 28) (x_1 ?x_3py279 268435456)) :pattern ((shr ?x_3py279 28)) )) :named A1_471))
(assert (! (forall ((?x_3py280 Int)) (! (= (shr ?x_3py280 29) (x_1 ?x_3py280 536870912)) :pattern ((shr ?x_3py280 29)) )) :named A1_472))
(assert (! (forall ((?x_3py281 Int)) (! (= (shr ?x_3py281 3) (x_1 ?x_3py281 8)) :pattern ((shr ?x_3py281 3)) )) :named A1_473))
(assert (! (forall ((?x_3py282 Int)) (! (= (shr ?x_3py282 30) (x_1 ?x_3py282 1073741824)) :pattern ((shr ?x_3py282 30)) )) :named A1_474))
(assert (! (forall ((?x_3py283 Int)) (! (= (shr ?x_3py283 31) (x_1 ?x_3py283 2147483648)) :pattern ((shr ?x_3py283 31)) )) :named A1_475))
(assert (! (forall ((?x_3py284 Int)) (! (= (shr ?x_3py284 32) (x_1 ?x_3py284 4294967296)) :pattern ((shr ?x_3py284 32)) )) :named A1_476))
(assert (! (forall ((?x_3py285 Int)) (! (= (shr ?x_3py285 33) (x_1 ?x_3py285 8589934592)) :pattern ((shr ?x_3py285 33)) )) :named A1_477))
(assert (! (forall ((?x_3py286 Int)) (! (= (shr ?x_3py286 34) (x_1 ?x_3py286 17179869184)) :pattern ((shr ?x_3py286 34)) )) :named A1_478))
(assert (! (forall ((?x_3py287 Int)) (! (= (shr ?x_3py287 35) (x_1 ?x_3py287 34359738368)) :pattern ((shr ?x_3py287 35)) )) :named A1_479))
(assert (! (forall ((?x_3py288 Int)) (! (= (shr ?x_3py288 36) (x_1 ?x_3py288 68719476736)) :pattern ((shr ?x_3py288 36)) )) :named A1_480))
(assert (! (forall ((?x_3py289 Int)) (! (= (shr ?x_3py289 37) (x_1 ?x_3py289 137438953472)) :pattern ((shr ?x_3py289 37)) )) :named A1_481))
(assert (! (forall ((?x_3py290 Int)) (! (= (shr ?x_3py290 38) (x_1 ?x_3py290 274877906944)) :pattern ((shr ?x_3py290 38)) )) :named A1_482))
(assert (! (forall ((?x_3py291 Int)) (! (= (shr ?x_3py291 39) (x_1 ?x_3py291 549755813888)) :pattern ((shr ?x_3py291 39)) )) :named A1_483))
(assert (! (forall ((?x_3py292 Int)) (! (= (shr ?x_3py292 4) (x_1 ?x_3py292 16)) :pattern ((shr ?x_3py292 4)) )) :named A1_484))
(assert (! (forall ((?x_3py293 Int)) (! (= (shr ?x_3py293 40) (x_1 ?x_3py293 1099511627776)) :pattern ((shr ?x_3py293 40)) )) :named A1_485))
(assert (! (forall ((?x_3py294 Int)) (! (= (shr ?x_3py294 41) (x_1 ?x_3py294 2199023255552)) :pattern ((shr ?x_3py294 41)) )) :named A1_486))
(assert (! (forall ((?x_3py295 Int)) (! (= (shr ?x_3py295 42) (x_1 ?x_3py295 4398046511104)) :pattern ((shr ?x_3py295 42)) )) :named A1_487))
(assert (! (forall ((?x_3py296 Int)) (! (= (shr ?x_3py296 43) (x_1 ?x_3py296 8796093022208)) :pattern ((shr ?x_3py296 43)) )) :named A1_488))
(assert (! (forall ((?x_3py297 Int)) (! (= (shr ?x_3py297 44) (x_1 ?x_3py297 17592186044416)) :pattern ((shr ?x_3py297 44)) )) :named A1_489))
(assert (! (forall ((?x_3py298 Int)) (! (= (shr ?x_3py298 45) (x_1 ?x_3py298 35184372088832)) :pattern ((shr ?x_3py298 45)) )) :named A1_490))
(assert (! (forall ((?x_3py299 Int)) (! (= (shr ?x_3py299 46) (x_1 ?x_3py299 70368744177664)) :pattern ((shr ?x_3py299 46)) )) :named A1_491))
(assert (! (forall ((?x_3py300 Int)) (! (= (shr ?x_3py300 47) (x_1 ?x_3py300 140737488355328)) :pattern ((shr ?x_3py300 47)) )) :named A1_492))
(assert (! (forall ((?x_3py301 Int)) (! (= (shr ?x_3py301 48) (x_1 ?x_3py301 281474976710656)) :pattern ((shr ?x_3py301 48)) )) :named A1_493))
(assert (! (forall ((?x_3py302 Int)) (! (= (shr ?x_3py302 49) (x_1 ?x_3py302 562949953421312)) :pattern ((shr ?x_3py302 49)) )) :named A1_494))
(assert (! (forall ((?x_3py303 Int)) (! (= (shr ?x_3py303 5) (x_1 ?x_3py303 32)) :pattern ((shr ?x_3py303 5)) )) :named A1_495))
(assert (! (forall ((?x_3py304 Int)) (! (= (shr ?x_3py304 50) (x_1 ?x_3py304 1125899906842624)) :pattern ((shr ?x_3py304 50)) )) :named A1_496))
(assert (! (forall ((?x_3py305 Int)) (! (= (shr ?x_3py305 51) (x_1 ?x_3py305 2251799813685248)) :pattern ((shr ?x_3py305 51)) )) :named A1_497))
(assert (! (forall ((?x_3py306 Int)) (! (= (shr ?x_3py306 52) (x_1 ?x_3py306 4503599627370496)) :pattern ((shr ?x_3py306 52)) )) :named A1_498))
(assert (! (forall ((?x_3py307 Int)) (! (= (shr ?x_3py307 53) (x_1 ?x_3py307 9007199254740992)) :pattern ((shr ?x_3py307 53)) )) :named A1_499))
(assert (! (forall ((?x_3py308 Int)) (! (= (shr ?x_3py308 54) (x_1 ?x_3py308 18014398509481984)) :pattern ((shr ?x_3py308 54)) )) :named A1_500))
(assert (! (forall ((?x_3py309 Int)) (! (= (shr ?x_3py309 55) (x_1 ?x_3py309 36028797018963968)) :pattern ((shr ?x_3py309 55)) )) :named A1_501))
(assert (! (forall ((?x_3py310 Int)) (! (= (shr ?x_3py310 56) (x_1 ?x_3py310 72057594037927936)) :pattern ((shr ?x_3py310 56)) )) :named A1_502))
(assert (! (forall ((?x_3py311 Int)) (! (= (shr ?x_3py311 57) (x_1 ?x_3py311 144115188075855872)) :pattern ((shr ?x_3py311 57)) )) :named A1_503))
(assert (! (forall ((?x_3py312 Int)) (! (= (shr ?x_3py312 58) (x_1 ?x_3py312 288230376151711744)) :pattern ((shr ?x_3py312 58)) )) :named A1_504))
(assert (! (forall ((?x_3py313 Int)) (! (= (shr ?x_3py313 59) (x_1 ?x_3py313 576460752303423488)) :pattern ((shr ?x_3py313 59)) )) :named A1_505))
(assert (! (forall ((?x_3py314 Int)) (! (= (shr ?x_3py314 6) (x_1 ?x_3py314 64)) :pattern ((shr ?x_3py314 6)) )) :named A1_506))
(assert (! (forall ((?x_3py315 Int)) (! (= (shr ?x_3py315 60) (x_1 ?x_3py315 1152921504606846976)) :pattern ((shr ?x_3py315 60)) )) :named A1_507))
(assert (! (forall ((?x_3py316 Int)) (! (= (shr ?x_3py316 61) (x_1 ?x_3py316 2305843009213693952)) :pattern ((shr ?x_3py316 61)) )) :named A1_508))
(assert (! (forall ((?x_3py317 Int)) (! (= (shr ?x_3py317 62) (x_1 ?x_3py317 4611686018427387904)) :pattern ((shr ?x_3py317 62)) )) :named A1_509))
(assert (! (forall ((?x_3py318 Int)) (! (= (shr ?x_3py318 63) (x_1 ?x_3py318 9223372036854775808)) :pattern ((shr ?x_3py318 63)) )) :named A1_510))
(assert (! (forall ((?x_3py319 Int)) (! (= (shr ?x_3py319 7) (x_1 ?x_3py319 128)) :pattern ((shr ?x_3py319 7)) )) :named A1_511))
(assert (! (forall ((?x_3py320 Int)) (! (= (shr ?x_3py320 8) (x_1 ?x_3py320 256)) :pattern ((shr ?x_3py320 8)) )) :named A1_512))
(assert (! (forall ((?x_3py321 Int)) (! (= (shr ?x_3py321 9) (x_1 ?x_3py321 512)) :pattern ((shr ?x_3py321 9)) )) :named A1_513))
(assert (! (forall ((?x_3py322 Int)) (! (= (x ?x_3py322 1) (and_1 ?x_3py322 0)) :pattern ((x ?x_3py322 1) (and_1 ?x_3py322 0)) )) :named A1_514))
(assert (! (forall ((?x_3py323 Int)) (! (= (x ?x_3py323 1024) (and_1 ?x_3py323 1023)) :pattern ((x ?x_3py323 1024) (and_1 ?x_3py323 1023)) )) :named A1_515))
(assert (! (forall ((?x_3py324 Int)) (! (= (x ?x_3py324 1048576) (and_1 ?x_3py324 1048575)) :pattern ((x ?x_3py324 1048576) (and_1 ?x_3py324 1048575)) )) :named A1_516))
(assert (! (forall ((?x_3py325 Int)) (! (= (x ?x_3py325 1073741824) (and_1 ?x_3py325 1073741823)) :pattern ((x ?x_3py325 1073741824) (and_1 ?x_3py325 1073741823)) )) :named A1_517))
(assert (! (forall ((?x_3py326 Int)) (! (= (x ?x_3py326 1099511627776) (and_1 ?x_3py326 1099511627775)) :pattern ((x ?x_3py326 1099511627776) (and_1 ?x_3py326 1099511627775)) )) :named A1_518))
(assert (! (forall ((?x_3py327 Int)) (! (= (x ?x_3py327 1125899906842624) (and_1 ?x_3py327 1125899906842623)) :pattern ((x ?x_3py327 1125899906842624) (and_1 ?x_3py327 1125899906842623)) )) :named A1_519))
(assert (! (forall ((?x_3py328 Int)) (! (= (x ?x_3py328 1152921504606846976) (and_1 ?x_3py328 1152921504606846975)) :pattern ((x ?x_3py328 1152921504606846976) (and_1 ?x_3py328 1152921504606846975)) )) :named A1_520))
(assert (! (forall ((?x_3py329 Int)) (! (= (x ?x_3py329 128) (and_1 ?x_3py329 127)) :pattern ((x ?x_3py329 128) (and_1 ?x_3py329 127)) )) :named A1_521))
(assert (! (forall ((?x_3py330 Int)) (! (= (x ?x_3py330 131072) (and_1 ?x_3py330 131071)) :pattern ((x ?x_3py330 131072) (and_1 ?x_3py330 131071)) )) :named A1_522))
(assert (! (forall ((?x_3py331 Int)) (! (= (x ?x_3py331 134217728) (and_1 ?x_3py331 134217727)) :pattern ((x ?x_3py331 134217728) (and_1 ?x_3py331 134217727)) )) :named A1_523))
(assert (! (forall ((?x_3py332 Int)) (! (= (x ?x_3py332 137438953472) (and_1 ?x_3py332 137438953471)) :pattern ((x ?x_3py332 137438953472) (and_1 ?x_3py332 137438953471)) )) :named A1_524))
(assert (! (forall ((?x_3py333 Int)) (! (= (x ?x_3py333 140737488355328) (and_1 ?x_3py333 140737488355327)) :pattern ((x ?x_3py333 140737488355328) (and_1 ?x_3py333 140737488355327)) )) :named A1_525))
(assert (! (forall ((?x_3py334 Int)) (! (= (x ?x_3py334 144115188075855872) (and_1 ?x_3py334 144115188075855871)) :pattern ((x ?x_3py334 144115188075855872) (and_1 ?x_3py334 144115188075855871)) )) :named A1_526))
(assert (! (forall ((?x_3py335 Int)) (! (= (x ?x_3py335 16) (and_1 ?x_3py335 15)) :pattern ((x ?x_3py335 16) (and_1 ?x_3py335 15)) )) :named A1_527))
(assert (! (forall ((?x_3py336 Int)) (! (= (x ?x_3py336 16384) (and_1 ?x_3py336 16383)) :pattern ((x ?x_3py336 16384) (and_1 ?x_3py336 16383)) )) :named A1_528))
(assert (! (forall ((?x_3py337 Int)) (! (= (x ?x_3py337 16777216) (and_1 ?x_3py337 16777215)) :pattern ((x ?x_3py337 16777216) (and_1 ?x_3py337 16777215)) )) :named A1_529))
(assert (! (forall ((?x_3py338 Int)) (! (= (x ?x_3py338 17179869184) (and_1 ?x_3py338 17179869183)) :pattern ((x ?x_3py338 17179869184) (and_1 ?x_3py338 17179869183)) )) :named A1_530))
(assert (! (forall ((?x_3py339 Int)) (! (= (x ?x_3py339 17592186044416) (and_1 ?x_3py339 17592186044415)) :pattern ((x ?x_3py339 17592186044416) (and_1 ?x_3py339 17592186044415)) )) :named A1_531))
(assert (! (forall ((?x_3py340 Int)) (! (= (x ?x_3py340 18014398509481984) (and_1 ?x_3py340 18014398509481983)) :pattern ((x ?x_3py340 18014398509481984) (and_1 ?x_3py340 18014398509481983)) )) :named A1_532))
(assert (! (forall ((?x_3py341 Int)) (! (= (x ?x_3py341 2) (and_1 ?x_3py341 1)) :pattern ((x ?x_3py341 2) (and_1 ?x_3py341 1)) )) :named A1_533))
(assert (! (forall ((?x_3py342 Int)) (! (= (x ?x_3py342 2048) (and_1 ?x_3py342 2047)) :pattern ((x ?x_3py342 2048) (and_1 ?x_3py342 2047)) )) :named A1_534))
(assert (! (forall ((?x_3py343 Int)) (! (= (x ?x_3py343 2097152) (and_1 ?x_3py343 2097151)) :pattern ((x ?x_3py343 2097152) (and_1 ?x_3py343 2097151)) )) :named A1_535))
(assert (! (forall ((?x_3py344 Int)) (! (= (x ?x_3py344 2147483648) (and_1 ?x_3py344 2147483647)) :pattern ((x ?x_3py344 2147483648) (and_1 ?x_3py344 2147483647)) )) :named A1_536))
(assert (! (forall ((?x_3py345 Int)) (! (= (x ?x_3py345 2199023255552) (and_1 ?x_3py345 2199023255551)) :pattern ((x ?x_3py345 2199023255552) (and_1 ?x_3py345 2199023255551)) )) :named A1_537))
(assert (! (forall ((?x_3py346 Int)) (! (= (x ?x_3py346 2251799813685248) (and_1 ?x_3py346 2251799813685247)) :pattern ((x ?x_3py346 2251799813685248) (and_1 ?x_3py346 2251799813685247)) )) :named A1_538))
(assert (! (forall ((?x_3py347 Int)) (! (= (x ?x_3py347 2305843009213693952) (and_1 ?x_3py347 2305843009213693951)) :pattern ((x ?x_3py347 2305843009213693952) (and_1 ?x_3py347 2305843009213693951)) )) :named A1_539))
(assert (! (forall ((?x_3py348 Int)) (! (= (x ?x_3py348 256) (and_1 ?x_3py348 255)) :pattern ((x ?x_3py348 256) (and_1 ?x_3py348 255)) )) :named A1_540))
(assert (! (forall ((?x_3py349 Int)) (! (= (x ?x_3py349 262144) (and_1 ?x_3py349 262143)) :pattern ((x ?x_3py349 262144) (and_1 ?x_3py349 262143)) )) :named A1_541))
(assert (! (forall ((?x_3py350 Int)) (! (= (x ?x_3py350 268435456) (and_1 ?x_3py350 268435455)) :pattern ((x ?x_3py350 268435456) (and_1 ?x_3py350 268435455)) )) :named A1_542))
(assert (! (forall ((?x_3py351 Int)) (! (= (x ?x_3py351 274877906944) (and_1 ?x_3py351 274877906943)) :pattern ((x ?x_3py351 274877906944) (and_1 ?x_3py351 274877906943)) )) :named A1_543))
(assert (! (forall ((?x_3py352 Int)) (! (= (x ?x_3py352 281474976710656) (and_1 ?x_3py352 281474976710655)) :pattern ((x ?x_3py352 281474976710656) (and_1 ?x_3py352 281474976710655)) )) :named A1_544))
(assert (! (forall ((?x_3py353 Int)) (! (= (x ?x_3py353 288230376151711744) (and_1 ?x_3py353 288230376151711743)) :pattern ((x ?x_3py353 288230376151711744) (and_1 ?x_3py353 288230376151711743)) )) :named A1_545))
(assert (! (forall ((?x_3py354 Int)) (! (= (x ?x_3py354 32) (and_1 ?x_3py354 31)) :pattern ((x ?x_3py354 32) (and_1 ?x_3py354 31)) )) :named A1_546))
(assert (! (forall ((?x_3py355 Int)) (! (= (x ?x_3py355 32768) (and_1 ?x_3py355 32767)) :pattern ((x ?x_3py355 32768) (and_1 ?x_3py355 32767)) )) :named A1_547))
(assert (! (forall ((?x_3py356 Int)) (! (= (x ?x_3py356 33554432) (and_1 ?x_3py356 33554431)) :pattern ((x ?x_3py356 33554432) (and_1 ?x_3py356 33554431)) )) :named A1_548))
(assert (! (forall ((?x_3py357 Int)) (! (= (x ?x_3py357 34359738368) (and_1 ?x_3py357 34359738367)) :pattern ((x ?x_3py357 34359738368) (and_1 ?x_3py357 34359738367)) )) :named A1_549))
(assert (! (forall ((?x_3py358 Int)) (! (= (x ?x_3py358 35184372088832) (and_1 ?x_3py358 35184372088831)) :pattern ((x ?x_3py358 35184372088832) (and_1 ?x_3py358 35184372088831)) )) :named A1_550))
(assert (! (forall ((?x_3py359 Int)) (! (= (x ?x_3py359 36028797018963968) (and_1 ?x_3py359 36028797018963967)) :pattern ((x ?x_3py359 36028797018963968) (and_1 ?x_3py359 36028797018963967)) )) :named A1_551))
(assert (! (forall ((?x_3py360 Int)) (! (= (x ?x_3py360 4) (and_1 ?x_3py360 3)) :pattern ((x ?x_3py360 4) (and_1 ?x_3py360 3)) )) :named A1_552))
(assert (! (forall ((?x_3py361 Int)) (! (= (x ?x_3py361 4096) (and_1 ?x_3py361 4095)) :pattern ((x ?x_3py361 4096) (and_1 ?x_3py361 4095)) )) :named A1_553))
(assert (! (forall ((?x_3py362 Int)) (! (= (x ?x_3py362 4194304) (and_1 ?x_3py362 4194303)) :pattern ((x ?x_3py362 4194304) (and_1 ?x_3py362 4194303)) )) :named A1_554))
(assert (! (forall ((?x_3py363 Int)) (! (= (x ?x_3py363 4294967296) (and_1 ?x_3py363 4294967295)) :pattern ((x ?x_3py363 4294967296) (and_1 ?x_3py363 4294967295)) )) :named A1_555))
(assert (! (forall ((?x_3py364 Int)) (! (= (x ?x_3py364 4398046511104) (and_1 ?x_3py364 4398046511103)) :pattern ((x ?x_3py364 4398046511104) (and_1 ?x_3py364 4398046511103)) )) :named A1_556))
(assert (! (forall ((?x_3py365 Int)) (! (= (x ?x_3py365 4503599627370496) (and_1 ?x_3py365 4503599627370495)) :pattern ((x ?x_3py365 4503599627370496) (and_1 ?x_3py365 4503599627370495)) )) :named A1_557))
(assert (! (forall ((?x_3py366 Int)) (! (= (x ?x_3py366 4611686018427387904) (and_1 ?x_3py366 4611686018427387903)) :pattern ((x ?x_3py366 4611686018427387904) (and_1 ?x_3py366 4611686018427387903)) )) :named A1_558))
(assert (! (forall ((?x_3py367 Int)) (! (= (x ?x_3py367 512) (and_1 ?x_3py367 511)) :pattern ((x ?x_3py367 512) (and_1 ?x_3py367 511)) )) :named A1_559))
(assert (! (forall ((?x_3py368 Int)) (! (= (x ?x_3py368 524288) (and_1 ?x_3py368 524287)) :pattern ((x ?x_3py368 524288) (and_1 ?x_3py368 524287)) )) :named A1_560))
(assert (! (forall ((?x_3py369 Int)) (! (= (x ?x_3py369 536870912) (and_1 ?x_3py369 536870911)) :pattern ((x ?x_3py369 536870912) (and_1 ?x_3py369 536870911)) )) :named A1_561))
(assert (! (forall ((?x_3py370 Int)) (! (= (x ?x_3py370 549755813888) (and_1 ?x_3py370 549755813887)) :pattern ((x ?x_3py370 549755813888) (and_1 ?x_3py370 549755813887)) )) :named A1_562))
(assert (! (forall ((?x_3py371 Int)) (! (= (x ?x_3py371 562949953421312) (and_1 ?x_3py371 562949953421311)) :pattern ((x ?x_3py371 562949953421312) (and_1 ?x_3py371 562949953421311)) )) :named A1_563))
(assert (! (forall ((?x_3py372 Int)) (! (= (x ?x_3py372 576460752303423488) (and_1 ?x_3py372 576460752303423487)) :pattern ((x ?x_3py372 576460752303423488) (and_1 ?x_3py372 576460752303423487)) )) :named A1_564))
(assert (! (forall ((?x_3py373 Int)) (! (= (x ?x_3py373 64) (and_1 ?x_3py373 63)) :pattern ((x ?x_3py373 64) (and_1 ?x_3py373 63)) )) :named A1_565))
(assert (! (forall ((?x_3py374 Int)) (! (= (x ?x_3py374 65536) (and_1 ?x_3py374 65535)) :pattern ((x ?x_3py374 65536) (and_1 ?x_3py374 65535)) )) :named A1_566))
(assert (! (forall ((?x_3py375 Int)) (! (= (x ?x_3py375 67108864) (and_1 ?x_3py375 67108863)) :pattern ((x ?x_3py375 67108864) (and_1 ?x_3py375 67108863)) )) :named A1_567))
(assert (! (forall ((?x_3py376 Int)) (! (= (x ?x_3py376 68719476736) (and_1 ?x_3py376 68719476735)) :pattern ((x ?x_3py376 68719476736) (and_1 ?x_3py376 68719476735)) )) :named A1_568))
(assert (! (forall ((?x_3py377 Int)) (! (= (x ?x_3py377 70368744177664) (and_1 ?x_3py377 70368744177663)) :pattern ((x ?x_3py377 70368744177664) (and_1 ?x_3py377 70368744177663)) )) :named A1_569))
(assert (! (forall ((?x_3py378 Int)) (! (= (x ?x_3py378 72057594037927936) (and_1 ?x_3py378 72057594037927935)) :pattern ((x ?x_3py378 72057594037927936) (and_1 ?x_3py378 72057594037927935)) )) :named A1_570))
(assert (! (forall ((?x_3py379 Int)) (! (= (x ?x_3py379 8) (and_1 ?x_3py379 7)) :pattern ((x ?x_3py379 8) (and_1 ?x_3py379 7)) )) :named A1_571))
(assert (! (forall ((?x_3py380 Int)) (! (= (x ?x_3py380 8192) (and_1 ?x_3py380 8191)) :pattern ((x ?x_3py380 8192) (and_1 ?x_3py380 8191)) )) :named A1_572))
(assert (! (forall ((?x_3py381 Int)) (! (= (x ?x_3py381 8388608) (and_1 ?x_3py381 8388607)) :pattern ((x ?x_3py381 8388608) (and_1 ?x_3py381 8388607)) )) :named A1_573))
(assert (! (forall ((?x_3py382 Int)) (! (= (x ?x_3py382 8589934592) (and_1 ?x_3py382 8589934591)) :pattern ((x ?x_3py382 8589934592) (and_1 ?x_3py382 8589934591)) )) :named A1_574))
(assert (! (forall ((?x_3py383 Int)) (! (= (x ?x_3py383 8796093022208) (and_1 ?x_3py383 8796093022207)) :pattern ((x ?x_3py383 8796093022208) (and_1 ?x_3py383 8796093022207)) )) :named A1_575))
(assert (! (forall ((?x_3py384 Int)) (! (= (x ?x_3py384 9007199254740992) (and_1 ?x_3py384 9007199254740991)) :pattern ((x ?x_3py384 9007199254740992) (and_1 ?x_3py384 9007199254740991)) )) :named A1_576))
(assert (! (forall ((?x_3py385 Int)) (! (= (x ?x_3py385 9223372036854775808) (and_1 ?x_3py385 9223372036854775807)) :pattern ((x ?x_3py385 9223372036854775808) (and_1 ?x_3py385 9223372036854775807)) )) :named A1_577))
(assert (! (forall ((?x_3py386 Int)) (! (= (xor_1 ?x_3py386 (not_1 0)) (not_1 ?x_3py386)) :pattern ((xor_1 ?x_3py386 (not_1 0))) )) :named A1_578))
(assert (! (forall ((?x_3py387 Int)) (! (= (xor_1 ?x_3py387 0) ?x_3py387) :pattern ((xor_1 ?x_3py387 0)) )) :named A1_579))
(assert (! (forall ((?x_3py388 Int)) (! (= (xor_1 ?x_3py388 ?x_3py388) 0) :pattern ((xor_1 ?x_3py388 ?x_3py388)) )) :named A1_580))
(assert (! (forall ((?x_3py389 Int)) (! (and (<= min_i1 (conv_i4_to_i1 ?x_3py389)) (<= (conv_i4_to_i1 ?x_3py389) max_i1)) :pattern ((conv_i4_to_i1 ?x_3py389)) )) :named A1_581))
(assert (! (forall ((?x_3py390 Int)) (! (and (<= min_i1 (conv_i8_to_i1 ?x_3py390)) (<= (conv_i8_to_i1 ?x_3py390) max_i1)) :pattern ((conv_i8_to_i1 ?x_3py390)) )) :named A1_582))
(assert (! (forall ((?x_3py391 Int)) (! (and (<= min_i1 (conv_u4_to_i1 ?x_3py391)) (<= (conv_u4_to_i1 ?x_3py391) max_i1)) :pattern ((conv_u4_to_i1 ?x_3py391)) )) :named A1_583))
(assert (! (forall ((?x_3py392 Int)) (! (and (<= min_i1 (conv_u8_to_i1 ?x_3py392)) (<= (conv_u8_to_i1 ?x_3py392) max_i1)) :pattern ((conv_u8_to_i1 ?x_3py392)) )) :named A1_584))
(assert (! (forall ((?x_3py393 Int)) (! (and (<= min_i2 (conv_i4_to_i2 ?x_3py393)) (<= (conv_i4_to_i2 ?x_3py393) max_i2)) :pattern ((conv_i4_to_i2 ?x_3py393)) )) :named A1_585))
(assert (! (forall ((?x_3py394 Int)) (! (and (<= min_i2 (conv_i8_to_i2 ?x_3py394)) (<= (conv_i8_to_i2 ?x_3py394) max_i2)) :pattern ((conv_i8_to_i2 ?x_3py394)) )) :named A1_586))
(assert (! (forall ((?x_3py395 Int)) (! (and (<= min_i2 (conv_u4_to_i2 ?x_3py395)) (<= (conv_u4_to_i2 ?x_3py395) max_i2)) :pattern ((conv_u4_to_i2 ?x_3py395)) )) :named A1_587))
(assert (! (forall ((?x_3py396 Int)) (! (and (<= min_i2 (conv_u8_to_i2 ?x_3py396)) (<= (conv_u8_to_i2 ?x_3py396) max_i2)) :pattern ((conv_u8_to_i2 ?x_3py396)) )) :named A1_588))
(assert (! (forall ((?x_3py397 Int)) (! (and (<= min_i4 (conv_i4_to_i4 ?x_3py397)) (<= (conv_i4_to_i4 ?x_3py397) max_i4)) :pattern ((conv_i4_to_i4 ?x_3py397)) )) :named A1_589))
(assert (! (forall ((?x_3py398 Int)) (! (and (<= min_i4 (conv_i8_to_i4 ?x_3py398)) (<= (conv_i8_to_i4 ?x_3py398) max_i4)) :pattern ((conv_i8_to_i4 ?x_3py398)) )) :named A1_590))
(assert (! (forall ((?x_3py399 Int)) (! (and (<= min_i4 (conv_u4_to_i4 ?x_3py399)) (<= (conv_u4_to_i4 ?x_3py399) max_i4)) :pattern ((conv_u4_to_i4 ?x_3py399)) )) :named A1_591))
(assert (! (forall ((?x_3py400 Int)) (! (and (<= min_i4 (conv_u8_to_i4 ?x_3py400)) (<= (conv_u8_to_i4 ?x_3py400) max_i4)) :pattern ((conv_u8_to_i4 ?x_3py400)) )) :named A1_592))
(assert (! (forall ((?x_3py401 Int)) (! (and (<= min_i8 (conv_i4_to_i8 ?x_3py401)) (<= (conv_i4_to_i8 ?x_3py401) max_i8)) :pattern ((conv_i4_to_i8 ?x_3py401)) )) :named A1_593))
(assert (! (forall ((?x_3py402 Int)) (! (and (<= min_i8 (conv_i8_to_i8 ?x_3py402)) (<= (conv_i8_to_i8 ?x_3py402) max_i8)) :pattern ((conv_i8_to_i8 ?x_3py402)) )) :named A1_594))
(assert (! (forall ((?x_3py403 Int)) (! (and (<= min_i8 (conv_u4_to_i8 ?x_3py403)) (<= (conv_u4_to_i8 ?x_3py403) max_i8)) :pattern ((conv_u4_to_i8 ?x_3py403)) )) :named A1_595))
(assert (! (forall ((?x_3py404 Int)) (! (and (<= min_i8 (conv_u8_to_i8 ?x_3py404)) (<= (conv_u8_to_i8 ?x_3py404) max_i8)) :pattern ((conv_u8_to_i8 ?x_3py404)) )) :named A1_596))
(assert (! (forall ((?x_3py405 Int)) (! (and (<= min_u1 (conv_i4_to_u1 ?x_3py405)) (<= (conv_i4_to_u1 ?x_3py405) max_u1)) :pattern ((conv_i4_to_u1 ?x_3py405)) )) :named A1_597))
(assert (! (forall ((?x_3py406 Int)) (! (and (<= min_u1 (conv_i8_to_u1 ?x_3py406)) (<= (conv_i8_to_u1 ?x_3py406) max_u1)) :pattern ((conv_i8_to_u1 ?x_3py406)) )) :named A1_598))
(assert (! (forall ((?x_3py407 Int)) (! (and (<= min_u1 (conv_u4_to_u1 ?x_3py407)) (<= (conv_u4_to_u1 ?x_3py407) max_u1)) :pattern ((conv_u4_to_u1 ?x_3py407)) )) :named A1_599))
(assert (! (forall ((?x_3py408 Int)) (! (and (<= min_u1 (conv_u8_to_u1 ?x_3py408)) (<= (conv_u8_to_u1 ?x_3py408) max_u1)) :pattern ((conv_u8_to_u1 ?x_3py408)) )) :named A1_600))
(assert (! (forall ((?x_3py409 Int)) (! (and (<= min_u2 (conv_i4_to_u2 ?x_3py409)) (<= (conv_i4_to_u2 ?x_3py409) max_u2)) :pattern ((conv_i4_to_u2 ?x_3py409)) )) :named A1_601))
(assert (! (forall ((?x_3py410 Int)) (! (and (<= min_u2 (conv_i8_to_u2 ?x_3py410)) (<= (conv_i8_to_u2 ?x_3py410) max_u2)) :pattern ((conv_i8_to_u2 ?x_3py410)) )) :named A1_602))
(assert (! (forall ((?x_3py411 Int)) (! (and (<= min_u2 (conv_u4_to_u2 ?x_3py411)) (<= (conv_u4_to_u2 ?x_3py411) max_u2)) :pattern ((conv_u4_to_u2 ?x_3py411)) )) :named A1_603))
(assert (! (forall ((?x_3py412 Int)) (! (and (<= min_u2 (conv_u8_to_u2 ?x_3py412)) (<= (conv_u8_to_u2 ?x_3py412) max_u2)) :pattern ((conv_u8_to_u2 ?x_3py412)) )) :named A1_604))
(assert (! (forall ((?x_3py413 Int)) (! (and (<= min_u4 (conv_i4_to_u4 ?x_3py413)) (<= (conv_i4_to_u4 ?x_3py413) max_u4)) :pattern ((conv_i4_to_u4 ?x_3py413)) )) :named A1_605))
(assert (! (forall ((?x_3py414 Int)) (! (and (<= min_u4 (conv_i8_to_u4 ?x_3py414)) (<= (conv_i8_to_u4 ?x_3py414) max_u4)) :pattern ((conv_i8_to_u4 ?x_3py414)) )) :named A1_606))
(assert (! (forall ((?x_3py415 Int)) (! (and (<= min_u4 (conv_u4_to_u4 ?x_3py415)) (<= (conv_u4_to_u4 ?x_3py415) max_u4)) :pattern ((conv_u4_to_u4 ?x_3py415)) )) :named A1_607))
(assert (! (forall ((?x_3py416 Int)) (! (and (<= min_u4 (conv_u8_to_u4 ?x_3py416)) (<= (conv_u8_to_u4 ?x_3py416) max_u4)) :pattern ((conv_u8_to_u4 ?x_3py416)) )) :named A1_608))
(assert (! (forall ((?x_3py417 Int)) (! (and (<= min_u8 (conv_i4_to_u8 ?x_3py417)) (<= (conv_i4_to_u8 ?x_3py417) max_u8)) :pattern ((conv_i4_to_u8 ?x_3py417)) )) :named A1_609))
(assert (! (forall ((?x_3py418 Int)) (! (and (<= min_u8 (conv_i8_to_u8 ?x_3py418)) (<= (conv_i8_to_u8 ?x_3py418) max_u8)) :pattern ((conv_i8_to_u8 ?x_3py418)) )) :named A1_610))
(assert (! (forall ((?x_3py419 Int)) (! (and (<= min_u8 (conv_u4_to_u8 ?x_3py419)) (<= (conv_u4_to_u8 ?x_3py419) max_u8)) :pattern ((conv_u4_to_u8 ?x_3py419)) )) :named A1_611))
(assert (! (forall ((?x_3py420 Int)) (! (and (<= min_u8 (conv_u8_to_u8 ?x_3py420)) (<= (conv_u8_to_u8 ?x_3py420) max_u8)) :pattern ((conv_u8_to_u8 ?x_3py420)) )) :named A1_612))
(assert (! (forall ((?x_3py421 Int)) (! (or (= (sign_extend_10_32 (bv_extract ?x_3py421 32 0 10)) ?x_3py421) (not (<= (- 512) ?x_3py421)) (<= 512 ?x_3py421)) :pattern ((sign_extend_10_32 (bv_extract ?x_3py421 32 0 10))) )) :named A1_613))
(assert (! (forall ((?x_3py422 Int)) (! (or (= (sign_extend_10_64 (bv_extract ?x_3py422 64 0 10)) ?x_3py422) (not (<= (- 512) ?x_3py422)) (<= 512 ?x_3py422)) :pattern ((sign_extend_10_64 (bv_extract ?x_3py422 64 0 10))) )) :named A1_614))
(assert (! (forall ((?x_3py423 Int)) (! (or (= (sign_extend_11_32 (bv_extract ?x_3py423 32 0 11)) ?x_3py423) (not (<= (- 1024) ?x_3py423)) (<= 1024 ?x_3py423)) :pattern ((sign_extend_11_32 (bv_extract ?x_3py423 32 0 11))) )) :named A1_615))
(assert (! (forall ((?x_3py424 Int)) (! (or (= (sign_extend_11_64 (bv_extract ?x_3py424 64 0 11)) ?x_3py424) (not (<= (- 1024) ?x_3py424)) (<= 1024 ?x_3py424)) :pattern ((sign_extend_11_64 (bv_extract ?x_3py424 64 0 11))) )) :named A1_616))
(assert (! (forall ((?x_3py425 Int)) (! (or (= (sign_extend_12_32 (bv_extract ?x_3py425 32 0 12)) ?x_3py425) (not (<= (- 2048) ?x_3py425)) (<= 2048 ?x_3py425)) :pattern ((sign_extend_12_32 (bv_extract ?x_3py425 32 0 12))) )) :named A1_617))
(assert (! (forall ((?x_3py426 Int)) (! (or (= (sign_extend_12_64 (bv_extract ?x_3py426 64 0 12)) ?x_3py426) (not (<= (- 2048) ?x_3py426)) (<= 2048 ?x_3py426)) :pattern ((sign_extend_12_64 (bv_extract ?x_3py426 64 0 12))) )) :named A1_618))
(assert (! (forall ((?x_3py427 Int)) (! (or (= (sign_extend_13_32 (bv_extract ?x_3py427 32 0 13)) ?x_3py427) (<= 4096 ?x_3py427) (not (<= (- 4096) ?x_3py427))) :pattern ((sign_extend_13_32 (bv_extract ?x_3py427 32 0 13))) )) :named A1_619))
(assert (! (forall ((?x_3py428 Int)) (! (or (= (sign_extend_13_64 (bv_extract ?x_3py428 64 0 13)) ?x_3py428) (<= 4096 ?x_3py428) (not (<= (- 4096) ?x_3py428))) :pattern ((sign_extend_13_64 (bv_extract ?x_3py428 64 0 13))) )) :named A1_620))
(assert (! (forall ((?x_3py429 Int)) (! (or (= (sign_extend_14_32 (bv_extract ?x_3py429 32 0 14)) ?x_3py429) (not (<= (- 8192) ?x_3py429)) (<= 8192 ?x_3py429)) :pattern ((sign_extend_14_32 (bv_extract ?x_3py429 32 0 14))) )) :named A1_621))
(assert (! (forall ((?x_3py430 Int)) (! (or (= (sign_extend_14_64 (bv_extract ?x_3py430 64 0 14)) ?x_3py430) (not (<= (- 8192) ?x_3py430)) (<= 8192 ?x_3py430)) :pattern ((sign_extend_14_64 (bv_extract ?x_3py430 64 0 14))) )) :named A1_622))
(assert (! (forall ((?x_3py431 Int)) (! (or (= (sign_extend_15_32 (bv_extract ?x_3py431 32 0 15)) ?x_3py431) (not (<= (- 16384) ?x_3py431)) (<= 16384 ?x_3py431)) :pattern ((sign_extend_15_32 (bv_extract ?x_3py431 32 0 15))) )) :named A1_623))
(assert (! (forall ((?x_3py432 Int)) (! (or (= (sign_extend_15_64 (bv_extract ?x_3py432 64 0 15)) ?x_3py432) (not (<= (- 16384) ?x_3py432)) (<= 16384 ?x_3py432)) :pattern ((sign_extend_15_64 (bv_extract ?x_3py432 64 0 15))) )) :named A1_624))
(assert (! (forall ((?x_3py433 Int)) (! (or (= (sign_extend_16_32 (bv_extract ?x_3py433 32 0 16)) ?x_3py433) (<= 32768 ?x_3py433) (not (<= (- 32768) ?x_3py433))) :pattern ((sign_extend_16_32 (bv_extract ?x_3py433 32 0 16))) )) :named A1_625))
(assert (! (forall ((?x_3py434 Int)) (! (or (= (sign_extend_16_64 (bv_extract ?x_3py434 64 0 16)) ?x_3py434) (<= 32768 ?x_3py434) (not (<= (- 32768) ?x_3py434))) :pattern ((sign_extend_16_64 (bv_extract ?x_3py434 64 0 16))) )) :named A1_626))
(assert (! (forall ((?x_3py435 Int)) (! (or (= (sign_extend_17_32 (bv_extract ?x_3py435 32 0 17)) ?x_3py435) (not (<= (- 65536) ?x_3py435)) (<= 65536 ?x_3py435)) :pattern ((sign_extend_17_32 (bv_extract ?x_3py435 32 0 17))) )) :named A1_627))
(assert (! (forall ((?x_3py436 Int)) (! (or (= (sign_extend_17_64 (bv_extract ?x_3py436 64 0 17)) ?x_3py436) (not (<= (- 65536) ?x_3py436)) (<= 65536 ?x_3py436)) :pattern ((sign_extend_17_64 (bv_extract ?x_3py436 64 0 17))) )) :named A1_628))
(assert (! (forall ((?x_3py437 Int)) (! (or (= (sign_extend_18_32 (bv_extract ?x_3py437 32 0 18)) ?x_3py437) (<= 131072 ?x_3py437) (not (<= (- 131072) ?x_3py437))) :pattern ((sign_extend_18_32 (bv_extract ?x_3py437 32 0 18))) )) :named A1_629))
(assert (! (forall ((?x_3py438 Int)) (! (or (= (sign_extend_18_64 (bv_extract ?x_3py438 64 0 18)) ?x_3py438) (<= 131072 ?x_3py438) (not (<= (- 131072) ?x_3py438))) :pattern ((sign_extend_18_64 (bv_extract ?x_3py438 64 0 18))) )) :named A1_630))
(assert (! (forall ((?x_3py439 Int)) (! (or (= (sign_extend_19_32 (bv_extract ?x_3py439 32 0 19)) ?x_3py439) (not (<= (- 262144) ?x_3py439)) (<= 262144 ?x_3py439)) :pattern ((sign_extend_19_32 (bv_extract ?x_3py439 32 0 19))) )) :named A1_631))
(assert (! (forall ((?x_3py440 Int)) (! (or (= (sign_extend_19_64 (bv_extract ?x_3py440 64 0 19)) ?x_3py440) (not (<= (- 262144) ?x_3py440)) (<= 262144 ?x_3py440)) :pattern ((sign_extend_19_64 (bv_extract ?x_3py440 64 0 19))) )) :named A1_632))
(assert (! (forall ((?x_3py441 Int)) (! (or (= (sign_extend_1_32 (bv_extract ?x_3py441 32 0 1)) ?x_3py441) (<= 1 ?x_3py441) (not (<= (- 1) ?x_3py441))) :pattern ((sign_extend_1_32 (bv_extract ?x_3py441 32 0 1))) )) :named A1_633))
(assert (! (forall ((?x_3py442 Int)) (! (or (= (sign_extend_1_64 (bv_extract ?x_3py442 64 0 1)) ?x_3py442) (<= 1 ?x_3py442) (not (<= (- 1) ?x_3py442))) :pattern ((sign_extend_1_64 (bv_extract ?x_3py442 64 0 1))) )) :named A1_634))
(assert (! (forall ((?x_3py443 Int)) (! (or (= (sign_extend_20_32 (bv_extract ?x_3py443 32 0 20)) ?x_3py443) (<= 524288 ?x_3py443) (not (<= (- 524288) ?x_3py443))) :pattern ((sign_extend_20_32 (bv_extract ?x_3py443 32 0 20))) )) :named A1_635))
(assert (! (forall ((?x_3py444 Int)) (! (or (= (sign_extend_20_64 (bv_extract ?x_3py444 64 0 20)) ?x_3py444) (<= 524288 ?x_3py444) (not (<= (- 524288) ?x_3py444))) :pattern ((sign_extend_20_64 (bv_extract ?x_3py444 64 0 20))) )) :named A1_636))
(assert (! (forall ((?x_3py445 Int)) (! (or (= (sign_extend_21_32 (bv_extract ?x_3py445 32 0 21)) ?x_3py445) (not (<= (- 1048576) ?x_3py445)) (<= 1048576 ?x_3py445)) :pattern ((sign_extend_21_32 (bv_extract ?x_3py445 32 0 21))) )) :named A1_637))
(assert (! (forall ((?x_3py446 Int)) (! (or (= (sign_extend_21_64 (bv_extract ?x_3py446 64 0 21)) ?x_3py446) (not (<= (- 1048576) ?x_3py446)) (<= 1048576 ?x_3py446)) :pattern ((sign_extend_21_64 (bv_extract ?x_3py446 64 0 21))) )) :named A1_638))
(assert (! (forall ((?x_3py447 Int)) (! (or (= (sign_extend_22_32 (bv_extract ?x_3py447 32 0 22)) ?x_3py447) (<= 2097152 ?x_3py447) (not (<= (- 2097152) ?x_3py447))) :pattern ((sign_extend_22_32 (bv_extract ?x_3py447 32 0 22))) )) :named A1_639))
(assert (! (forall ((?x_3py448 Int)) (! (or (= (sign_extend_22_64 (bv_extract ?x_3py448 64 0 22)) ?x_3py448) (<= 2097152 ?x_3py448) (not (<= (- 2097152) ?x_3py448))) :pattern ((sign_extend_22_64 (bv_extract ?x_3py448 64 0 22))) )) :named A1_640))
(assert (! (forall ((?x_3py449 Int)) (! (or (= (sign_extend_23_32 (bv_extract ?x_3py449 32 0 23)) ?x_3py449) (not (<= (- 4194304) ?x_3py449)) (<= 4194304 ?x_3py449)) :pattern ((sign_extend_23_32 (bv_extract ?x_3py449 32 0 23))) )) :named A1_641))
(assert (! (forall ((?x_3py450 Int)) (! (or (= (sign_extend_23_64 (bv_extract ?x_3py450 64 0 23)) ?x_3py450) (not (<= (- 4194304) ?x_3py450)) (<= 4194304 ?x_3py450)) :pattern ((sign_extend_23_64 (bv_extract ?x_3py450 64 0 23))) )) :named A1_642))
(assert (! (forall ((?x_3py451 Int)) (! (or (= (sign_extend_24_32 (bv_extract ?x_3py451 32 0 24)) ?x_3py451) (not (<= (- 8388608) ?x_3py451)) (<= 8388608 ?x_3py451)) :pattern ((sign_extend_24_32 (bv_extract ?x_3py451 32 0 24))) )) :named A1_643))
(assert (! (forall ((?x_3py452 Int)) (! (or (= (sign_extend_24_64 (bv_extract ?x_3py452 64 0 24)) ?x_3py452) (not (<= (- 8388608) ?x_3py452)) (<= 8388608 ?x_3py452)) :pattern ((sign_extend_24_64 (bv_extract ?x_3py452 64 0 24))) )) :named A1_644))
(assert (! (forall ((?x_3py453 Int)) (! (or (= (sign_extend_25_32 (bv_extract ?x_3py453 32 0 25)) ?x_3py453) (not (<= (- 16777216) ?x_3py453)) (<= 16777216 ?x_3py453)) :pattern ((sign_extend_25_32 (bv_extract ?x_3py453 32 0 25))) )) :named A1_645))
(assert (! (forall ((?x_3py454 Int)) (! (or (= (sign_extend_25_64 (bv_extract ?x_3py454 64 0 25)) ?x_3py454) (not (<= (- 16777216) ?x_3py454)) (<= 16777216 ?x_3py454)) :pattern ((sign_extend_25_64 (bv_extract ?x_3py454 64 0 25))) )) :named A1_646))
(assert (! (forall ((?x_3py455 Int)) (! (or (= (sign_extend_26_32 (bv_extract ?x_3py455 32 0 26)) ?x_3py455) (not (<= (- 33554432) ?x_3py455)) (<= 33554432 ?x_3py455)) :pattern ((sign_extend_26_32 (bv_extract ?x_3py455 32 0 26))) )) :named A1_647))
(assert (! (forall ((?x_3py456 Int)) (! (or (= (sign_extend_26_64 (bv_extract ?x_3py456 64 0 26)) ?x_3py456) (not (<= (- 33554432) ?x_3py456)) (<= 33554432 ?x_3py456)) :pattern ((sign_extend_26_64 (bv_extract ?x_3py456 64 0 26))) )) :named A1_648))
(assert (! (forall ((?x_3py457 Int)) (! (or (= (sign_extend_27_32 (bv_extract ?x_3py457 32 0 27)) ?x_3py457) (<= 67108864 ?x_3py457) (not (<= (- 67108864) ?x_3py457))) :pattern ((sign_extend_27_32 (bv_extract ?x_3py457 32 0 27))) )) :named A1_649))
(assert (! (forall ((?x_3py458 Int)) (! (or (= (sign_extend_27_64 (bv_extract ?x_3py458 64 0 27)) ?x_3py458) (<= 67108864 ?x_3py458) (not (<= (- 67108864) ?x_3py458))) :pattern ((sign_extend_27_64 (bv_extract ?x_3py458 64 0 27))) )) :named A1_650))
(assert (! (forall ((?x_3py459 Int)) (! (or (= (sign_extend_28_32 (bv_extract ?x_3py459 32 0 28)) ?x_3py459) (<= 134217728 ?x_3py459) (not (<= (- 134217728) ?x_3py459))) :pattern ((sign_extend_28_32 (bv_extract ?x_3py459 32 0 28))) )) :named A1_651))
(assert (! (forall ((?x_3py460 Int)) (! (or (= (sign_extend_28_64 (bv_extract ?x_3py460 64 0 28)) ?x_3py460) (<= 134217728 ?x_3py460) (not (<= (- 134217728) ?x_3py460))) :pattern ((sign_extend_28_64 (bv_extract ?x_3py460 64 0 28))) )) :named A1_652))
(assert (! (forall ((?x_3py461 Int)) (! (or (= (sign_extend_29_32 (bv_extract ?x_3py461 32 0 29)) ?x_3py461) (<= 268435456 ?x_3py461) (not (<= (- 268435456) ?x_3py461))) :pattern ((sign_extend_29_32 (bv_extract ?x_3py461 32 0 29))) )) :named A1_653))
(assert (! (forall ((?x_3py462 Int)) (! (or (= (sign_extend_29_64 (bv_extract ?x_3py462 64 0 29)) ?x_3py462) (<= 268435456 ?x_3py462) (not (<= (- 268435456) ?x_3py462))) :pattern ((sign_extend_29_64 (bv_extract ?x_3py462 64 0 29))) )) :named A1_654))
(assert (! (forall ((?x_3py463 Int)) (! (or (= (sign_extend_2_32 (bv_extract ?x_3py463 32 0 2)) ?x_3py463) (<= 2 ?x_3py463) (not (<= (- 2) ?x_3py463))) :pattern ((sign_extend_2_32 (bv_extract ?x_3py463 32 0 2))) )) :named A1_655))
(assert (! (forall ((?x_3py464 Int)) (! (or (= (sign_extend_2_64 (bv_extract ?x_3py464 64 0 2)) ?x_3py464) (<= 2 ?x_3py464) (not (<= (- 2) ?x_3py464))) :pattern ((sign_extend_2_64 (bv_extract ?x_3py464 64 0 2))) )) :named A1_656))
(assert (! (forall ((?x_3py465 Int)) (! (or (= (sign_extend_30_32 (bv_extract ?x_3py465 32 0 30)) ?x_3py465) (not (<= (- 536870912) ?x_3py465)) (<= 536870912 ?x_3py465)) :pattern ((sign_extend_30_32 (bv_extract ?x_3py465 32 0 30))) )) :named A1_657))
(assert (! (forall ((?x_3py466 Int)) (! (or (= (sign_extend_30_64 (bv_extract ?x_3py466 64 0 30)) ?x_3py466) (not (<= (- 536870912) ?x_3py466)) (<= 536870912 ?x_3py466)) :pattern ((sign_extend_30_64 (bv_extract ?x_3py466 64 0 30))) )) :named A1_658))
(assert (! (forall ((?x_3py467 Int)) (! (or (= (sign_extend_31_32 (bv_extract ?x_3py467 32 0 31)) ?x_3py467) (not (<= (- 1073741824) ?x_3py467)) (<= 1073741824 ?x_3py467)) :pattern ((sign_extend_31_32 (bv_extract ?x_3py467 32 0 31))) )) :named A1_659))
(assert (! (forall ((?x_3py468 Int)) (! (or (= (sign_extend_31_64 (bv_extract ?x_3py468 64 0 31)) ?x_3py468) (not (<= (- 1073741824) ?x_3py468)) (<= 1073741824 ?x_3py468)) :pattern ((sign_extend_31_64 (bv_extract ?x_3py468 64 0 31))) )) :named A1_660))
(assert (! (forall ((?x_3py469 Int)) (! (or (= (sign_extend_32_32 (bv_extract ?x_3py469 32 0 32)) ?x_3py469) (<= 2147483648 ?x_3py469) (not (<= (- 2147483648) ?x_3py469))) :pattern ((sign_extend_32_32 (bv_extract ?x_3py469 32 0 32))) )) :named A1_661))
(assert (! (forall ((?x_3py470 Int)) (! (or (= (sign_extend_32_64 (bv_extract ?x_3py470 64 0 32)) ?x_3py470) (<= 2147483648 ?x_3py470) (not (<= (- 2147483648) ?x_3py470))) :pattern ((sign_extend_32_64 (bv_extract ?x_3py470 64 0 32))) )) :named A1_662))
(assert (! (forall ((?x_3py471 Int)) (! (or (= (sign_extend_33_64 (bv_extract ?x_3py471 64 0 33)) ?x_3py471) (not (<= (- 4294967296) ?x_3py471)) (<= 4294967296 ?x_3py471)) :pattern ((sign_extend_33_64 (bv_extract ?x_3py471 64 0 33))) )) :named A1_663))
(assert (! (forall ((?x_3py472 Int)) (! (or (= (sign_extend_34_64 (bv_extract ?x_3py472 64 0 34)) ?x_3py472) (<= 8589934592 ?x_3py472) (not (<= (- 8589934592) ?x_3py472))) :pattern ((sign_extend_34_64 (bv_extract ?x_3py472 64 0 34))) )) :named A1_664))
(assert (! (forall ((?x_3py473 Int)) (! (or (= (sign_extend_35_64 (bv_extract ?x_3py473 64 0 35)) ?x_3py473) (not (<= (- 17179869184) ?x_3py473)) (<= 17179869184 ?x_3py473)) :pattern ((sign_extend_35_64 (bv_extract ?x_3py473 64 0 35))) )) :named A1_665))
(assert (! (forall ((?x_3py474 Int)) (! (or (= (sign_extend_36_64 (bv_extract ?x_3py474 64 0 36)) ?x_3py474) (not (<= (- 34359738368) ?x_3py474)) (<= 34359738368 ?x_3py474)) :pattern ((sign_extend_36_64 (bv_extract ?x_3py474 64 0 36))) )) :named A1_666))
(assert (! (forall ((?x_3py475 Int)) (! (or (= (sign_extend_37_64 (bv_extract ?x_3py475 64 0 37)) ?x_3py475) (not (<= (- 68719476736) ?x_3py475)) (<= 68719476736 ?x_3py475)) :pattern ((sign_extend_37_64 (bv_extract ?x_3py475 64 0 37))) )) :named A1_667))
(assert (! (forall ((?x_3py476 Int)) (! (or (= (sign_extend_38_64 (bv_extract ?x_3py476 64 0 38)) ?x_3py476) (not (<= (- 137438953472) ?x_3py476)) (<= 137438953472 ?x_3py476)) :pattern ((sign_extend_38_64 (bv_extract ?x_3py476 64 0 38))) )) :named A1_668))
(assert (! (forall ((?x_3py477 Int)) (! (or (= (sign_extend_39_64 (bv_extract ?x_3py477 64 0 39)) ?x_3py477) (<= 274877906944 ?x_3py477) (not (<= (- 274877906944) ?x_3py477))) :pattern ((sign_extend_39_64 (bv_extract ?x_3py477 64 0 39))) )) :named A1_669))
(assert (! (forall ((?x_3py478 Int)) (! (or (= (sign_extend_3_32 (bv_extract ?x_3py478 32 0 3)) ?x_3py478) (<= 4 ?x_3py478) (not (<= (- 4) ?x_3py478))) :pattern ((sign_extend_3_32 (bv_extract ?x_3py478 32 0 3))) )) :named A1_670))
(assert (! (forall ((?x_3py479 Int)) (! (or (= (sign_extend_3_64 (bv_extract ?x_3py479 64 0 3)) ?x_3py479) (<= 4 ?x_3py479) (not (<= (- 4) ?x_3py479))) :pattern ((sign_extend_3_64 (bv_extract ?x_3py479 64 0 3))) )) :named A1_671))
(assert (! (forall ((?x_3py480 Int)) (! (or (= (sign_extend_40_64 (bv_extract ?x_3py480 64 0 40)) ?x_3py480) (not (<= (- 549755813888) ?x_3py480)) (<= 549755813888 ?x_3py480)) :pattern ((sign_extend_40_64 (bv_extract ?x_3py480 64 0 40))) )) :named A1_672))
(assert (! (forall ((?x_3py481 Int)) (! (or (= (sign_extend_41_64 (bv_extract ?x_3py481 64 0 41)) ?x_3py481) (not (<= (- 1099511627776) ?x_3py481)) (<= 1099511627776 ?x_3py481)) :pattern ((sign_extend_41_64 (bv_extract ?x_3py481 64 0 41))) )) :named A1_673))
(assert (! (forall ((?x_3py482 Int)) (! (or (= (sign_extend_42_64 (bv_extract ?x_3py482 64 0 42)) ?x_3py482) (<= 2199023255552 ?x_3py482) (not (<= (- 2199023255552) ?x_3py482))) :pattern ((sign_extend_42_64 (bv_extract ?x_3py482 64 0 42))) )) :named A1_674))
(assert (! (forall ((?x_3py483 Int)) (! (or (= (sign_extend_43_64 (bv_extract ?x_3py483 64 0 43)) ?x_3py483) (not (<= (- 4398046511104) ?x_3py483)) (<= 4398046511104 ?x_3py483)) :pattern ((sign_extend_43_64 (bv_extract ?x_3py483 64 0 43))) )) :named A1_675))
(assert (! (forall ((?x_3py484 Int)) (! (or (= (sign_extend_44_64 (bv_extract ?x_3py484 64 0 44)) ?x_3py484) (not (<= (- 8796093022208) ?x_3py484)) (<= 8796093022208 ?x_3py484)) :pattern ((sign_extend_44_64 (bv_extract ?x_3py484 64 0 44))) )) :named A1_676))
(assert (! (forall ((?x_3py485 Int)) (! (or (= (sign_extend_45_64 (bv_extract ?x_3py485 64 0 45)) ?x_3py485) (not (<= (- 17592186044416) ?x_3py485)) (<= 17592186044416 ?x_3py485)) :pattern ((sign_extend_45_64 (bv_extract ?x_3py485 64 0 45))) )) :named A1_677))
(assert (! (forall ((?x_3py486 Int)) (! (or (= (sign_extend_46_64 (bv_extract ?x_3py486 64 0 46)) ?x_3py486) (not (<= (- 35184372088832) ?x_3py486)) (<= 35184372088832 ?x_3py486)) :pattern ((sign_extend_46_64 (bv_extract ?x_3py486 64 0 46))) )) :named A1_678))
(assert (! (forall ((?x_3py487 Int)) (! (or (= (sign_extend_47_64 (bv_extract ?x_3py487 64 0 47)) ?x_3py487) (not (<= (- 70368744177664) ?x_3py487)) (<= 70368744177664 ?x_3py487)) :pattern ((sign_extend_47_64 (bv_extract ?x_3py487 64 0 47))) )) :named A1_679))
(assert (! (forall ((?x_3py488 Int)) (! (or (= (sign_extend_48_64 (bv_extract ?x_3py488 64 0 48)) ?x_3py488) (not (<= (- 140737488355328) ?x_3py488)) (<= 140737488355328 ?x_3py488)) :pattern ((sign_extend_48_64 (bv_extract ?x_3py488 64 0 48))) )) :named A1_680))
(assert (! (forall ((?x_3py489 Int)) (! (or (= (sign_extend_49_64 (bv_extract ?x_3py489 64 0 49)) ?x_3py489) (<= 281474976710656 ?x_3py489) (not (<= (- 281474976710656) ?x_3py489))) :pattern ((sign_extend_49_64 (bv_extract ?x_3py489 64 0 49))) )) :named A1_681))
(assert (! (forall ((?x_3py490 Int)) (! (or (= (sign_extend_4_32 (bv_extract ?x_3py490 32 0 4)) ?x_3py490) (not (<= (- 8) ?x_3py490)) (<= 8 ?x_3py490)) :pattern ((sign_extend_4_32 (bv_extract ?x_3py490 32 0 4))) )) :named A1_682))
(assert (! (forall ((?x_3py491 Int)) (! (or (= (sign_extend_4_64 (bv_extract ?x_3py491 64 0 4)) ?x_3py491) (not (<= (- 8) ?x_3py491)) (<= 8 ?x_3py491)) :pattern ((sign_extend_4_64 (bv_extract ?x_3py491 64 0 4))) )) :named A1_683))
(assert (! (forall ((?x_3py492 Int)) (! (or (= (sign_extend_50_64 (bv_extract ?x_3py492 64 0 50)) ?x_3py492) (not (<= (- 562949953421312) ?x_3py492)) (<= 562949953421312 ?x_3py492)) :pattern ((sign_extend_50_64 (bv_extract ?x_3py492 64 0 50))) )) :named A1_684))
(assert (! (forall ((?x_3py493 Int)) (! (or (= (sign_extend_51_64 (bv_extract ?x_3py493 64 0 51)) ?x_3py493) (<= 1125899906842624 ?x_3py493) (not (<= (- 1125899906842624) ?x_3py493))) :pattern ((sign_extend_51_64 (bv_extract ?x_3py493 64 0 51))) )) :named A1_685))
(assert (! (forall ((?x_3py494 Int)) (! (or (= (sign_extend_52_64 (bv_extract ?x_3py494 64 0 52)) ?x_3py494) (not (<= (- 2251799813685248) ?x_3py494)) (<= 2251799813685248 ?x_3py494)) :pattern ((sign_extend_52_64 (bv_extract ?x_3py494 64 0 52))) )) :named A1_686))
(assert (! (forall ((?x_3py495 Int)) (! (or (= (sign_extend_53_64 (bv_extract ?x_3py495 64 0 53)) ?x_3py495) (<= 4503599627370496 ?x_3py495) (not (<= (- 4503599627370496) ?x_3py495))) :pattern ((sign_extend_53_64 (bv_extract ?x_3py495 64 0 53))) )) :named A1_687))
(assert (! (forall ((?x_3py496 Int)) (! (or (= (sign_extend_54_64 (bv_extract ?x_3py496 64 0 54)) ?x_3py496) (not (<= (- 9007199254740992) ?x_3py496)) (<= 9007199254740992 ?x_3py496)) :pattern ((sign_extend_54_64 (bv_extract ?x_3py496 64 0 54))) )) :named A1_688))
(assert (! (forall ((?x_3py497 Int)) (! (or (= (sign_extend_55_64 (bv_extract ?x_3py497 64 0 55)) ?x_3py497) (<= 18014398509481984 ?x_3py497) (not (<= (- 18014398509481984) ?x_3py497))) :pattern ((sign_extend_55_64 (bv_extract ?x_3py497 64 0 55))) )) :named A1_689))
(assert (! (forall ((?x_3py498 Int)) (! (or (= (sign_extend_56_64 (bv_extract ?x_3py498 64 0 56)) ?x_3py498) (not (<= (- 36028797018963968) ?x_3py498)) (<= 36028797018963968 ?x_3py498)) :pattern ((sign_extend_56_64 (bv_extract ?x_3py498 64 0 56))) )) :named A1_690))
(assert (! (forall ((?x_3py499 Int)) (! (or (= (sign_extend_57_64 (bv_extract ?x_3py499 64 0 57)) ?x_3py499) (not (<= (- 72057594037927936) ?x_3py499)) (<= 72057594037927936 ?x_3py499)) :pattern ((sign_extend_57_64 (bv_extract ?x_3py499 64 0 57))) )) :named A1_691))
(assert (! (forall ((?x_3py500 Int)) (! (or (= (sign_extend_58_64 (bv_extract ?x_3py500 64 0 58)) ?x_3py500) (<= 144115188075855872 ?x_3py500) (not (<= (- 144115188075855872) ?x_3py500))) :pattern ((sign_extend_58_64 (bv_extract ?x_3py500 64 0 58))) )) :named A1_692))
(assert (! (forall ((?x_3py501 Int)) (! (or (= (sign_extend_59_64 (bv_extract ?x_3py501 64 0 59)) ?x_3py501) (not (<= (- 288230376151711744) ?x_3py501)) (<= 288230376151711744 ?x_3py501)) :pattern ((sign_extend_59_64 (bv_extract ?x_3py501 64 0 59))) )) :named A1_693))
(assert (! (forall ((?x_3py502 Int)) (! (or (= (sign_extend_5_32 (bv_extract ?x_3py502 32 0 5)) ?x_3py502) (not (<= (- 16) ?x_3py502)) (<= 16 ?x_3py502)) :pattern ((sign_extend_5_32 (bv_extract ?x_3py502 32 0 5))) )) :named A1_694))
(assert (! (forall ((?x_3py503 Int)) (! (or (= (sign_extend_5_64 (bv_extract ?x_3py503 64 0 5)) ?x_3py503) (not (<= (- 16) ?x_3py503)) (<= 16 ?x_3py503)) :pattern ((sign_extend_5_64 (bv_extract ?x_3py503 64 0 5))) )) :named A1_695))
(assert (! (forall ((?x_3py504 Int)) (! (or (= (sign_extend_60_64 (bv_extract ?x_3py504 64 0 60)) ?x_3py504) (not (<= (- 576460752303423488) ?x_3py504)) (<= 576460752303423488 ?x_3py504)) :pattern ((sign_extend_60_64 (bv_extract ?x_3py504 64 0 60))) )) :named A1_696))
(assert (! (forall ((?x_3py505 Int)) (! (or (= (sign_extend_61_64 (bv_extract ?x_3py505 64 0 61)) ?x_3py505) (<= 1152921504606846976 ?x_3py505) (not (<= (- 1152921504606846976) ?x_3py505))) :pattern ((sign_extend_61_64 (bv_extract ?x_3py505 64 0 61))) )) :named A1_697))
(assert (! (forall ((?x_3py506 Int)) (! (or (= (sign_extend_62_64 (bv_extract ?x_3py506 64 0 62)) ?x_3py506) (not (<= (- 2305843009213693952) ?x_3py506)) (<= 2305843009213693952 ?x_3py506)) :pattern ((sign_extend_62_64 (bv_extract ?x_3py506 64 0 62))) )) :named A1_698))
(assert (! (forall ((?x_3py507 Int)) (! (or (= (sign_extend_63_64 (bv_extract ?x_3py507 64 0 63)) ?x_3py507) (not (<= (- 4611686018427387904) ?x_3py507)) (<= 4611686018427387904 ?x_3py507)) :pattern ((sign_extend_63_64 (bv_extract ?x_3py507 64 0 63))) )) :named A1_699))
(assert (! (forall ((?x_3py508 Int)) (! (or (= (sign_extend_6_32 (bv_extract ?x_3py508 32 0 6)) ?x_3py508) (not (<= (- 32) ?x_3py508)) (<= 32 ?x_3py508)) :pattern ((sign_extend_6_32 (bv_extract ?x_3py508 32 0 6))) )) :named A1_700))
(assert (! (forall ((?x_3py509 Int)) (! (or (= (sign_extend_6_64 (bv_extract ?x_3py509 64 0 6)) ?x_3py509) (not (<= (- 32) ?x_3py509)) (<= 32 ?x_3py509)) :pattern ((sign_extend_6_64 (bv_extract ?x_3py509 64 0 6))) )) :named A1_701))
(assert (! (forall ((?x_3py510 Int)) (! (or (= (sign_extend_7_32 (bv_extract ?x_3py510 32 0 7)) ?x_3py510) (not (<= (- 64) ?x_3py510)) (<= 64 ?x_3py510)) :pattern ((sign_extend_7_32 (bv_extract ?x_3py510 32 0 7))) )) :named A1_702))
(assert (! (forall ((?x_3py511 Int)) (! (or (= (sign_extend_7_64 (bv_extract ?x_3py511 64 0 7)) ?x_3py511) (not (<= (- 64) ?x_3py511)) (<= 64 ?x_3py511)) :pattern ((sign_extend_7_64 (bv_extract ?x_3py511 64 0 7))) )) :named A1_703))
(assert (! (forall ((?x_3py512 Int)) (! (or (= (sign_extend_8_32 (bv_extract ?x_3py512 32 0 8)) ?x_3py512) (<= 128 ?x_3py512) (not (<= (- 128) ?x_3py512))) :pattern ((sign_extend_8_32 (bv_extract ?x_3py512 32 0 8))) )) :named A1_704))
(assert (! (forall ((?x_3py513 Int)) (! (or (= (sign_extend_8_64 (bv_extract ?x_3py513 64 0 8)) ?x_3py513) (<= 128 ?x_3py513) (not (<= (- 128) ?x_3py513))) :pattern ((sign_extend_8_64 (bv_extract ?x_3py513 64 0 8))) )) :named A1_705))
(assert (! (forall ((?x_3py514 Int)) (! (or (= (sign_extend_9_32 (bv_extract ?x_3py514 32 0 9)) ?x_3py514) (not (<= (- 256) ?x_3py514)) (<= 256 ?x_3py514)) :pattern ((sign_extend_9_32 (bv_extract ?x_3py514 32 0 9))) )) :named A1_706))
(assert (! (forall ((?x_3py515 Int)) (! (or (= (sign_extend_9_64 (bv_extract ?x_3py515 64 0 9)) ?x_3py515) (not (<= (- 256) ?x_3py515)) (<= 256 ?x_3py515)) :pattern ((sign_extend_9_64 (bv_extract ?x_3py515 64 0 9))) )) :named A1_707))
(assert (! (forall ((?x_3py516 Int)) (! (or (= ?x_3py516 min_i4) (= (neg_unchk_i4 ?x_3py516) (* (- 1) ?x_3py516))) :pattern ((neg_unchk_i4 ?x_3py516)) )) :named A1_708))
(assert (! (forall ((?x_3py517 Int)) (! (or (= ?x_3py517 min_i8) (= (neg_unchk_i8 ?x_3py517) (* (- 1) ?x_3py517))) :pattern ((neg_unchk_i8 ?x_3py517)) )) :named A1_709))
(assert (! (forall ((?x_3py518 Int)) (! (or (not (<= min_i1 ?x_3py518)) (not (<= ?x_3py518 max_i1)) (= ?x_3py518 (conv_i4_to_i1 ?x_3py518))) :pattern ((conv_i4_to_i1 ?x_3py518)) )) :named A1_710))
(assert (! (forall ((?x_3py519 Int)) (! (or (not (<= min_i1 ?x_3py519)) (not (<= ?x_3py519 max_i1)) (= ?x_3py519 (conv_i8_to_i1 ?x_3py519))) :pattern ((conv_i8_to_i1 ?x_3py519)) )) :named A1_711))
(assert (! (forall ((?x_3py520 Int)) (! (or (not (<= min_i1 ?x_3py520)) (not (<= ?x_3py520 max_i1)) (= ?x_3py520 (conv_u4_to_i1 ?x_3py520))) :pattern ((conv_u4_to_i1 ?x_3py520)) )) :named A1_712))
(assert (! (forall ((?x_3py521 Int)) (! (or (not (<= min_i1 ?x_3py521)) (not (<= ?x_3py521 max_i1)) (= ?x_3py521 (conv_u8_to_i1 ?x_3py521))) :pattern ((conv_u8_to_i1 ?x_3py521)) )) :named A1_713))
(assert (! (forall ((?x_3py522 Int)) (! (or (not (<= min_i2 ?x_3py522)) (not (<= ?x_3py522 max_i2)) (= ?x_3py522 (conv_i4_to_i2 ?x_3py522))) :pattern ((conv_i4_to_i2 ?x_3py522)) )) :named A1_714))
(assert (! (forall ((?x_3py523 Int)) (! (or (not (<= min_i2 ?x_3py523)) (not (<= ?x_3py523 max_i2)) (= ?x_3py523 (conv_i8_to_i2 ?x_3py523))) :pattern ((conv_i8_to_i2 ?x_3py523)) )) :named A1_715))
(assert (! (forall ((?x_3py524 Int)) (! (or (not (<= min_i2 ?x_3py524)) (not (<= ?x_3py524 max_i2)) (= ?x_3py524 (conv_u4_to_i2 ?x_3py524))) :pattern ((conv_u4_to_i2 ?x_3py524)) )) :named A1_716))
(assert (! (forall ((?x_3py525 Int)) (! (or (not (<= min_i2 ?x_3py525)) (not (<= ?x_3py525 max_i2)) (= ?x_3py525 (conv_u8_to_i2 ?x_3py525))) :pattern ((conv_u8_to_i2 ?x_3py525)) )) :named A1_717))
(assert (! (forall ((?x_3py526 Int)) (! (or (not (<= min_i4 ?x_3py526)) (not (<= ?x_3py526 max_i4)) (= ?x_3py526 (conv_i4_to_i4 ?x_3py526))) :pattern ((conv_i4_to_i4 ?x_3py526)) )) :named A1_718))
(assert (! (forall ((?x_3py527 Int)) (! (or (not (<= min_i4 ?x_3py527)) (not (<= ?x_3py527 max_i4)) (= ?x_3py527 (conv_i8_to_i4 ?x_3py527))) :pattern ((conv_i8_to_i4 ?x_3py527)) )) :named A1_719))
(assert (! (forall ((?x_3py528 Int)) (! (or (not (<= min_i4 ?x_3py528)) (not (<= ?x_3py528 max_i4)) (= ?x_3py528 (conv_u4_to_i4 ?x_3py528))) :pattern ((conv_u4_to_i4 ?x_3py528)) )) :named A1_720))
(assert (! (forall ((?x_3py529 Int)) (! (or (not (<= min_i4 ?x_3py529)) (not (<= ?x_3py529 max_i4)) (= ?x_3py529 (conv_u8_to_i4 ?x_3py529))) :pattern ((conv_u8_to_i4 ?x_3py529)) )) :named A1_721))
(assert (! (forall ((?x_3py530 Int)) (! (or (not (<= min_i8 ?x_3py530)) (not (<= ?x_3py530 max_i8)) (= ?x_3py530 (conv_i4_to_i8 ?x_3py530))) :pattern ((conv_i4_to_i8 ?x_3py530)) )) :named A1_722))
(assert (! (forall ((?x_3py531 Int)) (! (or (not (<= min_i8 ?x_3py531)) (not (<= ?x_3py531 max_i8)) (= ?x_3py531 (conv_i8_to_i8 ?x_3py531))) :pattern ((conv_i8_to_i8 ?x_3py531)) )) :named A1_723))
(assert (! (forall ((?x_3py532 Int)) (! (or (not (<= min_i8 ?x_3py532)) (not (<= ?x_3py532 max_i8)) (= ?x_3py532 (conv_u4_to_i8 ?x_3py532))) :pattern ((conv_u4_to_i8 ?x_3py532)) )) :named A1_724))
(assert (! (forall ((?x_3py533 Int)) (! (or (not (<= min_i8 ?x_3py533)) (not (<= ?x_3py533 max_i8)) (= ?x_3py533 (conv_u8_to_i8 ?x_3py533))) :pattern ((conv_u8_to_i8 ?x_3py533)) )) :named A1_725))
(assert (! (forall ((?x_3py534 Int)) (! (or (not (<= min_u1 ?x_3py534)) (not (<= ?x_3py534 max_u1)) (= ?x_3py534 (conv_i4_to_u1 ?x_3py534))) :pattern ((conv_i4_to_u1 ?x_3py534)) )) :named A1_726))
(assert (! (forall ((?x_3py535 Int)) (! (or (not (<= min_u1 ?x_3py535)) (not (<= ?x_3py535 max_u1)) (= ?x_3py535 (conv_i8_to_u1 ?x_3py535))) :pattern ((conv_i8_to_u1 ?x_3py535)) )) :named A1_727))
(assert (! (forall ((?x_3py536 Int)) (! (or (not (<= min_u1 ?x_3py536)) (not (<= ?x_3py536 max_u1)) (= ?x_3py536 (conv_u4_to_u1 ?x_3py536))) :pattern ((conv_u4_to_u1 ?x_3py536)) )) :named A1_728))
(assert (! (forall ((?x_3py537 Int)) (! (or (not (<= min_u1 ?x_3py537)) (not (<= ?x_3py537 max_u1)) (= ?x_3py537 (conv_u8_to_u1 ?x_3py537))) :pattern ((conv_u8_to_u1 ?x_3py537)) )) :named A1_729))
(assert (! (forall ((?x_3py538 Int)) (! (or (not (<= min_u2 ?x_3py538)) (not (<= ?x_3py538 max_u2)) (= ?x_3py538 (conv_i4_to_u2 ?x_3py538))) :pattern ((conv_i4_to_u2 ?x_3py538)) )) :named A1_730))
(assert (! (forall ((?x_3py539 Int)) (! (or (not (<= min_u2 ?x_3py539)) (not (<= ?x_3py539 max_u2)) (= ?x_3py539 (conv_i8_to_u2 ?x_3py539))) :pattern ((conv_i8_to_u2 ?x_3py539)) )) :named A1_731))
(assert (! (forall ((?x_3py540 Int)) (! (or (not (<= min_u2 ?x_3py540)) (not (<= ?x_3py540 max_u2)) (= ?x_3py540 (conv_u4_to_u2 ?x_3py540))) :pattern ((conv_u4_to_u2 ?x_3py540)) )) :named A1_732))
(assert (! (forall ((?x_3py541 Int)) (! (or (not (<= min_u2 ?x_3py541)) (not (<= ?x_3py541 max_u2)) (= ?x_3py541 (conv_u8_to_u2 ?x_3py541))) :pattern ((conv_u8_to_u2 ?x_3py541)) )) :named A1_733))
(assert (! (forall ((?x_3py542 Int)) (! (or (not (<= min_u4 ?x_3py542)) (not (<= ?x_3py542 max_u4)) (= ?x_3py542 (conv_i4_to_u4 ?x_3py542))) :pattern ((conv_i4_to_u4 ?x_3py542)) )) :named A1_734))
(assert (! (forall ((?x_3py543 Int)) (! (or (not (<= min_u4 ?x_3py543)) (not (<= ?x_3py543 max_u4)) (= ?x_3py543 (conv_i8_to_u4 ?x_3py543))) :pattern ((conv_i8_to_u4 ?x_3py543)) )) :named A1_735))
(assert (! (forall ((?x_3py544 Int)) (! (or (not (<= min_u4 ?x_3py544)) (not (<= ?x_3py544 max_u4)) (= ?x_3py544 (conv_u4_to_u4 ?x_3py544))) :pattern ((conv_u4_to_u4 ?x_3py544)) )) :named A1_736))
(assert (! (forall ((?x_3py545 Int)) (! (or (not (<= min_u4 ?x_3py545)) (not (<= ?x_3py545 max_u4)) (= ?x_3py545 (conv_u8_to_u4 ?x_3py545))) :pattern ((conv_u8_to_u4 ?x_3py545)) )) :named A1_737))
(assert (! (forall ((?x_3py546 Int)) (! (or (not (<= min_u8 ?x_3py546)) (not (<= ?x_3py546 max_u8)) (= ?x_3py546 (conv_i4_to_u8 ?x_3py546))) :pattern ((conv_i4_to_u8 ?x_3py546)) )) :named A1_738))
(assert (! (forall ((?x_3py547 Int)) (! (or (not (<= min_u8 ?x_3py547)) (not (<= ?x_3py547 max_u8)) (= ?x_3py547 (conv_i8_to_u8 ?x_3py547))) :pattern ((conv_i8_to_u8 ?x_3py547)) )) :named A1_739))
(assert (! (forall ((?x_3py548 Int)) (! (or (not (<= min_u8 ?x_3py548)) (not (<= ?x_3py548 max_u8)) (= ?x_3py548 (conv_u4_to_u8 ?x_3py548))) :pattern ((conv_u4_to_u8 ?x_3py548)) )) :named A1_740))
(assert (! (forall ((?x_3py549 Int)) (! (or (not (<= min_u8 ?x_3py549)) (not (<= ?x_3py549 max_u8)) (= ?x_3py549 (conv_u8_to_u8 ?x_3py549))) :pattern ((conv_u8_to_u8 ?x_3py549)) )) :named A1_741))
(assert (! (forall ((?x_3py550 Int)) (! (or (= (sign_extend_10_32 ?x_3py550) ?x_3py550) (not (<= (- 512) ?x_3py550)) (<= 512 ?x_3py550)) :pattern ((sign_extend_10_32 ?x_3py550)) )) :named A1_742))
(assert (! (forall ((?x_3py551 Int)) (! (or (= (sign_extend_10_64 ?x_3py551) ?x_3py551) (not (<= (- 512) ?x_3py551)) (<= 512 ?x_3py551)) :pattern ((sign_extend_10_64 ?x_3py551)) )) :named A1_743))
(assert (! (forall ((?x_3py552 Int)) (! (or (= (sign_extend_11_32 ?x_3py552) ?x_3py552) (not (<= (- 1024) ?x_3py552)) (<= 1024 ?x_3py552)) :pattern ((sign_extend_11_32 ?x_3py552)) )) :named A1_744))
(assert (! (forall ((?x_3py553 Int)) (! (or (= (sign_extend_11_64 ?x_3py553) ?x_3py553) (not (<= (- 1024) ?x_3py553)) (<= 1024 ?x_3py553)) :pattern ((sign_extend_11_64 ?x_3py553)) )) :named A1_745))
(assert (! (forall ((?x_3py554 Int)) (! (or (= (sign_extend_12_32 ?x_3py554) ?x_3py554) (not (<= (- 2048) ?x_3py554)) (<= 2048 ?x_3py554)) :pattern ((sign_extend_12_32 ?x_3py554)) )) :named A1_746))
(assert (! (forall ((?x_3py555 Int)) (! (or (= (sign_extend_12_64 ?x_3py555) ?x_3py555) (not (<= (- 2048) ?x_3py555)) (<= 2048 ?x_3py555)) :pattern ((sign_extend_12_64 ?x_3py555)) )) :named A1_747))
(assert (! (forall ((?x_3py556 Int)) (! (or (= (sign_extend_13_32 ?x_3py556) ?x_3py556) (<= 4096 ?x_3py556) (not (<= (- 4096) ?x_3py556))) :pattern ((sign_extend_13_32 ?x_3py556)) )) :named A1_748))
(assert (! (forall ((?x_3py557 Int)) (! (or (= (sign_extend_13_64 ?x_3py557) ?x_3py557) (<= 4096 ?x_3py557) (not (<= (- 4096) ?x_3py557))) :pattern ((sign_extend_13_64 ?x_3py557)) )) :named A1_749))
(assert (! (forall ((?x_3py558 Int)) (! (or (= (sign_extend_14_32 ?x_3py558) ?x_3py558) (not (<= (- 8192) ?x_3py558)) (<= 8192 ?x_3py558)) :pattern ((sign_extend_14_32 ?x_3py558)) )) :named A1_750))
(assert (! (forall ((?x_3py559 Int)) (! (or (= (sign_extend_14_64 ?x_3py559) ?x_3py559) (not (<= (- 8192) ?x_3py559)) (<= 8192 ?x_3py559)) :pattern ((sign_extend_14_64 ?x_3py559)) )) :named A1_751))
(assert (! (forall ((?x_3py560 Int)) (! (or (= (sign_extend_15_32 ?x_3py560) ?x_3py560) (not (<= (- 16384) ?x_3py560)) (<= 16384 ?x_3py560)) :pattern ((sign_extend_15_32 ?x_3py560)) )) :named A1_752))
(assert (! (forall ((?x_3py561 Int)) (! (or (= (sign_extend_15_64 ?x_3py561) ?x_3py561) (not (<= (- 16384) ?x_3py561)) (<= 16384 ?x_3py561)) :pattern ((sign_extend_15_64 ?x_3py561)) )) :named A1_753))
(assert (! (forall ((?x_3py562 Int)) (! (or (= (sign_extend_16_32 ?x_3py562) ?x_3py562) (<= 32768 ?x_3py562) (not (<= (- 32768) ?x_3py562))) :pattern ((sign_extend_16_32 ?x_3py562)) )) :named A1_754))
(assert (! (forall ((?x_3py563 Int)) (! (or (= (sign_extend_16_64 ?x_3py563) ?x_3py563) (<= 32768 ?x_3py563) (not (<= (- 32768) ?x_3py563))) :pattern ((sign_extend_16_64 ?x_3py563)) )) :named A1_755))
(assert (! (forall ((?x_3py564 Int)) (! (or (= (sign_extend_17_32 ?x_3py564) ?x_3py564) (not (<= (- 65536) ?x_3py564)) (<= 65536 ?x_3py564)) :pattern ((sign_extend_17_32 ?x_3py564)) )) :named A1_756))
(assert (! (forall ((?x_3py565 Int)) (! (or (= (sign_extend_17_64 ?x_3py565) ?x_3py565) (not (<= (- 65536) ?x_3py565)) (<= 65536 ?x_3py565)) :pattern ((sign_extend_17_64 ?x_3py565)) )) :named A1_757))
(assert (! (forall ((?x_3py566 Int)) (! (or (= (sign_extend_18_32 ?x_3py566) ?x_3py566) (<= 131072 ?x_3py566) (not (<= (- 131072) ?x_3py566))) :pattern ((sign_extend_18_32 ?x_3py566)) )) :named A1_758))
(assert (! (forall ((?x_3py567 Int)) (! (or (= (sign_extend_18_64 ?x_3py567) ?x_3py567) (<= 131072 ?x_3py567) (not (<= (- 131072) ?x_3py567))) :pattern ((sign_extend_18_64 ?x_3py567)) )) :named A1_759))
(assert (! (forall ((?x_3py568 Int)) (! (or (= (sign_extend_19_32 ?x_3py568) ?x_3py568) (not (<= (- 262144) ?x_3py568)) (<= 262144 ?x_3py568)) :pattern ((sign_extend_19_32 ?x_3py568)) )) :named A1_760))
(assert (! (forall ((?x_3py569 Int)) (! (or (= (sign_extend_19_64 ?x_3py569) ?x_3py569) (not (<= (- 262144) ?x_3py569)) (<= 262144 ?x_3py569)) :pattern ((sign_extend_19_64 ?x_3py569)) )) :named A1_761))
(assert (! (forall ((?x_3py570 Int)) (! (or (= (sign_extend_1_32 ?x_3py570) ?x_3py570) (<= 1 ?x_3py570) (not (<= (- 1) ?x_3py570))) :pattern ((sign_extend_1_32 ?x_3py570)) )) :named A1_762))
(assert (! (forall ((?x_3py571 Int)) (! (or (= (sign_extend_1_64 ?x_3py571) ?x_3py571) (<= 1 ?x_3py571) (not (<= (- 1) ?x_3py571))) :pattern ((sign_extend_1_64 ?x_3py571)) )) :named A1_763))
(assert (! (forall ((?x_3py572 Int)) (! (or (= (sign_extend_20_32 ?x_3py572) ?x_3py572) (<= 524288 ?x_3py572) (not (<= (- 524288) ?x_3py572))) :pattern ((sign_extend_20_32 ?x_3py572)) )) :named A1_764))
(assert (! (forall ((?x_3py573 Int)) (! (or (= (sign_extend_20_64 ?x_3py573) ?x_3py573) (<= 524288 ?x_3py573) (not (<= (- 524288) ?x_3py573))) :pattern ((sign_extend_20_64 ?x_3py573)) )) :named A1_765))
(assert (! (forall ((?x_3py574 Int)) (! (or (= (sign_extend_21_32 ?x_3py574) ?x_3py574) (not (<= (- 1048576) ?x_3py574)) (<= 1048576 ?x_3py574)) :pattern ((sign_extend_21_32 ?x_3py574)) )) :named A1_766))
(assert (! (forall ((?x_3py575 Int)) (! (or (= (sign_extend_21_64 ?x_3py575) ?x_3py575) (not (<= (- 1048576) ?x_3py575)) (<= 1048576 ?x_3py575)) :pattern ((sign_extend_21_64 ?x_3py575)) )) :named A1_767))
(assert (! (forall ((?x_3py576 Int)) (! (or (= (sign_extend_22_32 ?x_3py576) ?x_3py576) (<= 2097152 ?x_3py576) (not (<= (- 2097152) ?x_3py576))) :pattern ((sign_extend_22_32 ?x_3py576)) )) :named A1_768))
(assert (! (forall ((?x_3py577 Int)) (! (or (= (sign_extend_22_64 ?x_3py577) ?x_3py577) (<= 2097152 ?x_3py577) (not (<= (- 2097152) ?x_3py577))) :pattern ((sign_extend_22_64 ?x_3py577)) )) :named A1_769))
(assert (! (forall ((?x_3py578 Int)) (! (or (= (sign_extend_23_32 ?x_3py578) ?x_3py578) (not (<= (- 4194304) ?x_3py578)) (<= 4194304 ?x_3py578)) :pattern ((sign_extend_23_32 ?x_3py578)) )) :named A1_770))
(assert (! (forall ((?x_3py579 Int)) (! (or (= (sign_extend_23_64 ?x_3py579) ?x_3py579) (not (<= (- 4194304) ?x_3py579)) (<= 4194304 ?x_3py579)) :pattern ((sign_extend_23_64 ?x_3py579)) )) :named A1_771))
(assert (! (forall ((?x_3py580 Int)) (! (or (= (sign_extend_24_32 ?x_3py580) ?x_3py580) (not (<= (- 8388608) ?x_3py580)) (<= 8388608 ?x_3py580)) :pattern ((sign_extend_24_32 ?x_3py580)) )) :named A1_772))
(assert (! (forall ((?x_3py581 Int)) (! (or (= (sign_extend_24_64 ?x_3py581) ?x_3py581) (not (<= (- 8388608) ?x_3py581)) (<= 8388608 ?x_3py581)) :pattern ((sign_extend_24_64 ?x_3py581)) )) :named A1_773))
(assert (! (forall ((?x_3py582 Int)) (! (or (= (sign_extend_25_32 ?x_3py582) ?x_3py582) (not (<= (- 16777216) ?x_3py582)) (<= 16777216 ?x_3py582)) :pattern ((sign_extend_25_32 ?x_3py582)) )) :named A1_774))
(assert (! (forall ((?x_3py583 Int)) (! (or (= (sign_extend_25_64 ?x_3py583) ?x_3py583) (not (<= (- 16777216) ?x_3py583)) (<= 16777216 ?x_3py583)) :pattern ((sign_extend_25_64 ?x_3py583)) )) :named A1_775))
(assert (! (forall ((?x_3py584 Int)) (! (or (= (sign_extend_26_32 ?x_3py584) ?x_3py584) (not (<= (- 33554432) ?x_3py584)) (<= 33554432 ?x_3py584)) :pattern ((sign_extend_26_32 ?x_3py584)) )) :named A1_776))
(assert (! (forall ((?x_3py585 Int)) (! (or (= (sign_extend_26_64 ?x_3py585) ?x_3py585) (not (<= (- 33554432) ?x_3py585)) (<= 33554432 ?x_3py585)) :pattern ((sign_extend_26_64 ?x_3py585)) )) :named A1_777))
(assert (! (forall ((?x_3py586 Int)) (! (or (= (sign_extend_27_32 ?x_3py586) ?x_3py586) (<= 67108864 ?x_3py586) (not (<= (- 67108864) ?x_3py586))) :pattern ((sign_extend_27_32 ?x_3py586)) )) :named A1_778))
(assert (! (forall ((?x_3py587 Int)) (! (or (= (sign_extend_27_64 ?x_3py587) ?x_3py587) (<= 67108864 ?x_3py587) (not (<= (- 67108864) ?x_3py587))) :pattern ((sign_extend_27_64 ?x_3py587)) )) :named A1_779))
(assert (! (forall ((?x_3py588 Int)) (! (or (= (sign_extend_28_32 ?x_3py588) ?x_3py588) (<= 134217728 ?x_3py588) (not (<= (- 134217728) ?x_3py588))) :pattern ((sign_extend_28_32 ?x_3py588)) )) :named A1_780))
(assert (! (forall ((?x_3py589 Int)) (! (or (= (sign_extend_28_64 ?x_3py589) ?x_3py589) (<= 134217728 ?x_3py589) (not (<= (- 134217728) ?x_3py589))) :pattern ((sign_extend_28_64 ?x_3py589)) )) :named A1_781))
(assert (! (forall ((?x_3py590 Int)) (! (or (= (sign_extend_29_32 ?x_3py590) ?x_3py590) (<= 268435456 ?x_3py590) (not (<= (- 268435456) ?x_3py590))) :pattern ((sign_extend_29_32 ?x_3py590)) )) :named A1_782))
(assert (! (forall ((?x_3py591 Int)) (! (or (= (sign_extend_29_64 ?x_3py591) ?x_3py591) (<= 268435456 ?x_3py591) (not (<= (- 268435456) ?x_3py591))) :pattern ((sign_extend_29_64 ?x_3py591)) )) :named A1_783))
(assert (! (forall ((?x_3py592 Int)) (! (or (= (sign_extend_2_32 ?x_3py592) ?x_3py592) (<= 2 ?x_3py592) (not (<= (- 2) ?x_3py592))) :pattern ((sign_extend_2_32 ?x_3py592)) )) :named A1_784))
(assert (! (forall ((?x_3py593 Int)) (! (or (= (sign_extend_2_64 ?x_3py593) ?x_3py593) (<= 2 ?x_3py593) (not (<= (- 2) ?x_3py593))) :pattern ((sign_extend_2_64 ?x_3py593)) )) :named A1_785))
(assert (! (forall ((?x_3py594 Int)) (! (or (= (sign_extend_30_32 ?x_3py594) ?x_3py594) (not (<= (- 536870912) ?x_3py594)) (<= 536870912 ?x_3py594)) :pattern ((sign_extend_30_32 ?x_3py594)) )) :named A1_786))
(assert (! (forall ((?x_3py595 Int)) (! (or (= (sign_extend_30_64 ?x_3py595) ?x_3py595) (not (<= (- 536870912) ?x_3py595)) (<= 536870912 ?x_3py595)) :pattern ((sign_extend_30_64 ?x_3py595)) )) :named A1_787))
(assert (! (forall ((?x_3py596 Int)) (! (or (= (sign_extend_31_32 ?x_3py596) ?x_3py596) (not (<= (- 1073741824) ?x_3py596)) (<= 1073741824 ?x_3py596)) :pattern ((sign_extend_31_32 ?x_3py596)) )) :named A1_788))
(assert (! (forall ((?x_3py597 Int)) (! (or (= (sign_extend_31_64 ?x_3py597) ?x_3py597) (not (<= (- 1073741824) ?x_3py597)) (<= 1073741824 ?x_3py597)) :pattern ((sign_extend_31_64 ?x_3py597)) )) :named A1_789))
(assert (! (forall ((?x_3py598 Int)) (! (or (= (sign_extend_32_32 ?x_3py598) ?x_3py598) (<= 2147483648 ?x_3py598) (not (<= (- 2147483648) ?x_3py598))) :pattern ((sign_extend_32_32 ?x_3py598)) )) :named A1_790))
(assert (! (forall ((?x_3py599 Int)) (! (or (= (sign_extend_32_64 ?x_3py599) ?x_3py599) (<= 2147483648 ?x_3py599) (not (<= (- 2147483648) ?x_3py599))) :pattern ((sign_extend_32_64 ?x_3py599)) )) :named A1_791))
(assert (! (forall ((?x_3py600 Int)) (! (or (= (sign_extend_33_64 ?x_3py600) ?x_3py600) (not (<= (- 4294967296) ?x_3py600)) (<= 4294967296 ?x_3py600)) :pattern ((sign_extend_33_64 ?x_3py600)) )) :named A1_792))
(assert (! (forall ((?x_3py601 Int)) (! (or (= (sign_extend_34_64 ?x_3py601) ?x_3py601) (<= 8589934592 ?x_3py601) (not (<= (- 8589934592) ?x_3py601))) :pattern ((sign_extend_34_64 ?x_3py601)) )) :named A1_793))
(assert (! (forall ((?x_3py602 Int)) (! (or (= (sign_extend_35_64 ?x_3py602) ?x_3py602) (not (<= (- 17179869184) ?x_3py602)) (<= 17179869184 ?x_3py602)) :pattern ((sign_extend_35_64 ?x_3py602)) )) :named A1_794))
(assert (! (forall ((?x_3py603 Int)) (! (or (= (sign_extend_36_64 ?x_3py603) ?x_3py603) (not (<= (- 34359738368) ?x_3py603)) (<= 34359738368 ?x_3py603)) :pattern ((sign_extend_36_64 ?x_3py603)) )) :named A1_795))
(assert (! (forall ((?x_3py604 Int)) (! (or (= (sign_extend_37_64 ?x_3py604) ?x_3py604) (not (<= (- 68719476736) ?x_3py604)) (<= 68719476736 ?x_3py604)) :pattern ((sign_extend_37_64 ?x_3py604)) )) :named A1_796))
(assert (! (forall ((?x_3py605 Int)) (! (or (= (sign_extend_38_64 ?x_3py605) ?x_3py605) (not (<= (- 137438953472) ?x_3py605)) (<= 137438953472 ?x_3py605)) :pattern ((sign_extend_38_64 ?x_3py605)) )) :named A1_797))
(assert (! (forall ((?x_3py606 Int)) (! (or (= (sign_extend_39_64 ?x_3py606) ?x_3py606) (<= 274877906944 ?x_3py606) (not (<= (- 274877906944) ?x_3py606))) :pattern ((sign_extend_39_64 ?x_3py606)) )) :named A1_798))
(assert (! (forall ((?x_3py607 Int)) (! (or (= (sign_extend_3_32 ?x_3py607) ?x_3py607) (<= 4 ?x_3py607) (not (<= (- 4) ?x_3py607))) :pattern ((sign_extend_3_32 ?x_3py607)) )) :named A1_799))
(assert (! (forall ((?x_3py608 Int)) (! (or (= (sign_extend_3_64 ?x_3py608) ?x_3py608) (<= 4 ?x_3py608) (not (<= (- 4) ?x_3py608))) :pattern ((sign_extend_3_64 ?x_3py608)) )) :named A1_800))
(assert (! (forall ((?x_3py609 Int)) (! (or (= (sign_extend_40_64 ?x_3py609) ?x_3py609) (not (<= (- 549755813888) ?x_3py609)) (<= 549755813888 ?x_3py609)) :pattern ((sign_extend_40_64 ?x_3py609)) )) :named A1_801))
(assert (! (forall ((?x_3py610 Int)) (! (or (= (sign_extend_41_64 ?x_3py610) ?x_3py610) (not (<= (- 1099511627776) ?x_3py610)) (<= 1099511627776 ?x_3py610)) :pattern ((sign_extend_41_64 ?x_3py610)) )) :named A1_802))
(assert (! (forall ((?x_3py611 Int)) (! (or (= (sign_extend_42_64 ?x_3py611) ?x_3py611) (<= 2199023255552 ?x_3py611) (not (<= (- 2199023255552) ?x_3py611))) :pattern ((sign_extend_42_64 ?x_3py611)) )) :named A1_803))
(assert (! (forall ((?x_3py612 Int)) (! (or (= (sign_extend_43_64 ?x_3py612) ?x_3py612) (not (<= (- 4398046511104) ?x_3py612)) (<= 4398046511104 ?x_3py612)) :pattern ((sign_extend_43_64 ?x_3py612)) )) :named A1_804))
(assert (! (forall ((?x_3py613 Int)) (! (or (= (sign_extend_44_64 ?x_3py613) ?x_3py613) (not (<= (- 8796093022208) ?x_3py613)) (<= 8796093022208 ?x_3py613)) :pattern ((sign_extend_44_64 ?x_3py613)) )) :named A1_805))
(assert (! (forall ((?x_3py614 Int)) (! (or (= (sign_extend_45_64 ?x_3py614) ?x_3py614) (not (<= (- 17592186044416) ?x_3py614)) (<= 17592186044416 ?x_3py614)) :pattern ((sign_extend_45_64 ?x_3py614)) )) :named A1_806))
(assert (! (forall ((?x_3py615 Int)) (! (or (= (sign_extend_46_64 ?x_3py615) ?x_3py615) (not (<= (- 35184372088832) ?x_3py615)) (<= 35184372088832 ?x_3py615)) :pattern ((sign_extend_46_64 ?x_3py615)) )) :named A1_807))
(assert (! (forall ((?x_3py616 Int)) (! (or (= (sign_extend_47_64 ?x_3py616) ?x_3py616) (not (<= (- 70368744177664) ?x_3py616)) (<= 70368744177664 ?x_3py616)) :pattern ((sign_extend_47_64 ?x_3py616)) )) :named A1_808))
(assert (! (forall ((?x_3py617 Int)) (! (or (= (sign_extend_48_64 ?x_3py617) ?x_3py617) (not (<= (- 140737488355328) ?x_3py617)) (<= 140737488355328 ?x_3py617)) :pattern ((sign_extend_48_64 ?x_3py617)) )) :named A1_809))
(assert (! (forall ((?x_3py618 Int)) (! (or (= (sign_extend_49_64 ?x_3py618) ?x_3py618) (<= 281474976710656 ?x_3py618) (not (<= (- 281474976710656) ?x_3py618))) :pattern ((sign_extend_49_64 ?x_3py618)) )) :named A1_810))
(assert (! (forall ((?x_3py619 Int)) (! (or (= (sign_extend_4_32 ?x_3py619) ?x_3py619) (not (<= (- 8) ?x_3py619)) (<= 8 ?x_3py619)) :pattern ((sign_extend_4_32 ?x_3py619)) )) :named A1_811))
(assert (! (forall ((?x_3py620 Int)) (! (or (= (sign_extend_4_64 ?x_3py620) ?x_3py620) (not (<= (- 8) ?x_3py620)) (<= 8 ?x_3py620)) :pattern ((sign_extend_4_64 ?x_3py620)) )) :named A1_812))
(assert (! (forall ((?x_3py621 Int)) (! (or (= (sign_extend_50_64 ?x_3py621) ?x_3py621) (not (<= (- 562949953421312) ?x_3py621)) (<= 562949953421312 ?x_3py621)) :pattern ((sign_extend_50_64 ?x_3py621)) )) :named A1_813))
(assert (! (forall ((?x_3py622 Int)) (! (or (= (sign_extend_51_64 ?x_3py622) ?x_3py622) (<= 1125899906842624 ?x_3py622) (not (<= (- 1125899906842624) ?x_3py622))) :pattern ((sign_extend_51_64 ?x_3py622)) )) :named A1_814))
(assert (! (forall ((?x_3py623 Int)) (! (or (= (sign_extend_52_64 ?x_3py623) ?x_3py623) (not (<= (- 2251799813685248) ?x_3py623)) (<= 2251799813685248 ?x_3py623)) :pattern ((sign_extend_52_64 ?x_3py623)) )) :named A1_815))
(assert (! (forall ((?x_3py624 Int)) (! (or (= (sign_extend_53_64 ?x_3py624) ?x_3py624) (<= 4503599627370496 ?x_3py624) (not (<= (- 4503599627370496) ?x_3py624))) :pattern ((sign_extend_53_64 ?x_3py624)) )) :named A1_816))
(assert (! (forall ((?x_3py625 Int)) (! (or (= (sign_extend_54_64 ?x_3py625) ?x_3py625) (not (<= (- 9007199254740992) ?x_3py625)) (<= 9007199254740992 ?x_3py625)) :pattern ((sign_extend_54_64 ?x_3py625)) )) :named A1_817))
(assert (! (forall ((?x_3py626 Int)) (! (or (= (sign_extend_55_64 ?x_3py626) ?x_3py626) (<= 18014398509481984 ?x_3py626) (not (<= (- 18014398509481984) ?x_3py626))) :pattern ((sign_extend_55_64 ?x_3py626)) )) :named A1_818))
(assert (! (forall ((?x_3py627 Int)) (! (or (= (sign_extend_56_64 ?x_3py627) ?x_3py627) (not (<= (- 36028797018963968) ?x_3py627)) (<= 36028797018963968 ?x_3py627)) :pattern ((sign_extend_56_64 ?x_3py627)) )) :named A1_819))
(assert (! (forall ((?x_3py628 Int)) (! (or (= (sign_extend_57_64 ?x_3py628) ?x_3py628) (not (<= (- 72057594037927936) ?x_3py628)) (<= 72057594037927936 ?x_3py628)) :pattern ((sign_extend_57_64 ?x_3py628)) )) :named A1_820))
(assert (! (forall ((?x_3py629 Int)) (! (or (= (sign_extend_58_64 ?x_3py629) ?x_3py629) (<= 144115188075855872 ?x_3py629) (not (<= (- 144115188075855872) ?x_3py629))) :pattern ((sign_extend_58_64 ?x_3py629)) )) :named A1_821))
(assert (! (forall ((?x_3py630 Int)) (! (or (= (sign_extend_59_64 ?x_3py630) ?x_3py630) (not (<= (- 288230376151711744) ?x_3py630)) (<= 288230376151711744 ?x_3py630)) :pattern ((sign_extend_59_64 ?x_3py630)) )) :named A1_822))
(assert (! (forall ((?x_3py631 Int)) (! (or (= (sign_extend_5_32 ?x_3py631) ?x_3py631) (not (<= (- 16) ?x_3py631)) (<= 16 ?x_3py631)) :pattern ((sign_extend_5_32 ?x_3py631)) )) :named A1_823))
(assert (! (forall ((?x_3py632 Int)) (! (or (= (sign_extend_5_64 ?x_3py632) ?x_3py632) (not (<= (- 16) ?x_3py632)) (<= 16 ?x_3py632)) :pattern ((sign_extend_5_64 ?x_3py632)) )) :named A1_824))
(assert (! (forall ((?x_3py633 Int)) (! (or (= (sign_extend_60_64 ?x_3py633) ?x_3py633) (not (<= (- 576460752303423488) ?x_3py633)) (<= 576460752303423488 ?x_3py633)) :pattern ((sign_extend_60_64 ?x_3py633)) )) :named A1_825))
(assert (! (forall ((?x_3py634 Int)) (! (or (= (sign_extend_61_64 ?x_3py634) ?x_3py634) (<= 1152921504606846976 ?x_3py634) (not (<= (- 1152921504606846976) ?x_3py634))) :pattern ((sign_extend_61_64 ?x_3py634)) )) :named A1_826))
(assert (! (forall ((?x_3py635 Int)) (! (or (= (sign_extend_62_64 ?x_3py635) ?x_3py635) (not (<= (- 2305843009213693952) ?x_3py635)) (<= 2305843009213693952 ?x_3py635)) :pattern ((sign_extend_62_64 ?x_3py635)) )) :named A1_827))
(assert (! (forall ((?x_3py636 Int)) (! (or (= (sign_extend_63_64 ?x_3py636) ?x_3py636) (not (<= (- 4611686018427387904) ?x_3py636)) (<= 4611686018427387904 ?x_3py636)) :pattern ((sign_extend_63_64 ?x_3py636)) )) :named A1_828))
(assert (! (forall ((?x_3py637 Int)) (! (or (= (sign_extend_6_32 ?x_3py637) ?x_3py637) (not (<= (- 32) ?x_3py637)) (<= 32 ?x_3py637)) :pattern ((sign_extend_6_32 ?x_3py637)) )) :named A1_829))
(assert (! (forall ((?x_3py638 Int)) (! (or (= (sign_extend_6_64 ?x_3py638) ?x_3py638) (not (<= (- 32) ?x_3py638)) (<= 32 ?x_3py638)) :pattern ((sign_extend_6_64 ?x_3py638)) )) :named A1_830))
(assert (! (forall ((?x_3py639 Int)) (! (or (= (sign_extend_7_32 ?x_3py639) ?x_3py639) (not (<= (- 64) ?x_3py639)) (<= 64 ?x_3py639)) :pattern ((sign_extend_7_32 ?x_3py639)) )) :named A1_831))
(assert (! (forall ((?x_3py640 Int)) (! (or (= (sign_extend_7_64 ?x_3py640) ?x_3py640) (not (<= (- 64) ?x_3py640)) (<= 64 ?x_3py640)) :pattern ((sign_extend_7_64 ?x_3py640)) )) :named A1_832))
(assert (! (forall ((?x_3py641 Int)) (! (or (= (sign_extend_8_32 ?x_3py641) ?x_3py641) (<= 128 ?x_3py641) (not (<= (- 128) ?x_3py641))) :pattern ((sign_extend_8_32 ?x_3py641)) )) :named A1_833))
(assert (! (forall ((?x_3py642 Int)) (! (or (= (sign_extend_8_64 ?x_3py642) ?x_3py642) (<= 128 ?x_3py642) (not (<= (- 128) ?x_3py642))) :pattern ((sign_extend_8_64 ?x_3py642)) )) :named A1_834))
(assert (! (forall ((?x_3py643 Int)) (! (or (= (sign_extend_9_32 ?x_3py643) ?x_3py643) (not (<= (- 256) ?x_3py643)) (<= 256 ?x_3py643)) :pattern ((sign_extend_9_32 ?x_3py643)) )) :named A1_835))
(assert (! (forall ((?x_3py644 Int)) (! (or (= (sign_extend_9_64 ?x_3py644) ?x_3py644) (not (<= (- 256) ?x_3py644)) (<= 256 ?x_3py644)) :pattern ((sign_extend_9_64 ?x_3py644)) )) :named A1_836))
(assert (! (forall ((x!1py0 Int)(x!2py0 Int)) (! (or (= x!2py0 0) (= (z3name!15 x!2py0 x!1py0) (+ (- 1) x!2py0))) :pattern ((z3name!15 x!2py0 x!1py0)) )) :named A1_837))
(assert (! (forall ((x!1py1 Int)(x!2py1 Int)) (! (or (not (= x!2py1 0)) (= (z3name!15 x!2py1 x!1py1) (+ (- 1) x!1py1))) :pattern ((z3name!15 x!2py1 x!1py1)) )) :named A1_838))
(assert (! (not (conv_i4_to_bool 0)) :named A1_839))
(assert (! (not (overlaps empty empty)) :named A1_840))
(assert (! (<= Size max_u4) :named A2_0))
(assert (! (<= min_u4 Size) :named A2_1))
(assert (! (<= min_u4 pa) :named A2_2))
(assert (! (<= pa max_u4) :named A2_3))
(assert (! (= allocated_0 empty) :named A2_4))
(assert (! (= localAllocated_0 empty) :named A2_5))
(assert (! (= reads_0 empty) :named A2_6))
(assert (! (good_gmem gmem) :named A2_7))
(assert (! (good_mem mem) :named A2_8))
(assert (! (not (<= Size 0)) :named A2_9))
(assert (! (not (<= Size pa)) :named A2_10))
(assert (! (or (not (valid gmem (add_ptr Mem (conv_u4_to_i8 pa) 4) 4)) (and (valid gmem (add_ptr Mem (conv_u4_to_i8 pa) 4) 4) (or (not (contains (region (add_ptr Mem (conv_u4_to_i8 pa) 4) 4) (union reads_0 (union allocated_0 localAllocated_0)))) (and (contains (region (add_ptr Mem (conv_u4_to_i8 pa) 4) 4) (union reads_0 (union allocated_0 localAllocated_0))) (= retval (ld_u4 mem (add_ptr Mem (conv_u4_to_i8 pa) 4))) (or (not (= retval (ld_u4 mem (add_ptr Mem (conv_u4_to_i8 pa) 4)))) (and (= retval (ld_u4 mem (add_ptr Mem (conv_u4_to_i8 pa) 4))) (or (<= Size 0) (not (valid gmem Mem (conv_i4_to_u8 (* 4 Size))))))))))) :named A2_11))
(assert (! (valid gmem Mem (conv_i4_to_u8 (* 4 Size))) :named A2_12))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 group_024/ematching/tmp/verisoft-memvirt.c.1.phys_mem_read_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
