(set-info :smt-lib-version 2.6)
(set-info :source | VCC and HAVOC benchmarks. Contributed by Nikolaj Bjorner, Leonardo de Moura, Michal Moskal, and Shaz Qadeer. |)
(set-info :category "industrial")
(set-info :status unsat)
(set-logic UFNIA)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-fun x (Int Int) Int)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-fun true_1 () Int)
(declare-fun false_1 () Int)
(declare-fun intGreater (Int Int) Int)
(declare-fun intAtLeast (Int Int) Int)
(declare-fun intAtMost (Int Int) Int)
(declare-fun intLess (Int Int) Int)
(declare-fun anyNeq (Int Int) Int)
(declare-fun anyEqual (Int Int) Int)
(declare-fun boolNot (Int) Int)
(declare-fun boolOr (Int Int) Int)
(declare-fun boolAnd (Int Int) Int)
(declare-fun boolImplies (Int Int) Int)
(declare-fun boolIff (Int Int) Int)
(declare-fun select2 (Int Int Int) Int)
(declare-fun store2 (Int Int Int Int) Int)
(declare-fun select1 (Int Int) Int)
(declare-fun store1 (Int Int Int) Int)
(declare-fun NULL_CHECK (Int) Int)
(declare-fun LIFT (Int) Int)
(declare-fun BIT_BAND (Int Int) Int)
(declare-fun POW2 (Int) Int)
(declare-fun choose (Int Int Int) Int)
(declare-fun DIV (Int Int) Int)
(declare-fun MULT (Int Int) Int)
(declare-fun PLUS (Int Int Int) Int)
(declare-fun MINUS_LEFT_PTR (Int Int Int) Int)
(declare-fun MINUS_BOTH_PTR_OR_BOTH_INT (Int Int Int) Int)
(declare-fun g__FooInv (Int) Int)
(declare-fun g__Foo (Int) Int)
(declare-fun S_g__FooInv (Int) Int)
(declare-fun S_g__Foo (Int) Int)
(declare-fun f__FooInv (Int) Int)
(declare-fun f__Foo (Int) Int)
(declare-fun S_f__FooInv (Int) Int)
(declare-fun S_f__Foo (Int) Int)
(declare-fun Match (Int Int) Int)
(declare-fun Foo_name () Int)
(declare-fun g__Foo_name () Int)
(declare-fun f__Foo_name () Int)
(declare-fun HasType (Int Int) Int)
(declare-fun UINT4_name () Int)
(declare-fun Field (Int) Int)
(declare-fun P_Foo_name () Int)
(declare-fun PP_Foo_name () Int)
(declare-fun PCHAR_name () Int)
(declare-fun PPCHAR_name () Int)
(declare-fun INT4_name () Int)
(declare-fun PINT4_name () Int)
(declare-fun CHAR_name () Int)
(declare-fun Values (Int) Int)
(declare-fun Unified (Int) Int)
(declare-fun Disjoint (Int Int) Int)
(declare-fun Subset (Int Int) Int)
(declare-fun Equal (Int Int) Int)
(declare-fun Inverse (Int Int) Int)
(declare-fun Difference (Int Int) Int)
(declare-fun Singleton (Int) Int)
(declare-fun Union (Int Int) Int)
(declare-fun Dereference (Int Int) Int)
(declare-fun Intersection (Int Int) Int)
(declare-fun Empty () Int)
(declare-fun HavocArray (Int Int Int) Int)
(declare-fun AtLeast (Int Int) Int)
(declare-fun Rep (Int Int) Int)
(declare-fun FourBytesToInt (Int Int Int Int) Int)
(declare-fun TwoBytesToInt (Int Int) Int)
(declare-fun OneByteToInt (Int) Int)
(declare-fun BYTE () Int)
(declare-fun FREED () Int)
(declare-fun ALLOCATED () Int)
(declare-fun UNALLOCATED () Int)
(declare-fun Base (Int) Int)
(declare-fun alloc_1 () Int)
(declare-fun alloc () Int)
(declare-fun Mem_1 () Int)
(declare-fun Mem () Int)
(declare-fun result_main_12_5_1_ () Int)
(declare-fun call4437formal_new_0 () Int)
(declare-fun alloc_0 () Int)
(declare-fun y_1 () Int)
(declare-fun result_free_24_5_3_ () Int)
(declare-fun Mem_0 () Int)
(declare-fun y_0 () Int)
(declare-fun y () Int)
(declare-fun x_1 () Int)
(declare-fun result_malloc_14_23_2_ () Int)
(declare-fun ?x_1!2 (Int Int) Int)
(declare-fun ?x_1!3 (Int Int) Int)
(declare-fun ?k!0 (Int Int) Int)
(declare-fun ?y!1 (Int Int Int) Int)
(declare-fun ?a!4 () Int)
(declare-fun ?a!5 () Int)
(declare-fun ?a!6 () Int)
(declare-fun ?f!8 () Int)
(declare-fun ?f!9 () Int)
(declare-fun ?m!7 () Int)
(assert (! (forall ((?Apy0 Int)(?ipy0 Int)(?jpy0 Int)(?vpy0 Int)) (! (or (= ?ipy0 ?jpy0) (= (select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0) (select1 ?Apy0 ?jpy0))) :pattern ((select1 (store1 ?Apy0 ?ipy0 ?vpy0) ?jpy0)) )) :named A0_0))
(assert (! (forall ((?Apy1 Int)(?ipy1 Int)(?vpy1 Int)) (! (= (select1 (store1 ?Apy1 ?ipy1 ?vpy1) ?ipy1) ?vpy1) :pattern ((store1 ?Apy1 ?ipy1 ?vpy1)) )) :named A0_1))
(assert (! (forall ((?Apy2 Int)(?opy0 Int)(?fpy0 Int)(?ppy0 Int)(?gpy0 Int)(?vpy2 Int)) (! (or (= ?fpy0 ?gpy0) (= (select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0) (select2 ?Apy2 ?ppy0 ?gpy0))) :pattern ((select2 (store2 ?Apy2 ?opy0 ?fpy0 ?vpy2) ?ppy0 ?gpy0)) )) :named A0_2))
(assert (! (forall ((?Apy3 Int)(?opy1 Int)(?fpy1 Int)(?ppy1 Int)(?gpy1 Int)(?vpy3 Int)) (! (or (= ?opy1 ?ppy1) (= (select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1) (select2 ?Apy3 ?ppy1 ?gpy1))) :pattern ((select2 (store2 ?Apy3 ?opy1 ?fpy1 ?vpy3) ?ppy1 ?gpy1)) )) :named A0_3))
(assert (! (forall ((?Apy4 Int)(?opy2 Int)(?fpy2 Int)(?vpy4 Int)) (! (= (select2 (store2 ?Apy4 ?opy2 ?fpy2 ?vpy4) ?opy2 ?fpy2) ?vpy4) :pattern ((store2 ?Apy4 ?opy2 ?fpy2 ?vpy4)) )) :named A0_4))
(assert (! (forall ((?tpy0 Int)(?upy0 Int)(?vpy5 Int)) (! (or (not (= (x ?tpy0 ?upy0) true_1)) (not (= (x ?upy0 ?vpy5) true_1)) (= (x ?tpy0 ?vpy5) true_1)) :pattern ((x ?tpy0 ?upy0) (x ?upy0 ?vpy5)) )) :named A0_5))
(assert (! (forall ((?tpy1 Int)(?upy1 Int)) (! (or (= ?tpy1 ?upy1) (not (= (x ?tpy1 ?upy1) true_1)) (not (= (x ?upy1 ?tpy1) true_1))) :pattern ((x ?tpy1 ?upy1) (x ?upy1 ?tpy1)) )) :named A0_6))
(assert (! (forall ((?tpy2 Int)) (! (= (x ?tpy2 ?tpy2) true_1) :pattern ((x ?tpy2 ?tpy2)) )) :named A0_7))
(assert (! (forall ((?x_1py0 Int)(?ypy0 Int)) (! (and (or (not (= ?x_1py0 ?ypy0)) (not (= (anyNeq ?x_1py0 ?ypy0) true_1))) (or (= ?x_1py0 ?ypy0) (= (anyNeq ?x_1py0 ?ypy0) true_1))) :pattern ((anyNeq ?x_1py0 ?ypy0)) )) :named A0_8))
(assert (! (forall ((?x_1py1 Int)(?ypy1 Int)) (! (and (or (= ?x_1py1 true_1) (= ?ypy1 true_1) (not (= (boolOr ?x_1py1 ?ypy1) true_1))) (or (= (boolOr ?x_1py1 ?ypy1) true_1) (and (not (= ?x_1py1 true_1)) (not (= ?ypy1 true_1))))) :pattern ((boolOr ?x_1py1 ?ypy1)) )) :named A0_9))
(assert (! (forall ((?x_1py2 Int)(?ypy2 Int)) (! (and (or (= ?ypy2 true_1) (not (= ?x_1py2 true_1)) (not (= (boolImplies ?x_1py2 ?ypy2) true_1))) (or (= (boolImplies ?x_1py2 ?ypy2) true_1) (and (= ?x_1py2 true_1) (not (= ?ypy2 true_1))))) :pattern ((boolImplies ?x_1py2 ?ypy2)) )) :named A0_10))
(assert (! (forall ((?x_1py3 Int)(?ypy3 Int)) (! (and (or (not (<= ?x_1py3 ?ypy3)) (not (= (intGreater ?x_1py3 ?ypy3) true_1))) (or (<= ?x_1py3 ?ypy3) (= (intGreater ?x_1py3 ?ypy3) true_1))) :pattern ((intGreater ?x_1py3 ?ypy3)) )) :named A0_11))
(assert (! (forall ((?x_1py4 Int)(?ypy4 Int)) (! (and (or (not (<= ?ypy4 ?x_1py4)) (not (= (intLess ?x_1py4 ?ypy4) true_1))) (or (= (intLess ?x_1py4 ?ypy4) true_1) (<= ?ypy4 ?x_1py4))) :pattern ((intLess ?x_1py4 ?ypy4)) )) :named A0_12))
(assert (! (forall ((?x_1py5 Int)(?ypy5 Int)) (! (and (or (not (= (anyEqual ?x_1py5 ?ypy5) true_1)) (= ?x_1py5 ?ypy5)) (or (= (anyEqual ?x_1py5 ?ypy5) true_1) (not (= ?x_1py5 ?ypy5)))) :pattern ((anyEqual ?x_1py5 ?ypy5)) )) :named A0_13))
(assert (! (forall ((?x_1py6 Int)(?ypy6 Int)) (! (and (or (not (= (boolAnd ?x_1py6 ?ypy6) true_1)) (and (= ?x_1py6 true_1) (= ?ypy6 true_1))) (or (= (boolAnd ?x_1py6 ?ypy6) true_1) (not (= ?x_1py6 true_1)) (not (= ?ypy6 true_1)))) :pattern ((boolAnd ?x_1py6 ?ypy6)) )) :named A0_14))
(assert (! (forall ((?x_1py7 Int)(?ypy7 Int)) (! (and (or (not (= (boolIff ?x_1py7 ?ypy7) true_1)) (and (or (not (= ?x_1py7 true_1)) (= ?ypy7 true_1)) (or (= ?x_1py7 true_1) (not (= ?ypy7 true_1))))) (or (= (boolIff ?x_1py7 ?ypy7) true_1) (and (or (= ?x_1py7 true_1) (= ?ypy7 true_1)) (or (not (= ?x_1py7 true_1)) (not (= ?ypy7 true_1)))))) :pattern ((boolIff ?x_1py7 ?ypy7)) )) :named A0_15))
(assert (! (forall ((?x_1py8 Int)(?ypy8 Int)) (! (and (or (not (= (intAtLeast ?x_1py8 ?ypy8) true_1)) (<= ?ypy8 ?x_1py8)) (or (= (intAtLeast ?x_1py8 ?ypy8) true_1) (not (<= ?ypy8 ?x_1py8)))) :pattern ((intAtLeast ?x_1py8 ?ypy8)) )) :named A0_16))
(assert (! (forall ((?x_1py9 Int)(?ypy9 Int)) (! (and (or (not (= (intAtMost ?x_1py9 ?ypy9) true_1)) (<= ?x_1py9 ?ypy9)) (or (= (intAtMost ?x_1py9 ?ypy9) true_1) (not (<= ?x_1py9 ?ypy9)))) :pattern ((intAtMost ?x_1py9 ?ypy9)) )) :named A0_17))
(assert (! (forall ((?x_1py10 Int)) (! (and (or (not (= ?x_1py10 true_1)) (not (= (boolNot ?x_1py10) true_1))) (or (= ?x_1py10 true_1) (= (boolNot ?x_1py10) true_1))) :pattern ((boolNot ?x_1py10)) )) :named A0_18))
(assert (! (not (= false_1 true_1)) :named A0_19))
(assert (! (= (POW2 1) true_1) :named A1_0))
(assert (! (= (POW2 1024) true_1) :named A1_1))
(assert (! (= (POW2 1048576) true_1) :named A1_2))
(assert (! (= (POW2 128) true_1) :named A1_3))
(assert (! (= (POW2 131072) true_1) :named A1_4))
(assert (! (= (POW2 16) true_1) :named A1_5))
(assert (! (= (POW2 16384) true_1) :named A1_6))
(assert (! (= (POW2 16777216) true_1) :named A1_7))
(assert (! (= (POW2 2) true_1) :named A1_8))
(assert (! (= (POW2 2048) true_1) :named A1_9))
(assert (! (= (POW2 2097152) true_1) :named A1_10))
(assert (! (= (POW2 256) true_1) :named A1_11))
(assert (! (= (POW2 262144) true_1) :named A1_12))
(assert (! (= (POW2 32) true_1) :named A1_13))
(assert (! (= (POW2 32768) true_1) :named A1_14))
(assert (! (= (POW2 33554432) true_1) :named A1_15))
(assert (! (= (POW2 4) true_1) :named A1_16))
(assert (! (= (POW2 4096) true_1) :named A1_17))
(assert (! (= (POW2 4194304) true_1) :named A1_18))
(assert (! (= (POW2 512) true_1) :named A1_19))
(assert (! (= (POW2 524288) true_1) :named A1_20))
(assert (! (= (POW2 64) true_1) :named A1_21))
(assert (! (= (POW2 65536) true_1) :named A1_22))
(assert (! (= (POW2 8) true_1) :named A1_23))
(assert (! (= (POW2 8192) true_1) :named A1_24))
(assert (! (= (POW2 8388608) true_1) :named A1_25))
(assert (! (and (not (= UNALLOCATED ALLOCATED)) (not (= UNALLOCATED FREED)) (not (= UNALLOCATED BYTE)) (not (= UNALLOCATED f__Foo_name)) (not (= UNALLOCATED g__Foo_name)) (not (= UNALLOCATED CHAR_name)) (not (= UNALLOCATED INT4_name)) (not (= UNALLOCATED PCHAR_name)) (not (= UNALLOCATED PINT4_name)) (not (= UNALLOCATED PPCHAR_name)) (not (= UNALLOCATED PP_Foo_name)) (not (= UNALLOCATED P_Foo_name)) (not (= UNALLOCATED UINT4_name)) (not (= UNALLOCATED Foo_name)) (not (= ALLOCATED FREED)) (not (= ALLOCATED BYTE)) (not (= ALLOCATED f__Foo_name)) (not (= ALLOCATED g__Foo_name)) (not (= ALLOCATED CHAR_name)) (not (= ALLOCATED INT4_name)) (not (= ALLOCATED PCHAR_name)) (not (= ALLOCATED PINT4_name)) (not (= ALLOCATED PPCHAR_name)) (not (= ALLOCATED PP_Foo_name)) (not (= ALLOCATED P_Foo_name)) (not (= ALLOCATED UINT4_name)) (not (= ALLOCATED Foo_name)) (not (= FREED BYTE)) (not (= FREED f__Foo_name)) (not (= FREED g__Foo_name)) (not (= FREED CHAR_name)) (not (= FREED INT4_name)) (not (= FREED PCHAR_name)) (not (= FREED PINT4_name)) (not (= FREED PPCHAR_name)) (not (= FREED PP_Foo_name)) (not (= FREED P_Foo_name)) (not (= FREED UINT4_name)) (not (= FREED Foo_name)) (not (= BYTE f__Foo_name)) (not (= BYTE g__Foo_name)) (not (= BYTE CHAR_name)) (not (= BYTE INT4_name)) (not (= BYTE PCHAR_name)) (not (= BYTE PINT4_name)) (not (= BYTE PPCHAR_name)) (not (= BYTE PP_Foo_name)) (not (= BYTE P_Foo_name)) (not (= BYTE UINT4_name)) (not (= BYTE Foo_name)) (not (= f__Foo_name g__Foo_name)) (not (= f__Foo_name CHAR_name)) (not (= f__Foo_name INT4_name)) (not (= f__Foo_name PCHAR_name)) (not (= f__Foo_name PINT4_name)) (not (= f__Foo_name PPCHAR_name)) (not (= f__Foo_name PP_Foo_name)) (not (= f__Foo_name P_Foo_name)) (not (= f__Foo_name UINT4_name)) (not (= f__Foo_name Foo_name)) (not (= g__Foo_name CHAR_name)) (not (= g__Foo_name INT4_name)) (not (= g__Foo_name PCHAR_name)) (not (= g__Foo_name PINT4_name)) (not (= g__Foo_name PPCHAR_name)) (not (= g__Foo_name PP_Foo_name)) (not (= g__Foo_name P_Foo_name)) (not (= g__Foo_name UINT4_name)) (not (= g__Foo_name Foo_name)) (not (= CHAR_name INT4_name)) (not (= CHAR_name PCHAR_name)) (not (= CHAR_name PINT4_name)) (not (= CHAR_name PPCHAR_name)) (not (= CHAR_name PP_Foo_name)) (not (= CHAR_name P_Foo_name)) (not (= CHAR_name UINT4_name)) (not (= CHAR_name Foo_name)) (not (= INT4_name PCHAR_name)) (not (= INT4_name PINT4_name)) (not (= INT4_name PPCHAR_name)) (not (= INT4_name PP_Foo_name)) (not (= INT4_name P_Foo_name)) (not (= INT4_name UINT4_name)) (not (= INT4_name Foo_name)) (not (= PCHAR_name PINT4_name)) (not (= PCHAR_name PPCHAR_name)) (not (= PCHAR_name PP_Foo_name)) (not (= PCHAR_name P_Foo_name)) (not (= PCHAR_name UINT4_name)) (not (= PCHAR_name Foo_name)) (not (= PINT4_name PPCHAR_name)) (not (= PINT4_name PP_Foo_name)) (not (= PINT4_name P_Foo_name)) (not (= PINT4_name UINT4_name)) (not (= PINT4_name Foo_name)) (not (= PPCHAR_name PP_Foo_name)) (not (= PPCHAR_name P_Foo_name)) (not (= PPCHAR_name UINT4_name)) (not (= PPCHAR_name Foo_name)) (not (= PP_Foo_name P_Foo_name)) (not (= PP_Foo_name UINT4_name)) (not (= PP_Foo_name Foo_name)) (not (= P_Foo_name UINT4_name)) (not (= P_Foo_name Foo_name)) (not (= UINT4_name Foo_name))) :named A1_26))
(assert (! (forall ((?Mpy0 Int)(?x_1py11 Int)(?ypy10 Int)) (! (= (Unified (store1 ?Mpy0 (Field ?x_1py11) (store1 (select1 ?Mpy0 (Field ?x_1py11)) ?x_1py11 ?ypy10))) (store1 (Unified ?Mpy0) ?x_1py11 ?ypy10)) :pattern ((Unified (store1 ?Mpy0 (Field ?x_1py11) (store1 (select1 ?Mpy0 (Field ?x_1py11)) ?x_1py11 ?ypy10)))) )) :named A1_27))
(assert (! (forall ((?Mpy1 Int)(?x_1py12 Int)) (! (= (select1 (Unified ?Mpy1) ?x_1py12) (select1 (select1 ?Mpy1 (Field ?x_1py12)) ?x_1py12)) :pattern ((select1 (Unified ?Mpy1) ?x_1py12)) )) :named A1_28))
(assert (! (forall ((?Spy0 Int)(?Tpy0 Int)) (! (and (or (not (= (Equal ?Spy0 ?Tpy0) true_1)) (and (= (Subset ?Spy0 ?Tpy0) true_1) (= (Subset ?Tpy0 ?Spy0) true_1))) (or (= (Equal ?Spy0 ?Tpy0) true_1) (not (= (Subset ?Spy0 ?Tpy0) true_1)) (not (= (Subset ?Tpy0 ?Spy0) true_1)))) :pattern ((Equal ?Spy0 ?Tpy0)) )) :named A1_29))
(assert (! (forall ((?Spy1 Int)(?Tpy1 Int)) (! (or (= (Disjoint ?Spy1 ?Tpy1) true_1) (and (= (select1 ?Spy1 (?x_1!3 ?Tpy1 ?Spy1)) true_1) (= (select1 ?Tpy1 (?x_1!3 ?Tpy1 ?Spy1)) true_1))) :pattern ((Disjoint ?Spy1 ?Tpy1)) )) :named A1_30))
(assert (! (forall ((?Spy2 Int)(?Tpy2 Int)) (! (or (= (Subset ?Spy2 ?Tpy2) true_1) (and (= (select1 ?Spy2 (?x_1!2 ?Tpy2 ?Spy2)) true_1) (not (= (select1 ?Tpy2 (?x_1!2 ?Tpy2 ?Spy2)) true_1)))) :pattern ((Subset ?Spy2 ?Tpy2)) )) :named A1_31))
(assert (! (forall ((?apy0 Int)(?a_sizepy0 Int)(?bpy0 Int)) (! (= (MINUS_LEFT_PTR ?apy0 ?a_sizepy0 ?bpy0) (+ ?apy0 (* (- 1) ?bpy0 ?a_sizepy0))) :pattern ((MINUS_LEFT_PTR ?apy0 ?a_sizepy0 ?bpy0)) )) :named A1_32))
(assert (! (forall ((?apy1 Int)(?a_sizepy1 Int)(?bpy1 Int)) (! (= (PLUS ?apy1 ?a_sizepy1 ?bpy1) (+ ?apy1 (* ?bpy1 ?a_sizepy1))) :pattern ((PLUS ?apy1 ?a_sizepy1 ?bpy1)) )) :named A1_33))
(assert (! (forall ((?apy2 Int)(?bpy2 Int)(?cpy0 Int)) (! (or (= ?apy2 true_1) (= (choose ?apy2 ?bpy2 ?cpy0) ?cpy0)) :pattern ((choose ?apy2 ?bpy2 ?cpy0)) )) :named A1_34))
(assert (! (forall ((?apy3 Int)(?bpy3 Int)(?cpy1 Int)) (! (or (not (= ?apy3 true_1)) (= (choose ?apy3 ?bpy3 ?cpy1) ?bpy3)) :pattern ((choose ?apy3 ?bpy3 ?cpy1)) )) :named A1_35))
(assert (! (forall ((?apy4 Int)(?bpy4 Int)(?sizepy0 Int)) (! (and (<= (* (MINUS_BOTH_PTR_OR_BOTH_INT ?apy4 ?bpy4 ?sizepy0) ?sizepy0) (+ ?apy4 (* (- 1) ?bpy4))) (not (<= (* (+ 1 (MINUS_BOTH_PTR_OR_BOTH_INT ?apy4 ?bpy4 ?sizepy0)) ?sizepy0) (+ ?apy4 (* (- 1) ?bpy4))))) :pattern ((MINUS_BOTH_PTR_OR_BOTH_INT ?apy4 ?bpy4 ?sizepy0)) )) :named A1_36))
(assert (! (forall ((?apy5 Int)(?bpy5 Int)) (! (= (MULT ?apy5 ?bpy5) (* ?bpy5 ?apy5)) :pattern ((MULT ?apy5 ?bpy5)) )) :named A1_37))
(assert (! (forall ((?apy6 Int)(?bpy6 Int)) (! (or (<= 0 ?bpy6) (<= 0 ?apy6) (and (<= ?apy6 (* (DIV ?apy6 ?bpy6) ?bpy6)) (not (<= ?apy6 (* (+ 1 (DIV ?apy6 ?bpy6)) ?bpy6))))) :pattern ((DIV ?apy6 ?bpy6)) )) :named A1_38))
(assert (! (forall ((?apy7 Int)(?bpy7 Int)) (! (or (<= ?bpy7 0) (<= 0 ?apy7) (and (<= ?apy7 (* (DIV ?apy7 ?bpy7) ?bpy7)) (not (<= ?apy7 (* (+ (- 1) (DIV ?apy7 ?bpy7)) ?bpy7))))) :pattern ((DIV ?apy7 ?bpy7)) )) :named A1_39))
(assert (! (forall ((?apy8 Int)(?bpy8 Int)) (! (or (<= ?bpy8 0) (not (<= 0 ?apy8)) (and (<= (* (DIV ?apy8 ?bpy8) ?bpy8) ?apy8) (not (<= (* (+ 1 (DIV ?apy8 ?bpy8)) ?bpy8) ?apy8)))) :pattern ((DIV ?apy8 ?bpy8)) )) :named A1_40))
(assert (! (forall ((?apy9 Int)(?bpy9 Int)) (! (or (= (BIT_BAND ?apy9 ?bpy9) 0) (and (not (= ?apy9 0)) (not (= ?bpy9 0)))) :pattern ((BIT_BAND ?apy9 ?bpy9)) )) :named A1_41))
(assert (! (forall ((?apy10 Int)(?bpy10 Int)) (! (or (= ?apy10 ?bpy10) (not (= (POW2 ?apy10) true_1)) (not (= (POW2 ?bpy10) true_1)) (= (BIT_BAND ?apy10 ?bpy10) 0)) :pattern ((BIT_BAND ?apy10 ?bpy10)) )) :named A1_42))
(assert (! (forall ((?apy11 Int)(?bpy11 Int)) (! (or (not (= ?apy11 ?bpy11)) (= (BIT_BAND ?apy11 ?bpy11) ?apy11)) :pattern ((BIT_BAND ?apy11 ?bpy11)) )) :named A1_43))
(assert (! (forall ((?apy12 Int)(?bpy12 Int)) (! (or (not (<= 0 ?apy12)) (<= 0 ?bpy12) (and (<= (* (DIV ?apy12 ?bpy12) ?bpy12) ?apy12) (not (<= (* (+ (- 1) (DIV ?apy12 ?bpy12)) ?bpy12) ?apy12)))) :pattern ((DIV ?apy12 ?bpy12)) )) :named A1_44))
(assert (! (forall ((?apy13 Int)) (! (and (or (not (= (Match ?apy13 CHAR_name) true_1)) (= (Field ?apy13) CHAR_name)) (or (= (Match ?apy13 CHAR_name) true_1) (not (= (Field ?apy13) CHAR_name)))) :pattern ((Match ?apy13 CHAR_name)) )) :named A1_45))
(assert (! (forall ((?apy14 Int)) (! (and (or (not (= (Match ?apy14 Foo_name) true_1)) (and (= (Match (f__Foo ?apy14) f__Foo_name) true_1) (= (Match (g__Foo ?apy14) g__Foo_name) true_1))) (or (= (Match ?apy14 Foo_name) true_1) (not (= (Match (f__Foo ?apy14) f__Foo_name) true_1)) (not (= (Match (g__Foo ?apy14) g__Foo_name) true_1)))) :pattern ((Match ?apy14 Foo_name)) )) :named A1_46))
(assert (! (forall ((?apy15 Int)) (! (and (or (not (= (Match ?apy15 INT4_name) true_1)) (= (Field ?apy15) INT4_name)) (or (= (Match ?apy15 INT4_name) true_1) (not (= (Field ?apy15) INT4_name)))) :pattern ((Match ?apy15 INT4_name)) )) :named A1_47))
(assert (! (forall ((?apy16 Int)) (! (and (or (not (= (Match ?apy16 PCHAR_name) true_1)) (= (Field ?apy16) PCHAR_name)) (or (= (Match ?apy16 PCHAR_name) true_1) (not (= (Field ?apy16) PCHAR_name)))) :pattern ((Match ?apy16 PCHAR_name)) )) :named A1_48))
(assert (! (forall ((?apy17 Int)) (! (and (or (not (= (Match ?apy17 PINT4_name) true_1)) (= (Field ?apy17) PINT4_name)) (or (= (Match ?apy17 PINT4_name) true_1) (not (= (Field ?apy17) PINT4_name)))) :pattern ((Match ?apy17 PINT4_name)) )) :named A1_49))
(assert (! (forall ((?apy18 Int)) (! (and (or (not (= (Match ?apy18 PPCHAR_name) true_1)) (= (Field ?apy18) PPCHAR_name)) (or (= (Match ?apy18 PPCHAR_name) true_1) (not (= (Field ?apy18) PPCHAR_name)))) :pattern ((Match ?apy18 PPCHAR_name)) )) :named A1_50))
(assert (! (forall ((?apy19 Int)) (! (and (or (not (= (Match ?apy19 PP_Foo_name) true_1)) (= (Field ?apy19) PP_Foo_name)) (or (= (Match ?apy19 PP_Foo_name) true_1) (not (= (Field ?apy19) PP_Foo_name)))) :pattern ((Match ?apy19 PP_Foo_name)) )) :named A1_51))
(assert (! (forall ((?apy20 Int)) (! (and (or (not (= (Match ?apy20 P_Foo_name) true_1)) (= (Field ?apy20) P_Foo_name)) (or (= (Match ?apy20 P_Foo_name) true_1) (not (= (Field ?apy20) P_Foo_name)))) :pattern ((Match ?apy20 P_Foo_name)) )) :named A1_52))
(assert (! (forall ((?apy21 Int)) (! (and (or (not (= (Match ?apy21 UINT4_name) true_1)) (= (Field ?apy21) UINT4_name)) (or (= (Match ?apy21 UINT4_name) true_1) (not (= (Field ?apy21) UINT4_name)))) :pattern ((Match ?apy21 UINT4_name)) )) :named A1_53))
(assert (! (forall ((?apy22 Int)) (! (and (or (not (= (Match ?apy22 f__Foo_name) true_1)) (= (Field ?apy22) f__Foo_name)) (or (= (Match ?apy22 f__Foo_name) true_1) (not (= (Field ?apy22) f__Foo_name)))) :pattern ((Match ?apy22 f__Foo_name)) )) :named A1_54))
(assert (! (forall ((?apy23 Int)) (! (and (or (not (= (Match ?apy23 g__Foo_name) true_1)) (= (Field ?apy23) g__Foo_name)) (or (= (Match ?apy23 g__Foo_name) true_1) (not (= (Field ?apy23) g__Foo_name)))) :pattern ((Match ?apy23 g__Foo_name)) )) :named A1_55))
(assert (! (forall ((?apy24 Int)) (! (and (or (not (= ?apy24 true_1)) (not (= (LIFT ?apy24) 0))) (or (= ?apy24 true_1) (= (LIFT ?apy24) 0))) :pattern ((LIFT ?apy24)) )) :named A1_56))
(assert (! (forall ((?apy25 Int)) (! (or (= ?apy25 0) (= (NULL_CHECK ?apy25) 0)) :pattern ((NULL_CHECK ?apy25)) )) :named A1_57))
(assert (! (forall ((?apy26 Int)) (! (or (= ?apy26 0) (= (boolNot ?apy26) 0)) :pattern ((boolNot ?apy26)) )) :named A1_58))
(assert (! (forall ((?apy27 Int)) (! (or (not (= ?apy27 0)) (not (= (NULL_CHECK ?apy27) 0))) :pattern ((NULL_CHECK ?apy27)) )) :named A1_59))
(assert (! (forall ((?apy28 Int)) (! (or (not (= ?apy28 0)) (not (= (boolNot ?apy28) 0))) :pattern ((boolNot ?apy28)) )) :named A1_60))
(assert (! (forall ((?b0py0 Int)(?b1py0 Int)(?b2py0 Int)(?b3py0 Int)(?c0py0 Int)(?c1py0 Int)(?c2py0 Int)(?c3py0 Int)) (! (or (not (= (FourBytesToInt ?b0py0 ?b1py0 ?b2py0 ?b3py0) (FourBytesToInt ?c0py0 ?c1py0 ?c2py0 ?c3py0))) (and (= ?b0py0 ?c0py0) (= ?b1py0 ?c1py0) (= ?b2py0 ?c2py0) (= ?b3py0 ?c3py0))) :pattern ((FourBytesToInt ?b0py0 ?b1py0 ?b2py0 ?b3py0) (FourBytesToInt ?c0py0 ?c1py0 ?c2py0 ?c3py0)) )) :named A1_61))
(assert (! (forall ((?b0py1 Int)(?b1py1 Int)(?c0py1 Int)(?c1py1 Int)) (! (or (not (= (TwoBytesToInt ?b0py1 ?b1py1) (TwoBytesToInt ?c0py1 ?c1py1))) (and (= ?b0py1 ?c0py1) (= ?b1py1 ?c1py1))) :pattern ((TwoBytesToInt ?b0py1 ?b1py1) (TwoBytesToInt ?c0py1 ?c1py1)) )) :named A1_62))
(assert (! (forall ((?b0py2 Int)(?c0py2 Int)) (! (or (not (= (OneByteToInt ?b0py2) (OneByteToInt ?c0py2))) (= ?b0py2 ?c0py2)) :pattern ((OneByteToInt ?b0py2) (OneByteToInt ?c0py2)) )) :named A1_63))
(assert (! (forall ((?fpy3 Int)(?x_1py13 Int)(?ypy11 Int)(?zpy0 Int)) (! (or (= ?ypy11 ?zpy0) (= (Equal (Inverse (store1 ?fpy3 ?x_1py13 ?ypy11) ?zpy0) (Difference (Inverse ?fpy3 ?zpy0) (Singleton ?x_1py13))) true_1)) :pattern ((Inverse (store1 ?fpy3 ?x_1py13 ?ypy11) ?zpy0)) )) :named A1_64))
(assert (! (forall ((?fpy4 Int)(?x_1py14 Int)(?ypy12 Int)) (! (= (Equal (Inverse (store1 ?fpy4 ?x_1py14 ?ypy12) ?ypy12) (Union (Inverse ?fpy4 ?ypy12) (Singleton ?x_1py14))) true_1) :pattern ((Inverse (store1 ?fpy4 ?x_1py14 ?ypy12) ?ypy12)) )) :named A1_65))
(assert (! (forall ((?fpy5 Int)(?x_1py15 Int)) (! (= (select1 (Inverse ?fpy5 (select1 ?fpy5 ?x_1py15)) ?x_1py15) true_1) :pattern ((Inverse ?fpy5 (select1 ?fpy5 ?x_1py15))) )) :named A1_66))
(assert (! (forall ((?npy0 Int)(?x_1py16 Int)(?ypy13 Int)) (! (or (= (select1 (AtLeast ?npy0 ?x_1py16) ?ypy13) true_1) (not (<= ?x_1py16 ?ypy13)) (not (= (Rep ?npy0 ?x_1py16) (Rep ?npy0 ?ypy13)))) :pattern ((AtLeast ?npy0 ?x_1py16) (Rep ?npy0 ?x_1py16) (Rep ?npy0 ?ypy13)) )) :named A1_67))
(assert (! (forall ((?npy1 Int)(?x_1py17 Int)(?ypy14 Int)) (! (or (not (= (select1 (AtLeast ?npy1 ?x_1py17) ?ypy14) true_1)) (and (<= ?x_1py17 ?ypy14) (= (Rep ?npy1 ?x_1py17) (Rep ?npy1 ?ypy14)))) :pattern ((select1 (AtLeast ?npy1 ?x_1py17) ?ypy14)) )) :named A1_68))
(assert (! (forall ((?npy2 Int)(?x_1py18 Int)(?zpy1 Int)) (! (= (Rep ?npy2 ?x_1py18) (Rep ?npy2 (PLUS ?x_1py18 ?npy2 ?zpy1))) :pattern ((PLUS ?x_1py18 ?npy2 ?zpy1)) )) :named A1_69))
(assert (! (forall ((?npy3 Int)(?x_1py19 Int)) (! (= (+ (Rep ?npy3 ?x_1py19) (* (- 1) ?x_1py19)) (* (?k!0 ?x_1py19 ?npy3) ?npy3)) :pattern ((Rep ?npy3 ?x_1py19)) )) :named A1_70))
(assert (! (forall ((?npy4 Int)(?x_1py20 Int)) (! (= (select1 (AtLeast ?npy4 ?x_1py20) ?x_1py20) true_1) :pattern ((AtLeast ?npy4 ?x_1py20)) )) :named A1_71))
(assert (! (forall ((?vpy6 Int)(?tpy3 Int)) (! (or (not (= (HasType ?vpy6 ?tpy3) true_1)) (= (select1 (Values ?tpy3) ?vpy6) true_1)) :pattern ((HasType ?vpy6 ?tpy3) (Values ?tpy3)) )) :named A1_72))
(assert (! (forall ((?vpy7 Int)(?tpy4 Int)) (! (or (not (= (select1 (Values ?tpy4) ?vpy7) true_1)) (= (HasType ?vpy7 ?tpy4) true_1)) :pattern ((select1 (Values ?tpy4) ?vpy7)) )) :named A1_73))
(assert (! (forall ((?vpy8 Int)) (! (and (or (not (= (HasType ?vpy8 PCHAR_name) true_1)) (= ?vpy8 0) (and (not (<= ?vpy8 0)) (= (Match ?vpy8 CHAR_name) true_1))) (or (= (HasType ?vpy8 PCHAR_name) true_1) (and (not (= ?vpy8 0)) (or (<= ?vpy8 0) (not (= (Match ?vpy8 CHAR_name) true_1)))))) :pattern ((HasType ?vpy8 PCHAR_name)) :pattern ((Match ?vpy8 CHAR_name)) )) :named A1_74))
(assert (! (forall ((?vpy9 Int)) (! (and (or (not (= (HasType ?vpy9 PINT4_name) true_1)) (= ?vpy9 0) (and (not (<= ?vpy9 0)) (= (Match ?vpy9 INT4_name) true_1))) (or (= (HasType ?vpy9 PINT4_name) true_1) (and (not (= ?vpy9 0)) (or (<= ?vpy9 0) (not (= (Match ?vpy9 INT4_name) true_1)))))) :pattern ((HasType ?vpy9 PINT4_name)) :pattern ((Match ?vpy9 INT4_name)) )) :named A1_75))
(assert (! (forall ((?vpy10 Int)) (! (and (or (not (= (HasType ?vpy10 PPCHAR_name) true_1)) (= ?vpy10 0) (and (not (<= ?vpy10 0)) (= (Match ?vpy10 PCHAR_name) true_1))) (or (= (HasType ?vpy10 PPCHAR_name) true_1) (and (not (= ?vpy10 0)) (or (<= ?vpy10 0) (not (= (Match ?vpy10 PCHAR_name) true_1)))))) :pattern ((HasType ?vpy10 PPCHAR_name)) :pattern ((Match ?vpy10 PCHAR_name)) )) :named A1_76))
(assert (! (forall ((?vpy11 Int)) (! (and (or (not (= (HasType ?vpy11 PP_Foo_name) true_1)) (= ?vpy11 0) (and (not (<= ?vpy11 0)) (= (Match ?vpy11 P_Foo_name) true_1))) (or (= (HasType ?vpy11 PP_Foo_name) true_1) (and (not (= ?vpy11 0)) (or (<= ?vpy11 0) (not (= (Match ?vpy11 P_Foo_name) true_1)))))) :pattern ((HasType ?vpy11 PP_Foo_name)) :pattern ((Match ?vpy11 P_Foo_name)) )) :named A1_77))
(assert (! (forall ((?vpy12 Int)) (! (and (or (not (= (HasType ?vpy12 P_Foo_name) true_1)) (= ?vpy12 0) (and (not (<= ?vpy12 0)) (= (Match ?vpy12 Foo_name) true_1))) (or (= (HasType ?vpy12 P_Foo_name) true_1) (and (not (= ?vpy12 0)) (or (<= ?vpy12 0) (not (= (Match ?vpy12 Foo_name) true_1)))))) :pattern ((HasType ?vpy12 P_Foo_name)) :pattern ((Match ?vpy12 Foo_name)) )) :named A1_78))
(assert (! (forall ((?vpy13 Int)) (! (= (HasType ?vpy13 CHAR_name) true_1) :pattern ((HasType ?vpy13 CHAR_name)) )) :named A1_79))
(assert (! (forall ((?vpy14 Int)) (! (= (HasType ?vpy14 INT4_name) true_1) :pattern ((HasType ?vpy14 INT4_name)) )) :named A1_80))
(assert (! (forall ((?vpy15 Int)) (! (= (HasType ?vpy15 UINT4_name) true_1) :pattern ((HasType ?vpy15 UINT4_name)) )) :named A1_81))
(assert (! (forall ((?vpy16 Int)) (! (= (HasType ?vpy16 f__Foo_name) true_1) :pattern ((HasType ?vpy16 f__Foo_name)) )) :named A1_82))
(assert (! (forall ((?vpy17 Int)) (! (= (HasType ?vpy17 g__Foo_name) true_1) :pattern ((HasType ?vpy17 g__Foo_name)) )) :named A1_83))
(assert (! (forall ((?x_1py21 Int)(?Spy3 Int)(?Mpy2 Int)) (! (or (not (= (select1 (Dereference ?Spy3 ?Mpy2) ?x_1py21) true_1)) (and (= ?x_1py21 (select1 ?Mpy2 (?y!1 ?Mpy2 ?Spy3 ?x_1py21))) (= (select1 ?Spy3 (?y!1 ?Mpy2 ?Spy3 ?x_1py21)) true_1))) :pattern ((select1 (Dereference ?Spy3 ?Mpy2) ?x_1py21)) )) :named A1_84))
(assert (! (forall ((?x_1py22 Int)(?Spy4 Int)(?Mpy3 Int)) (! (or (not (= (select1 ?Spy4 ?x_1py22) true_1)) (= (select1 (Dereference ?Spy4 ?Mpy3) (select1 ?Mpy3 ?x_1py22)) true_1)) :pattern ((select1 ?Mpy3 ?x_1py22) (select1 ?Spy4 ?x_1py22) (Dereference ?Spy4 ?Mpy3)) )) :named A1_85))
(assert (! (forall ((?x_1py23 Int)(?Spy5 Int)(?Tpy3 Int)) (! (and (or (= (select1 ?Spy5 ?x_1py23) true_1) (= (select1 ?Tpy3 ?x_1py23) true_1) (not (= (select1 (Union ?Spy5 ?Tpy3) ?x_1py23) true_1))) (or (= (select1 (Union ?Spy5 ?Tpy3) ?x_1py23) true_1) (and (not (= (select1 ?Spy5 ?x_1py23) true_1)) (not (= (select1 ?Tpy3 ?x_1py23) true_1))))) :pattern ((select1 (Union ?Spy5 ?Tpy3) ?x_1py23)) )) :named A1_86))
(assert (! (forall ((?x_1py24 Int)(?Spy6 Int)(?Tpy4 Int)) (! (and (or (not (= (select1 (Difference ?Spy6 ?Tpy4) ?x_1py24) true_1)) (and (= (select1 ?Spy6 ?x_1py24) true_1) (not (= (select1 ?Tpy4 ?x_1py24) true_1)))) (or (= (select1 ?Tpy4 ?x_1py24) true_1) (not (= (select1 ?Spy6 ?x_1py24) true_1)) (= (select1 (Difference ?Spy6 ?Tpy4) ?x_1py24) true_1))) :pattern ((select1 (Difference ?Spy6 ?Tpy4) ?x_1py24)) )) :named A1_87))
(assert (! (forall ((?x_1py25 Int)(?Spy7 Int)(?Tpy5 Int)) (! (and (or (not (= (select1 (Intersection ?Spy7 ?Tpy5) ?x_1py25) true_1)) (and (= (select1 ?Spy7 ?x_1py25) true_1) (= (select1 ?Tpy5 ?x_1py25) true_1))) (or (= (select1 (Intersection ?Spy7 ?Tpy5) ?x_1py25) true_1) (not (= (select1 ?Spy7 ?x_1py25) true_1)) (not (= (select1 ?Tpy5 ?x_1py25) true_1)))) :pattern ((select1 (Intersection ?Spy7 ?Tpy5) ?x_1py25)) )) :named A1_88))
(assert (! (forall ((?x_1py26 Int)(?Spy8 Int)(?Tpy6 Int)) (! (or (= (select1 (Intersection ?Spy8 ?Tpy6) ?x_1py26) true_1) (not (= (select1 ?Spy8 ?x_1py26) true_1)) (not (= (select1 ?Tpy6 ?x_1py26) true_1))) :pattern ((Intersection ?Spy8 ?Tpy6) (select1 ?Spy8 ?x_1py26)) )) :named A1_89))
(assert (! (forall ((?x_1py27 Int)(?Spy9 Int)(?Tpy7 Int)) (! (or (= (select1 (Intersection ?Spy9 ?Tpy7) ?x_1py27) true_1) (not (= (select1 ?Spy9 ?x_1py27) true_1)) (not (= (select1 ?Tpy7 ?x_1py27) true_1))) :pattern ((Intersection ?Spy9 ?Tpy7) (select1 ?Tpy7 ?x_1py27)) )) :named A1_90))
(assert (! (forall ((?x_1py28 Int)(?Spy10 Int)(?Tpy8 Int)) (! (or (= (select1 ?Tpy8 ?x_1py28) true_1) (not (= (select1 ?Spy10 ?x_1py28) true_1)) (= (select1 (Difference ?Spy10 ?Tpy8) ?x_1py28) true_1)) :pattern ((Difference ?Spy10 ?Tpy8) (select1 ?Spy10 ?x_1py28)) )) :named A1_91))
(assert (! (forall ((?x_1py29 Int)(?Spy11 Int)(?Tpy9 Int)) (! (or (= (select1 ?Tpy9 ?x_1py29) true_1) (not (= (select1 ?Spy11 ?x_1py29) true_1)) (not (= (Subset ?Spy11 ?Tpy9) true_1))) :pattern ((select1 ?Spy11 ?x_1py29) (Subset ?Spy11 ?Tpy9)) )) :named A1_92))
(assert (! (forall ((?x_1py30 Int)(?Spy12 Int)(?Tpy10 Int)) (! (or (not (= (select1 ?Spy12 ?x_1py30) true_1)) (= (select1 (Union ?Spy12 ?Tpy10) ?x_1py30) true_1)) :pattern ((Union ?Spy12 ?Tpy10) (select1 ?Spy12 ?x_1py30)) )) :named A1_93))
(assert (! (forall ((?x_1py31 Int)(?Spy13 Int)(?Tpy11 Int)) (! (or (not (= (select1 ?Spy13 ?x_1py31) true_1)) (not (= (select1 ?Tpy11 ?x_1py31) true_1)) (not (= (Disjoint ?Spy13 ?Tpy11) true_1))) :pattern ((select1 ?Spy13 ?x_1py31) (Disjoint ?Spy13 ?Tpy11) (select1 ?Tpy11 ?x_1py31)) )) :named A1_94))
(assert (! (forall ((?x_1py32 Int)(?Spy14 Int)(?Tpy12 Int)) (! (or (not (= (select1 ?Tpy12 ?x_1py32) true_1)) (= (select1 (Union ?Spy14 ?Tpy12) ?x_1py32) true_1)) :pattern ((Union ?Spy14 ?Tpy12) (select1 ?Tpy12 ?x_1py32)) )) :named A1_95))
(assert (! (forall ((?x_1py33 Int)(?Spy15 Int)) (! (and (or (not (= (select1 (S_f__Foo ?Spy15) ?x_1py33) true_1)) (= (select1 ?Spy15 (f__FooInv ?x_1py33)) true_1)) (or (= (select1 (S_f__Foo ?Spy15) ?x_1py33) true_1) (not (= (select1 ?Spy15 (f__FooInv ?x_1py33)) true_1)))) :pattern ((select1 (S_f__Foo ?Spy15) ?x_1py33)) )) :named A1_96))
(assert (! (forall ((?x_1py34 Int)(?Spy16 Int)) (! (and (or (not (= (select1 (S_f__FooInv ?Spy16) ?x_1py34) true_1)) (= (select1 ?Spy16 (f__Foo ?x_1py34)) true_1)) (or (= (select1 (S_f__FooInv ?Spy16) ?x_1py34) true_1) (not (= (select1 ?Spy16 (f__Foo ?x_1py34)) true_1)))) :pattern ((select1 (S_f__FooInv ?Spy16) ?x_1py34)) )) :named A1_97))
(assert (! (forall ((?x_1py35 Int)(?Spy17 Int)) (! (and (or (not (= (select1 (S_g__Foo ?Spy17) ?x_1py35) true_1)) (= (select1 ?Spy17 (g__FooInv ?x_1py35)) true_1)) (or (= (select1 (S_g__Foo ?Spy17) ?x_1py35) true_1) (not (= (select1 ?Spy17 (g__FooInv ?x_1py35)) true_1)))) :pattern ((select1 (S_g__Foo ?Spy17) ?x_1py35)) )) :named A1_98))
(assert (! (forall ((?x_1py36 Int)(?Spy18 Int)) (! (and (or (not (= (select1 (S_g__FooInv ?Spy18) ?x_1py36) true_1)) (= (select1 ?Spy18 (g__Foo ?x_1py36)) true_1)) (or (= (select1 (S_g__FooInv ?Spy18) ?x_1py36) true_1) (not (= (select1 ?Spy18 (g__Foo ?x_1py36)) true_1)))) :pattern ((select1 (S_g__FooInv ?Spy18) ?x_1py36)) )) :named A1_99))
(assert (! (forall ((?x_1py37 Int)(?Spy19 Int)) (! (or (not (= (select1 ?Spy19 ?x_1py37) true_1)) (= (select1 (S_f__Foo ?Spy19) (f__Foo ?x_1py37)) true_1)) :pattern ((select1 ?Spy19 ?x_1py37) (S_f__Foo ?Spy19)) )) :named A1_100))
(assert (! (forall ((?x_1py38 Int)(?Spy20 Int)) (! (or (not (= (select1 ?Spy20 ?x_1py38) true_1)) (= (select1 (S_f__FooInv ?Spy20) (f__FooInv ?x_1py38)) true_1)) :pattern ((select1 ?Spy20 ?x_1py38) (S_f__FooInv ?Spy20)) )) :named A1_101))
(assert (! (forall ((?x_1py39 Int)(?Spy21 Int)) (! (or (not (= (select1 ?Spy21 ?x_1py39) true_1)) (= (select1 (S_g__Foo ?Spy21) (g__Foo ?x_1py39)) true_1)) :pattern ((select1 ?Spy21 ?x_1py39) (S_g__Foo ?Spy21)) )) :named A1_102))
(assert (! (forall ((?x_1py40 Int)(?Spy22 Int)) (! (or (not (= (select1 ?Spy22 ?x_1py40) true_1)) (= (select1 (S_g__FooInv ?Spy22) (g__FooInv ?x_1py40)) true_1)) :pattern ((select1 ?Spy22 ?x_1py40) (S_g__FooInv ?Spy22)) )) :named A1_103))
(assert (! (forall ((?x_1py41 Int)(?npy5 Int)(?zpy2 Int)) (! (or (<= ?zpy2 0) (= (Equal (HavocArray ?x_1py41 ?npy5 ?zpy2) (Difference (AtLeast ?npy5 ?x_1py41) (AtLeast ?npy5 (PLUS ?x_1py41 ?npy5 ?zpy2)))) true_1)) :pattern ((HavocArray ?x_1py41 ?npy5 ?zpy2)) )) :named A1_104))
(assert (! (forall ((?x_1py42 Int)(?npy6 Int)(?zpy3 Int)) (! (or (not (<= ?zpy3 0)) (= (Equal (HavocArray ?x_1py42 ?npy6 ?zpy3) Empty) true_1)) :pattern ((HavocArray ?x_1py42 ?npy6 ?zpy3)) )) :named A1_105))
(assert (! (forall ((?x_1py43 Int)(?ypy15 Int)(?Spy23 Int)(?Mpy4 Int)) (! (or (= (select1 ?Spy23 ?x_1py43) true_1) (= (Equal (Dereference ?Spy23 (store1 ?Mpy4 ?x_1py43 ?ypy15)) (Dereference ?Spy23 ?Mpy4)) true_1)) :pattern ((Dereference ?Spy23 (store1 ?Mpy4 ?x_1py43 ?ypy15))) )) :named A1_106))
(assert (! (forall ((?x_1py44 Int)(?ypy16 Int)(?Spy24 Int)(?Mpy5 Int)) (! (or (not (= (select1 ?Spy24 ?x_1py44) true_1)) (= (Equal (Intersection (Inverse ?Mpy5 (select1 ?Mpy5 ?x_1py44)) ?Spy24) (Singleton ?x_1py44)) true_1) (= (Equal (Dereference ?Spy24 (store1 ?Mpy5 ?x_1py44 ?ypy16)) (Union (Dereference ?Spy24 ?Mpy5) (Singleton ?ypy16))) true_1)) :pattern ((Dereference ?Spy24 (store1 ?Mpy5 ?x_1py44 ?ypy16))) )) :named A1_107))
(assert (! (forall ((?x_1py45 Int)(?ypy17 Int)(?Spy25 Int)(?Mpy6 Int)) (! (or (not (= (select1 ?Spy25 ?x_1py45) true_1)) (not (= (Equal (Intersection (Inverse ?Mpy6 (select1 ?Mpy6 ?x_1py45)) ?Spy25) (Singleton ?x_1py45)) true_1)) (= (Equal (Dereference ?Spy25 (store1 ?Mpy6 ?x_1py45 ?ypy17)) (Union (Difference (Dereference ?Spy25 ?Mpy6) (Singleton (select1 ?Mpy6 ?x_1py45))) (Singleton ?ypy17))) true_1)) :pattern ((Dereference ?Spy25 (store1 ?Mpy6 ?x_1py45 ?ypy17))) )) :named A1_108))
(assert (! (forall ((?x_1py46 Int)(?ypy18 Int)) (! (and (or (not (= (select1 (Singleton ?ypy18) ?x_1py46) true_1)) (= ?x_1py46 ?ypy18)) (or (not (= ?x_1py46 ?ypy18)) (= (select1 (Singleton ?ypy18) ?x_1py46) true_1))) :pattern ((select1 (Singleton ?ypy18) ?x_1py46)) )) :named A1_109))
(assert (! (forall ((?x_1py47 Int)) (! (= (MINUS_BOTH_PTR_OR_BOTH_INT ?x_1py47 0 1) (f__FooInv ?x_1py47)) :pattern ((MINUS_BOTH_PTR_OR_BOTH_INT ?x_1py47 0 1)) )) :named A1_110))
(assert (! (forall ((?x_1py48 Int)) (! (= (MINUS_BOTH_PTR_OR_BOTH_INT ?x_1py48 4 1) (g__FooInv ?x_1py48)) :pattern ((MINUS_BOTH_PTR_OR_BOTH_INT ?x_1py48 4 1)) )) :named A1_111))
(assert (! (forall ((?x_1py49 Int)) (! (= (MINUS_LEFT_PTR ?x_1py49 1 0) (f__FooInv ?x_1py49)) :pattern ((MINUS_LEFT_PTR ?x_1py49 1 0)) )) :named A1_112))
(assert (! (forall ((?x_1py50 Int)) (! (= (MINUS_LEFT_PTR ?x_1py50 1 4) (g__FooInv ?x_1py50)) :pattern ((MINUS_LEFT_PTR ?x_1py50 1 4)) )) :named A1_113))
(assert (! (forall ((?x_1py51 Int)) (! (= (f__Foo (f__FooInv ?x_1py51)) ?x_1py51) :pattern ((f__FooInv ?x_1py51)) )) :named A1_114))
(assert (! (forall ((?x_1py52 Int)) (! (= (f__Foo ?x_1py52) ?x_1py52) :pattern ((f__Foo ?x_1py52)) )) :named A1_115))
(assert (! (forall ((?x_1py53 Int)) (! (= (f__FooInv (f__Foo ?x_1py53)) ?x_1py53) :pattern ((f__Foo ?x_1py53)) )) :named A1_116))
(assert (! (forall ((?x_1py54 Int)) (! (= (f__FooInv ?x_1py54) ?x_1py54) :pattern ((f__FooInv ?x_1py54)) )) :named A1_117))
(assert (! (forall ((?x_1py55 Int)) (! (= (g__Foo (g__FooInv ?x_1py55)) ?x_1py55) :pattern ((g__FooInv ?x_1py55)) )) :named A1_118))
(assert (! (forall ((?x_1py56 Int)) (! (= (g__Foo ?x_1py56) (+ 4 ?x_1py56)) :pattern ((g__Foo ?x_1py56)) )) :named A1_119))
(assert (! (forall ((?x_1py57 Int)) (! (= (g__FooInv (g__Foo ?x_1py57)) ?x_1py57) :pattern ((g__Foo ?x_1py57)) )) :named A1_120))
(assert (! (forall ((?x_1py58 Int)) (! (= (g__FooInv ?x_1py58) (+ (- 4) ?x_1py58)) :pattern ((g__FooInv ?x_1py58)) )) :named A1_121))
(assert (! (forall ((?x_1py59 Int)) (! (not (= (select1 Empty ?x_1py59) true_1)) :pattern ((select1 Empty ?x_1py59)) )) :named A1_122))
(assert (! (forall ((?ypy19 Int)) (! (= (select1 (Singleton ?ypy19) ?ypy19) true_1) :pattern ((Singleton ?ypy19)) )) :named A1_123))
(assert (! (= (HasType call4437formal_new_0 P_Foo_name) true_1) :named A2_0))
(assert (! (= (HasType result_free_24_5_3_ INT4_name) true_1) :named A2_1))
(assert (! (= (HasType result_main_12_5_1_ INT4_name) true_1) :named A2_2))
(assert (! (= (HasType result_malloc_14_23_2_ INT4_name) true_1) :named A2_3))
(assert (! (= (HasType x_1 P_Foo_name) true_1) :named A2_4))
(assert (! (= (HasType y PCHAR_name) true_1) :named A2_5))
(assert (! (= (Match call4437formal_new_0 Foo_name) true_1) :named A2_6))
(assert (! (= (Subset Empty (HavocArray call4437formal_new_0 8 1)) true_1) :named A2_7))
(assert (! (= (select1 alloc call4437formal_new_0) UNALLOCATED) :named A2_8))
(assert (! (= (select1 alloc_0 call4437formal_new_0) ALLOCATED) :named A2_9))
(assert (! (forall ((?apy29 Int)) (! (= (HasType (select1 (select1 Mem (Field ?apy29)) ?apy29) (Field ?apy29)) true_1) :pattern ((select1 (select1 Mem (Field ?apy29)) ?apy29)) )) :named A2_10))
(assert (! (forall ((?x_1py60 Int)) (! (or (= (Base ?x_1py60) call4437formal_new_0) (not (<= call4437formal_new_0 ?x_1py60)) (<= call4437formal_new_0 (+ (- 8) ?x_1py60))) :pattern ((Base ?x_1py60)) )) :named A2_11))
(assert (! (forall ((?x_1py61 Int)) (! (or (= ?x_1py61 call4437formal_new_0) (= (select1 alloc ?x_1py61) (select1 alloc_0 ?x_1py61))) :pattern ((select1 alloc_0 ?x_1py61)) )) :named A2_12))
(assert (! (forall ((?x_2py0 Int)) (! (or (not (= (select1 (HavocArray call4437formal_new_0 8 1) ?x_2py0) true_1)) (= (Match ?x_2py0 Foo_name) true_1)) :pattern ((select1 (HavocArray call4437formal_new_0 8 1) ?x_2py0)) )) :named A2_13))
(assert (! (or (not (= (HasType (select1 (select1 Mem (Field ?a!4)) ?a!4) (Field ?a!4)) true_1)) (and (forall ((?apy32 Int)) (! (= (HasType (select1 (select1 Mem (Field ?apy32)) ?apy32) (Field ?apy32)) true_1) :pattern ((select1 (select1 Mem (Field ?apy32)) ?apy32)) )) (or (not (= (HasType result_free_24_5_3_ INT4_name) true_1)) (and (= (HasType result_free_24_5_3_ INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 INT4_name) true_1)) (and (= (HasType call4437formal_new_0 INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 P_Foo_name) true_1)) (and (= (HasType call4437formal_new_0 P_Foo_name) true_1) (or (not (= (HasType y PCHAR_name) true_1)) (and (= (HasType y PCHAR_name) true_1) (or (= call4437formal_new_0 0) (and (not (= call4437formal_new_0 0)) (or (not (= (select1 alloc_0 (Base (f__Foo call4437formal_new_0))) ALLOCATED)) (and (= (select1 alloc_0 (Base (f__Foo call4437formal_new_0))) ALLOCATED) (= Mem_0 (store1 Mem (Field (f__Foo call4437formal_new_0)) (store1 (select1 Mem (Field (f__Foo call4437formal_new_0))) (f__Foo call4437formal_new_0) 11))) (or (not (= (HasType (select1 (select1 Mem_0 (Field ?a!5)) ?a!5) (Field ?a!5)) true_1)) (and (forall ((?apy30 Int)) (! (= (HasType (select1 (select1 Mem_0 (Field ?apy30)) ?apy30) (Field ?apy30)) true_1) :pattern ((select1 (select1 Mem_0 (Field ?apy30)) ?apy30)) )) (or (not (= (HasType result_free_24_5_3_ INT4_name) true_1)) (and (= (HasType result_free_24_5_3_ INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 INT4_name) true_1)) (and (= (HasType call4437formal_new_0 INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 P_Foo_name) true_1)) (and (= (HasType call4437formal_new_0 P_Foo_name) true_1) (or (not (= (HasType y PCHAR_name) true_1)) (and (= (HasType y PCHAR_name) true_1) (or (not (= (select1 (select1 Mem_0 (Field (f__Foo call4437formal_new_0))) (f__Foo call4437formal_new_0)) 11)) (and (= (select1 (select1 Mem_0 (Field (f__Foo call4437formal_new_0))) (f__Foo call4437formal_new_0)) 11) (or (= call4437formal_new_0 0) (and (not (= call4437formal_new_0 0)) (= y_0 (f__Foo call4437formal_new_0)) (or (not (= (HasType (select1 (select1 Mem_0 (Field ?a!5)) ?a!5) (Field ?a!5)) true_1)) (and (forall ((?apy30 Int)) (! (= (HasType (select1 (select1 Mem_0 (Field ?apy30)) ?apy30) (Field ?apy30)) true_1) :pattern ((select1 (select1 Mem_0 (Field ?apy30)) ?apy30)) )) (or (not (= (HasType result_free_24_5_3_ INT4_name) true_1)) (and (= (HasType result_free_24_5_3_ INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 INT4_name) true_1)) (and (= (HasType call4437formal_new_0 INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 P_Foo_name) true_1)) (and (= (HasType call4437formal_new_0 P_Foo_name) true_1) (or (not (= (HasType y_0 PCHAR_name) true_1)) (and (= (HasType y_0 PCHAR_name) true_1) (= y_1 (PLUS y_0 1 1)) (or (= y_1 0) (and (not (= y_1 0)) (or (not (= (select1 alloc_0 (Base y_1)) ALLOCATED)) (and (= (select1 alloc_0 (Base y_1)) ALLOCATED) (= Mem_1 (store1 Mem_0 (Field y_1) (store1 (select1 Mem_0 (Field y_1)) y_1 42))) (or (not (= (HasType (select1 (select1 Mem_1 (Field ?a!6)) ?a!6) (Field ?a!6)) true_1)) (and (forall ((?apy31 Int)) (! (= (HasType (select1 (select1 Mem_1 (Field ?apy31)) ?apy31) (Field ?apy31)) true_1) :pattern ((select1 (select1 Mem_1 (Field ?apy31)) ?apy31)) )) (or (not (= (HasType result_free_24_5_3_ INT4_name) true_1)) (and (= (HasType result_free_24_5_3_ INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 INT4_name) true_1)) (and (= (HasType call4437formal_new_0 INT4_name) true_1) (or (not (= (HasType call4437formal_new_0 P_Foo_name) true_1)) (and (= (HasType call4437formal_new_0 P_Foo_name) true_1) (or (not (= (HasType y_1 PCHAR_name) true_1)) (and (= (HasType y_1 PCHAR_name) true_1) (or (not (= (select1 (select1 Mem_1 (Field (f__Foo call4437formal_new_0))) (f__Foo call4437formal_new_0)) 11)) (and (= (select1 (select1 Mem_1 (Field (f__Foo call4437formal_new_0))) (f__Foo call4437formal_new_0)) 11) (or (not (= (Base call4437formal_new_0) call4437formal_new_0)) (and (= (Base call4437formal_new_0) call4437formal_new_0) (or (not (= (select1 alloc_0 (Base call4437formal_new_0)) ALLOCATED)) (and (= (select1 alloc_0 (Base call4437formal_new_0)) ALLOCATED) (forall ((?x_1py62 Int)) (! (or (= ?x_1py62 call4437formal_new_0) (= (select1 alloc_0 ?x_1py62) (select1 alloc_1 ?x_1py62))) :pattern ((select1 alloc_1 ?x_1py62)) )) (= (select1 alloc_1 call4437formal_new_0) FREED) (forall ((?mpy0 Int)) (! (or (= (select1 (select1 Mem_1 (Field ?mpy0)) ?mpy0) (select1 (select1 Mem (Field ?mpy0)) ?mpy0)) (= (select1 alloc (Base ?mpy0)) ALLOCATED) (= (select1 alloc_1 (Base ?mpy0)) ALLOCATED)) :pattern ((select1 (select1 Mem_1 (Field ?mpy0)) ?mpy0)) )) (or (not (= (HasType result_main_12_5_1_ INT4_name) true_1)) (and (= (HasType result_main_12_5_1_ INT4_name) true_1) (or (not (= (HasType (select1 (select1 Mem_1 (Field ?a!6)) ?a!6) (Field ?a!6)) true_1)) (and (forall ((?apy31 Int)) (! (= (HasType (select1 (select1 Mem_1 (Field ?apy31)) ?apy31) (Field ?apy31)) true_1) :pattern ((select1 (select1 Mem_1 (Field ?apy31)) ?apy31)) )) (or (not (= (select1 (select1 Mem_1 ?f!8) ?m!7) (select1 (select1 Mem ?f!8) ?m!7))) (and (forall ((?fpy6 Int)(?mpy1 Int)) (! (= (select1 (select1 Mem_1 ?fpy6) ?mpy1) (select1 (select1 Mem ?fpy6) ?mpy1)) :pattern ((select1 (select1 Mem_1 ?fpy6) ?mpy1)) )) (not (= (select1 alloc (Base ?f!9)) UNALLOCATED)) (not (= (select1 alloc (Base ?f!9)) (select1 alloc_1 (Base ?f!9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :named A2_14))
(assert (! (not (<= call4437formal_new_0 0)) :named A2_15))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 group_007/ematching/tmp/havoc-bench_200.1.main_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
