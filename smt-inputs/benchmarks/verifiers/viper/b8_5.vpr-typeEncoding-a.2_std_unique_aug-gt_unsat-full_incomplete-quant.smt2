(set-info :smt-lib-version 2.6)
(set-info :category "industrial")
(set-info :boogie-vc-id client)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-sort |T@U| 0)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RMode) T@U)
(declare-fun U_2_rmode (T@U) RMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U (RegExStr) T@U)
(declare-fun U_2_regex (T@U) RegExStr)
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun HasDirectPerm (T@T T@T T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@T T@T T@U) Bool)
(declare-fun FrameTypeType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@T T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun IsWandField (T@T T@T T@U) Bool)
(declare-fun WandMaskField (T@T T@U) T@U)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun ZeroMask () T@U)
(declare-fun NoPerm () Real)
(declare-fun ZeroPMask () T@U)
(declare-fun FullPerm () Real)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun InsidePredicate (T@T T@T T@U T@U T@U T@U) Bool)
(declare-fun |Seq@sharp@Length| (T@T T@U) Int)
(declare-fun |Seq@sharp@Empty| (T@T) T@U)
(declare-fun |Seq@sharp@Singleton| (T@T T@U) T@U)
(declare-fun |Seq@sharp@Append| (T@T T@U T@U) T@U)
(declare-fun |Seq@sharp@Index| (T@T T@U Int) T@U)
(declare-fun |Seq@sharp@Add| (Int Int) Int)
(declare-fun |Seq@sharp@Sub| (Int Int) Int)
(declare-fun |Seq@sharp@Update| (T@T T@U Int T@U) T@U)
(declare-fun |Seq@sharp@Take| (T@T T@U Int) T@U)
(declare-fun |Seq@sharp@Drop| (T@T T@U Int) T@U)
(declare-fun |Seq@sharp@Contains| (T@T T@U T@U) Bool)
(declare-fun |Seq@sharp@Skolem| (T@T T@U T@U) Int)
(declare-fun |Seq@sharp@ContainsTrigger| (T@T T@U T@U) Bool)
(declare-fun |Seq@sharp@Equal| (T@T T@U T@U) Bool)
(declare-fun |Seq@sharp@SkolemDiff| (T@T T@U T@U) Int)
(declare-fun |Seq@sharp@Range| (Int Int) T@U)
(declare-fun loc (T@U Int) T@U)
(declare-fun first (T@U) T@U)
(declare-fun second (T@U) Int)
(declare-fun len (T@U) Int)
(declare-fun dummy (T@U Int) Bool)
(declare-fun |dummy@quote@| (T@U Int) Bool)
(declare-fun dummyFunction (T@T T@U) Bool)
(declare-fun |dummy@sharp@triggerStateless| (Int) Bool)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |dummy@sharp@frame| (T@U Int) Bool)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun a_3@@1 () T@U)
(declare-fun neverTriggered7 (Int) Bool)
(declare-fun QPMask@0 () T@U)
(declare-fun qpRange7 (T@U) Bool)
(declare-fun invRecv7 (T@U) Int)
(declare-fun QPMask@1 () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun Heap@@13 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun storeIndex@0 () Int)
(declare-fun qpRange8 (T@U) Bool)
(declare-fun invRecv8 (T@U) Int)
(declare-fun QPMask@2 () T@U)
(declare-fun pw@0 () T@U)
(declare-fun neverTriggered6 (Int) Bool)
(declare-fun Mask@@11 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun i_14 () Int)
(declare-fun qpRange4 (T@U) Bool)
(declare-fun invRecv4 (T@U) Int)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun z3name!0 (T@U Real) T@U)
(declare-fun i_6!117!5 () Int)
(declare-fun i_6@@1!118!6 () Int)
(declare-fun i_6_1!117!4 () Int)
(declare-fun i_7!101!2 () Int)
(declare-fun i_7@@1!102!3 () Int)
(declare-fun i_7_1!101!1 () Int)
(assert (! (tickleBool false) :named A0_0))
(assert (! (tickleBool true) :named A0_1))
(assert (! (= (Ctor boolType) 2) :named A1_0))
(assert (! (= (Ctor intType) 0) :named A1_1))
(assert (! (= (Ctor realType) 1) :named A1_2))
(assert (! (= (Ctor regexType) 5) :named A1_3))
(assert (! (= (Ctor rmodeType) 3) :named A1_4))
(assert (! (= (Ctor stringType) 4) :named A1_5))
(assert (! (forall ((arg0py0 Int)) (! (= (U_2_int (int_2_U arg0py0)) arg0py0) :pattern ((int_2_U arg0py0)) )) :named A1_6))
(assert (! (forall ((arg0@@0py0 Real)) (! (= (U_2_real (real_2_U arg0@@0py0)) arg0@@0py0) :pattern ((real_2_U arg0@@0py0)) )) :named A1_7))
(assert (! (forall ((arg0@@1py0 Bool)) (! (and (or (not (U_2_bool (bool_2_U arg0@@1py0))) arg0@@1py0) (or (U_2_bool (bool_2_U arg0@@1py0)) (not arg0@@1py0))) :pattern ((bool_2_U arg0@@1py0)) )) :named A1_8))
(assert (! (forall ((arg0@@2py0 RMode)) (! (= (U_2_rmode (rmode_2_U arg0@@2py0)) arg0@@2py0) :pattern ((rmode_2_U arg0@@2py0)) )) :named A1_9))
(assert (! (forall ((arg0@@3py0 String)) (! (= (U_2_string (string_2_U arg0@@3py0)) arg0@@3py0) :pattern ((string_2_U arg0@@3py0)) )) :named A1_10))
(assert (! (forall ((arg0@@4py0 RegExStr)) (! (= (U_2_regex (regex_2_U arg0@@4py0)) arg0@@4py0) :pattern ((regex_2_U arg0@@4py0)) )) :named A1_11))
(assert (! (forall ((xpy0 T@U)) (! (= (int_2_U (U_2_int xpy0)) xpy0) :pattern ((U_2_int xpy0)) )) :named A1_12))
(assert (! (forall ((x@@0py0 T@U)) (! (= (real_2_U (U_2_real x@@0py0)) x@@0py0) :pattern ((U_2_real x@@0py0)) )) :named A1_13))
(assert (! (forall ((x@@1py0 T@U)) (! (= (bool_2_U (U_2_bool x@@1py0)) x@@1py0) :pattern ((U_2_bool x@@1py0)) )) :named A1_14))
(assert (! (forall ((x@@2py0 T@U)) (! (= (rmode_2_U (U_2_rmode x@@2py0)) x@@2py0) :pattern ((U_2_rmode x@@2py0)) )) :named A1_15))
(assert (! (forall ((x@@3py0 T@U)) (! (= (string_2_U (U_2_string x@@3py0)) x@@3py0) :pattern ((U_2_string x@@3py0)) )) :named A1_16))
(assert (! (forall ((x@@4py0 T@U)) (! (= (regex_2_U (U_2_regex x@@4py0)) x@@4py0) :pattern ((U_2_regex x@@4py0)) )) :named A1_17))
(assert (! (forall ((x@@5py0 T@U)(alphapy0 T@T)) (! (UOrdering3 alphapy0 x@@5py0 x@@5py0) :pattern ((UOrdering3 alphapy0 x@@5py0 x@@5py0)) )) :named A2))
(assert (! (forall ((x@@6py0 T@U)(ypy0 T@U)(zpy0 T@U)(alpha@@0py0 T@T)) (! (or (UOrdering3 alpha@@0py0 x@@6py0 zpy0) (not (UOrdering3 alpha@@0py0 x@@6py0 ypy0)) (not (UOrdering3 alpha@@0py0 ypy0 zpy0))) :pattern ((UOrdering3 alpha@@0py0 x@@6py0 ypy0) (UOrdering3 alpha@@0py0 ypy0 zpy0)) )) :named A3))
(assert (! (forall ((x@@7py0 T@U)(y@@0py0 T@U)(alpha@@1py0 T@T)) (! (or (= x@@7py0 y@@0py0) (not (UOrdering3 alpha@@1py0 x@@7py0 y@@0py0)) (not (UOrdering3 alpha@@1py0 y@@0py0 x@@7py0))) :pattern ((UOrdering3 alpha@@1py0 x@@7py0 y@@0py0) (UOrdering3 alpha@@1py0 y@@0py0 x@@7py0)) )) :named A4))
(assert (! (not (= $allocated val)) :named A5))
(assert (! (= (Ctor NormalFieldType) 6) :named A6_0))
(assert (! (= (Ctor RefType) 7) :named A6_1))
(assert (! (forall ((t0py0 T@T)(t1py0 T@T)(t2py0 T@T)(val@@0py0 T@U)(mpy0 T@U)(x0py0 T@U)(x1py0 T@U)) (! (= (MapType0Select t0py0 t1py0 t2py0 (MapType0Store t0py0 t1py0 t2py0 mpy0 x0py0 x1py0 val@@0py0) x0py0 x1py0) val@@0py0) :pattern ((MapType0Store t0py0 t1py0 t2py0 mpy0 x0py0 x1py0 val@@0py0)) )) :named A6_2))
(assert (! (forall ((u0py0 T@T)(s0py0 T@T)(s1py0 T@T)(t0@@0py0 T@T)(t1@@0py0 T@T)(val@@1py0 T@U)(m@@0py0 T@U)(x0@@0py0 T@U)(x1@@0py0 T@U)(y0py0 T@U)(y1py0 T@U)) (! (or (= s0py0 t0@@0py0) (= (MapType0Select t0@@0py0 t1@@0py0 u0py0 (MapType0Store s0py0 s1py0 u0py0 m@@0py0 x0@@0py0 x1@@0py0 val@@1py0) y0py0 y1py0) (MapType0Select t0@@0py0 t1@@0py0 u0py0 m@@0py0 y0py0 y1py0))) :pattern ((MapType0Select t0@@0py0 t1@@0py0 u0py0 (MapType0Store s0py0 s1py0 u0py0 m@@0py0 x0@@0py0 x1@@0py0 val@@1py0) y0py0 y1py0)) )) :named A6_3))
(assert (! (forall ((u0@@0py0 T@T)(s0@@0py0 T@T)(s1@@0py0 T@T)(t0@@1py0 T@T)(t1@@1py0 T@T)(val@@2py0 T@U)(m@@1py0 T@U)(x0@@1py0 T@U)(x1@@1py0 T@U)(y0@@0py0 T@U)(y1@@0py0 T@U)) (! (or (= s1@@0py0 t1@@1py0) (= (MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 (MapType0Store s0@@0py0 s1@@0py0 u0@@0py0 m@@1py0 x0@@1py0 x1@@1py0 val@@2py0) y0@@0py0 y1@@0py0) (MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 m@@1py0 y0@@0py0 y1@@0py0))) :pattern ((MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 (MapType0Store s0@@0py0 s1@@0py0 u0@@0py0 m@@1py0 x0@@1py0 x1@@1py0 val@@2py0) y0@@0py0 y1@@0py0)) )) :named A6_4))
(assert (! (forall ((u0@@1py0 T@T)(s0@@1py0 T@T)(s1@@1py0 T@T)(t0@@2py0 T@T)(t1@@2py0 T@T)(val@@3py0 T@U)(m@@2py0 T@U)(x0@@2py0 T@U)(x1@@2py0 T@U)(y0@@1py0 T@U)(y1@@1py0 T@U)) (! (or (= x0@@2py0 y0@@1py0) (= (MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 (MapType0Store s0@@1py0 s1@@1py0 u0@@1py0 m@@2py0 x0@@2py0 x1@@2py0 val@@3py0) y0@@1py0 y1@@1py0) (MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 m@@2py0 y0@@1py0 y1@@1py0))) :pattern ((MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 (MapType0Store s0@@1py0 s1@@1py0 u0@@1py0 m@@2py0 x0@@2py0 x1@@2py0 val@@3py0) y0@@1py0 y1@@1py0)) )) :named A6_5))
(assert (! (forall ((u0@@2py0 T@T)(s0@@2py0 T@T)(s1@@2py0 T@T)(t0@@3py0 T@T)(t1@@3py0 T@T)(val@@4py0 T@U)(m@@3py0 T@U)(x0@@3py0 T@U)(x1@@3py0 T@U)(y0@@2py0 T@U)(y1@@2py0 T@U)) (! (or (= x1@@3py0 y1@@2py0) (= (MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 (MapType0Store s0@@2py0 s1@@2py0 u0@@2py0 m@@3py0 x0@@3py0 x1@@3py0 val@@4py0) y0@@2py0 y1@@2py0) (MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 m@@3py0 y0@@2py0 y1@@2py0))) :pattern ((MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 (MapType0Store s0@@2py0 s1@@2py0 u0@@2py0 m@@3py0 x0@@3py0 x1@@3py0 val@@4py0) y0@@2py0 y1@@2py0)) )) :named A6_6))
(assert (! (forall ((opy0 T@U)(fpy0 T@U)(Heappy0 T@U)) (! (or (U_2_bool (MapType0Select NormalFieldType boolType RefType Heappy0 (MapType0Select NormalFieldType RefType RefType Heappy0 opy0 fpy0) $allocated)) (not (U_2_bool (MapType0Select NormalFieldType boolType RefType Heappy0 opy0 $allocated)))) :pattern ((MapType0Select NormalFieldType RefType RefType Heappy0 opy0 fpy0)) )) :named A7))
(assert (! (forall ((Heap@@0py0 T@U)(ExhaleHeappy0 T@U)(Maskpy0 T@U)(o@@0py0 T@U)(f_2py0 T@U)(Apy0 T@T)(Bpy0 T@T)) (! (or (not (IdenticalOnKnownLocations Heap@@0py0 ExhaleHeappy0 Maskpy0)) (not (HasDirectPerm Apy0 Bpy0 Maskpy0 o@@0py0 f_2py0)) (= (MapType0Select Apy0 Bpy0 RefType Heap@@0py0 o@@0py0 f_2py0) (MapType0Select Apy0 Bpy0 RefType ExhaleHeappy0 o@@0py0 f_2py0))) :pattern ((IdenticalOnKnownLocations Heap@@0py0 ExhaleHeappy0 Maskpy0) (MapType0Select Apy0 Bpy0 RefType ExhaleHeappy0 o@@0py0 f_2py0)) )) :named A8))
(assert (! (= (Ctor FrameTypeType) 8) :named A9_0))
(assert (! (forall ((arg0@@5py0 T@T)(arg1py0 T@T)) (! (= (Ctor (MapType1Type arg0@@5py0 arg1py0)) 9) :pattern ((MapType1Type arg0@@5py0 arg1py0)) )) :named A9_1))
(assert (! (forall ((arg0@@6py0 T@T)(arg1@@0py0 T@T)) (! (= (MapType1TypeInv0 (MapType1Type arg0@@6py0 arg1@@0py0)) arg0@@6py0) :pattern ((MapType1Type arg0@@6py0 arg1@@0py0)) )) :named A9_2))
(assert (! (forall ((arg0@@7py0 T@T)(arg1@@1py0 T@T)) (! (= (MapType1TypeInv1 (MapType1Type arg0@@7py0 arg1@@1py0)) arg1@@1py0) :pattern ((MapType1Type arg0@@7py0 arg1@@1py0)) )) :named A9_3))
(assert (! (forall ((t0@@4py0 T@T)(t1@@4py0 T@T)(t2@@0py0 T@T)(t3py0 T@T)(val@@5py0 T@U)(m@@4py0 T@U)(x0@@4py0 T@U)(x1@@4py0 T@U)) (! (= (MapType1Select t0@@4py0 t1@@4py0 t2@@0py0 t3py0 (MapType1Store t0@@4py0 t1@@4py0 t2@@0py0 t3py0 m@@4py0 x0@@4py0 x1@@4py0 val@@5py0) x0@@4py0 x1@@4py0) val@@5py0) :pattern ((MapType1Store t0@@4py0 t1@@4py0 t2@@0py0 t3py0 m@@4py0 x0@@4py0 x1@@4py0 val@@5py0)) )) :named A9_4))
(assert (! (forall ((u0@@3py0 T@T)(u1py0 T@T)(s0@@3py0 T@T)(s1@@3py0 T@T)(t0@@5py0 T@T)(t1@@5py0 T@T)(val@@6py0 T@U)(m@@5py0 T@U)(x0@@5py0 T@U)(x1@@5py0 T@U)(y0@@3py0 T@U)(y1@@3py0 T@U)) (! (or (= s0@@3py0 t0@@5py0) (= (MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 (MapType1Store s0@@3py0 s1@@3py0 u0@@3py0 u1py0 m@@5py0 x0@@5py0 x1@@5py0 val@@6py0) y0@@3py0 y1@@3py0) (MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 m@@5py0 y0@@3py0 y1@@3py0))) :pattern ((MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 (MapType1Store s0@@3py0 s1@@3py0 u0@@3py0 u1py0 m@@5py0 x0@@5py0 x1@@5py0 val@@6py0) y0@@3py0 y1@@3py0)) )) :named A9_5))
(assert (! (forall ((u0@@4py0 T@T)(u1@@0py0 T@T)(s0@@4py0 T@T)(s1@@4py0 T@T)(t0@@6py0 T@T)(t1@@6py0 T@T)(val@@7py0 T@U)(m@@6py0 T@U)(x0@@6py0 T@U)(x1@@6py0 T@U)(y0@@4py0 T@U)(y1@@4py0 T@U)) (! (or (= s1@@4py0 t1@@6py0) (= (MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 (MapType1Store s0@@4py0 s1@@4py0 u0@@4py0 u1@@0py0 m@@6py0 x0@@6py0 x1@@6py0 val@@7py0) y0@@4py0 y1@@4py0) (MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 m@@6py0 y0@@4py0 y1@@4py0))) :pattern ((MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 (MapType1Store s0@@4py0 s1@@4py0 u0@@4py0 u1@@0py0 m@@6py0 x0@@6py0 x1@@6py0 val@@7py0) y0@@4py0 y1@@4py0)) )) :named A9_6))
(assert (! (forall ((u0@@5py0 T@T)(u1@@1py0 T@T)(s0@@5py0 T@T)(s1@@5py0 T@T)(t0@@7py0 T@T)(t1@@7py0 T@T)(val@@8py0 T@U)(m@@7py0 T@U)(x0@@7py0 T@U)(x1@@7py0 T@U)(y0@@5py0 T@U)(y1@@5py0 T@U)) (! (or (= x0@@7py0 y0@@5py0) (= (MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 (MapType1Store s0@@5py0 s1@@5py0 u0@@5py0 u1@@1py0 m@@7py0 x0@@7py0 x1@@7py0 val@@8py0) y0@@5py0 y1@@5py0) (MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 m@@7py0 y0@@5py0 y1@@5py0))) :pattern ((MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 (MapType1Store s0@@5py0 s1@@5py0 u0@@5py0 u1@@1py0 m@@7py0 x0@@7py0 x1@@7py0 val@@8py0) y0@@5py0 y1@@5py0)) )) :named A9_7))
(assert (! (forall ((u0@@6py0 T@T)(u1@@2py0 T@T)(s0@@6py0 T@T)(s1@@6py0 T@T)(t0@@8py0 T@T)(t1@@8py0 T@T)(val@@9py0 T@U)(m@@8py0 T@U)(x0@@8py0 T@U)(x1@@8py0 T@U)(y0@@6py0 T@U)(y1@@6py0 T@U)) (! (or (= x1@@8py0 y1@@6py0) (= (MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 (MapType1Store s0@@6py0 s1@@6py0 u0@@6py0 u1@@2py0 m@@8py0 x0@@8py0 x1@@8py0 val@@9py0) y0@@6py0 y1@@6py0) (MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 m@@8py0 y0@@6py0 y1@@6py0))) :pattern ((MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 (MapType1Store s0@@6py0 s1@@6py0 u0@@6py0 u1@@2py0 m@@8py0 x0@@8py0 x1@@8py0 val@@9py0) y0@@6py0 y1@@6py0)) )) :named A9_8))
(assert (! (forall ((Heap@@1py0 T@U)(ExhaleHeap@@0py0 T@U)(Mask@@0py0 T@U)(pm_fpy0 T@U)(Cpy0 T@T)) (! (or (= (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType Heap@@1py0 null (PredicateMaskField Cpy0 pm_fpy0)) (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType ExhaleHeap@@0py0 null (PredicateMaskField Cpy0 pm_fpy0))) (not (IdenticalOnKnownLocations Heap@@1py0 ExhaleHeap@@0py0 Mask@@0py0)) (not (HasDirectPerm Cpy0 FrameTypeType Mask@@0py0 null pm_fpy0)) (not (IsPredicateField Cpy0 FrameTypeType pm_fpy0))) :pattern ((IdenticalOnKnownLocations Heap@@1py0 ExhaleHeap@@0py0 Mask@@0py0) (IsPredicateField Cpy0 FrameTypeType pm_fpy0) (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType ExhaleHeap@@0py0 null (PredicateMaskField Cpy0 pm_fpy0))) )) :named A10))
(assert (! (forall ((Heap@@2py0 T@U)(ExhaleHeap@@1py0 T@U)(Mask@@1py0 T@U)(pm_f@@0py0 T@U)(C@@0py0 T@T)) (! (or (forall ((o2py0 T@U)(f_2@@0py0 T@U)(A@@0py0 T@T)(B@@0py0 T@T)) (! (or (not (U_2_bool (MapType1Select A@@0py0 B@@0py0 RefType boolType (MapType0Select C@@0py0 (MapType1Type RefType boolType) RefType Heap@@2py0 null (PredicateMaskField C@@0py0 pm_f@@0py0)) o2py0 f_2@@0py0))) (= (MapType0Select A@@0py0 B@@0py0 RefType Heap@@2py0 o2py0 f_2@@0py0) (MapType0Select A@@0py0 B@@0py0 RefType ExhaleHeap@@1py0 o2py0 f_2@@0py0))) :pattern ((MapType0Select A@@0py0 B@@0py0 RefType ExhaleHeap@@1py0 o2py0 f_2@@0py0)) )) (not (IdenticalOnKnownLocations Heap@@2py0 ExhaleHeap@@1py0 Mask@@1py0)) (not (HasDirectPerm C@@0py0 FrameTypeType Mask@@1py0 null pm_f@@0py0)) (not (IsPredicateField C@@0py0 FrameTypeType pm_f@@0py0))) :pattern ((IdenticalOnKnownLocations Heap@@2py0 ExhaleHeap@@1py0 Mask@@1py0) (MapType0Select C@@0py0 FrameTypeType RefType ExhaleHeap@@1py0 null pm_f@@0py0) (IsPredicateField C@@0py0 FrameTypeType pm_f@@0py0)) )) :named A11))
(assert (! (forall ((Heap@@3py0 T@U)(ExhaleHeap@@2py0 T@U)(Mask@@2py0 T@U)(pm_f@@1py0 T@U)(C@@1py0 T@T)) (! (or (= (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType Heap@@3py0 null (WandMaskField C@@1py0 pm_f@@1py0)) (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType ExhaleHeap@@2py0 null (WandMaskField C@@1py0 pm_f@@1py0))) (not (IdenticalOnKnownLocations Heap@@3py0 ExhaleHeap@@2py0 Mask@@2py0)) (not (HasDirectPerm C@@1py0 FrameTypeType Mask@@2py0 null pm_f@@1py0)) (not (IsWandField C@@1py0 FrameTypeType pm_f@@1py0))) :pattern ((IdenticalOnKnownLocations Heap@@3py0 ExhaleHeap@@2py0 Mask@@2py0) (IsWandField C@@1py0 FrameTypeType pm_f@@1py0) (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType ExhaleHeap@@2py0 null (WandMaskField C@@1py0 pm_f@@1py0))) )) :named A12))
(assert (! (forall ((Heap@@4py0 T@U)(ExhaleHeap@@3py0 T@U)(Mask@@3py0 T@U)(pm_f@@2py0 T@U)(C@@2py0 T@T)) (! (or (forall ((o2@@0py0 T@U)(f_2@@1py0 T@U)(A@@1py0 T@T)(B@@1py0 T@T)) (! (or (not (U_2_bool (MapType1Select A@@1py0 B@@1py0 RefType boolType (MapType0Select C@@2py0 (MapType1Type RefType boolType) RefType Heap@@4py0 null (WandMaskField C@@2py0 pm_f@@2py0)) o2@@0py0 f_2@@1py0))) (= (MapType0Select A@@1py0 B@@1py0 RefType Heap@@4py0 o2@@0py0 f_2@@1py0) (MapType0Select A@@1py0 B@@1py0 RefType ExhaleHeap@@3py0 o2@@0py0 f_2@@1py0))) :pattern ((MapType0Select A@@1py0 B@@1py0 RefType ExhaleHeap@@3py0 o2@@0py0 f_2@@1py0)) )) (not (IdenticalOnKnownLocations Heap@@4py0 ExhaleHeap@@3py0 Mask@@3py0)) (not (HasDirectPerm C@@2py0 FrameTypeType Mask@@3py0 null pm_f@@2py0)) (not (IsWandField C@@2py0 FrameTypeType pm_f@@2py0))) :pattern ((IdenticalOnKnownLocations Heap@@4py0 ExhaleHeap@@3py0 Mask@@3py0) (IsWandField C@@2py0 FrameTypeType pm_f@@2py0)) )) :named A13))
(assert (! (forall ((Heap@@5py0 T@U)(ExhaleHeap@@4py0 T@U)(Mask@@4py0 T@U)(o@@1py0 T@U)) (! (or (U_2_bool (MapType0Select NormalFieldType boolType RefType ExhaleHeap@@4py0 o@@1py0 $allocated)) (not (IdenticalOnKnownLocations Heap@@5py0 ExhaleHeap@@4py0 Mask@@4py0)) (not (U_2_bool (MapType0Select NormalFieldType boolType RefType Heap@@5py0 o@@1py0 $allocated)))) :pattern ((IdenticalOnKnownLocations Heap@@5py0 ExhaleHeap@@4py0 Mask@@4py0) (MapType0Select NormalFieldType boolType RefType ExhaleHeap@@4py0 o@@1py0 $allocated)) )) :named A14))
(assert (! (forall ((Heap@@6py0 T@U)(o@@2py0 T@U)(f_2@@2py0 T@U)(vpy0 T@U)(A@@2py0 T@T)(B@@2py0 T@T)) (! (succHeap Heap@@6py0 (MapType0Store A@@2py0 B@@2py0 RefType Heap@@6py0 o@@2py0 f_2@@2py0 vpy0)) :pattern ((MapType0Store A@@2py0 B@@2py0 RefType Heap@@6py0 o@@2py0 f_2@@2py0 vpy0)) )) :named A15))
(assert (! (forall ((Heap@@7py0 T@U)(ExhaleHeap@@5py0 T@U)(Mask@@5py0 T@U)) (! (or (not (IdenticalOnKnownLocations Heap@@7py0 ExhaleHeap@@5py0 Mask@@5py0)) (succHeap Heap@@7py0 ExhaleHeap@@5py0)) :pattern ((IdenticalOnKnownLocations Heap@@7py0 ExhaleHeap@@5py0 Mask@@5py0)) )) :named A16))
(assert (! (forall ((Heap0py0 T@U)(Heap1py0 T@U)) (! (or (not (succHeap Heap0py0 Heap1py0)) (succHeapTrans Heap0py0 Heap1py0)) :pattern ((succHeap Heap0py0 Heap1py0)) )) :named A17))
(assert (! (forall ((Heap0@@0py0 T@U)(Heap1@@0py0 T@U)(Heap2py0 T@U)) (! (or (succHeapTrans Heap0@@0py0 Heap2py0) (not (succHeapTrans Heap0@@0py0 Heap1@@0py0)) (not (succHeap Heap1@@0py0 Heap2py0))) :pattern ((succHeapTrans Heap0@@0py0 Heap1@@0py0) (succHeap Heap1@@0py0 Heap2py0)) )) :named A18))
(assert (! (forall ((o_1py0 T@U)(f_3py0 T@U)(A@@3py0 T@T)(B@@3py0 T@T)) (! (= (U_2_real (MapType1Select A@@3py0 B@@3py0 RefType realType ZeroMask o_1py0 f_3py0)) NoPerm) :pattern ((MapType1Select A@@3py0 B@@3py0 RefType realType ZeroMask o_1py0 f_3py0)) )) :named A19))
(assert (! (forall ((o_1@@0py0 T@U)(f_3@@0py0 T@U)(A@@4py0 T@T)(B@@4py0 T@T)) (! (not (U_2_bool (MapType1Select A@@4py0 B@@4py0 RefType boolType ZeroPMask o_1@@0py0 f_3@@0py0))) :pattern ((MapType1Select A@@4py0 B@@4py0 RefType boolType ZeroPMask o_1@@0py0 f_3@@0py0)) )) :named A20))
(assert (! (= NoPerm 0.0) :named A21))
(assert (! (= FullPerm 1.0) :named A22))
(assert (! (forall ((Heap@@8py0 T@U)(Mask@@6py0 T@U)) (! (or (GoodMask Mask@@6py0) (not (state Heap@@8py0 Mask@@6py0))) :pattern ((state Heap@@8py0 Mask@@6py0)) )) :named A23))
(assert (! (forall ((Mask@@7py0 T@U)(o_1@@1py0 T@U)(f_3@@1py0 T@U)(A@@5py0 T@T)(B@@5py0 T@T)) (! (or (not (GoodMask Mask@@7py0)) (and (<= NoPerm (U_2_real (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0))) (or (IsPredicateField A@@5py0 B@@5py0 f_3@@1py0) (IsWandField A@@5py0 B@@5py0 f_3@@1py0) (<= (U_2_real (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0)) FullPerm) (not (GoodMask Mask@@7py0))))) :pattern ((GoodMask Mask@@7py0) (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0)) )) :named A24))
(assert (! (forall ((Mask@@8py0 T@U)(o_1@@2py0 T@U)(f_3@@2py0 T@U)(A@@6py0 T@T)(B@@6py0 T@T)) (! (and (or (not (HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0)) (not (<= (U_2_real (MapType1Select A@@6py0 B@@6py0 RefType realType Mask@@8py0 o_1@@2py0 f_3@@2py0)) NoPerm))) (or (HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0) (<= (U_2_real (MapType1Select A@@6py0 B@@6py0 RefType realType Mask@@8py0 o_1@@2py0 f_3@@2py0)) NoPerm))) :pattern ((HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0)) )) :named A25))
(assert (! (forall ((ResultMaskpy0 T@U)(SummandMask1py0 T@U)(SummandMask2py0 T@U)(o_1@@3py0 T@U)(f_3@@3py0 T@U)(A@@7py0 T@T)(B@@7py0 T@T)) (! (or (not (sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0)) (= (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType ResultMaskpy0 o_1@@3py0 f_3@@3py0)) (+ (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask1py0 o_1@@3py0 f_3@@3py0)) (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask2py0 o_1@@3py0 f_3@@3py0))))) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType ResultMaskpy0 o_1@@3py0 f_3@@3py0)) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask1py0 o_1@@3py0 f_3@@3py0)) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask2py0 o_1@@3py0 f_3@@3py0)) )) :named A26))
(assert (! (forall ((ppy0 Real)(f_5py0 T@U)) (! (= (ConditionalFrame ppy0 f_5py0) (z3name!0 f_5py0 ppy0)) :pattern ((ConditionalFrame ppy0 f_5py0)) )) :named A27_0))
(assert (! (forall ((x!1py0 Real)(x!2py0 T@U)) (! (or (<= x!1py0 0.0) (= (z3name!0 x!2py0 x!1py0) x!2py0)) :pattern ((z3name!0 x!2py0 x!1py0)) )) :named A27_1))
(assert (! (forall ((x!1py1 Real)(x!2py1 T@U)) (! (or (not (<= x!1py1 0.0)) (= (z3name!0 x!2py1 x!1py1) EmptyFrame)) :pattern ((z3name!0 x!2py1 x!1py1)) )) :named A27_2))
(assert (! (forall ((p@@0py0 T@U)(v_1py0 T@U)(qpy0 T@U)(wpy0 T@U)(rpy0 T@U)(upy0 T@U)(A@@8py0 T@T)(B@@8py0 T@T)(C@@3py0 T@T)) (! (or (InsidePredicate A@@8py0 C@@3py0 p@@0py0 v_1py0 rpy0 upy0) (not (InsidePredicate A@@8py0 B@@8py0 p@@0py0 v_1py0 qpy0 wpy0)) (not (InsidePredicate B@@8py0 C@@3py0 qpy0 wpy0 rpy0 upy0))) :pattern ((InsidePredicate A@@8py0 B@@8py0 p@@0py0 v_1py0 qpy0 wpy0) (InsidePredicate B@@8py0 C@@3py0 qpy0 wpy0 rpy0 upy0)) )) :named A28))
(assert (! (forall ((p@@1py0 T@U)(v_1@@0py0 T@U)(w@@0py0 T@U)(A@@9py0 T@T)) (! (not (InsidePredicate A@@9py0 A@@9py0 p@@1py0 v_1@@0py0 p@@1py0 w@@0py0)) :pattern ((InsidePredicate A@@9py0 A@@9py0 p@@1py0 v_1@@0py0 p@@1py0 w@@0py0)) )) :named A29))
(assert (! (forall ((spy0 T@U)(Tpy0 T@T)) (! (<= 0 (Seq@sharp@Length Tpy0 spy0)) :pattern ((Seq@sharp@Length Tpy0 spy0)) )) :named A30))
(assert (! (forall ((T@@0py0 T@T)) (! (= (Seq@sharp@Length T@@0py0 (Seq@sharp@Empty T@@0py0)) 0) :pattern ((Seq@sharp@Empty T@@0py0)) )) :named A31))
(assert (! (forall ((s@@0py0 T@U)(T@@1py0 T@T)) (! (or (not (= (Seq@sharp@Length T@@1py0 s@@0py0) 0)) (= s@@0py0 (Seq@sharp@Empty T@@1py0))) :pattern ((Seq@sharp@Length T@@1py0 s@@0py0)) )) :named A32))
(assert (! (forall ((tpy0 T@U)(T@@2py0 T@T)) (! (= (Seq@sharp@Length T@@2py0 (Seq@sharp@Singleton T@@2py0 tpy0)) 1) :pattern ((Seq@sharp@Singleton T@@2py0 tpy0)) )) :named A33))
(assert (! (forall ((s0@@7py0 T@U)(s1@@7py0 T@U)(T@@3py0 T@T)) (! (or (= s1@@7py0 (Seq@sharp@Empty T@@3py0)) (= s0@@7py0 (Seq@sharp@Empty T@@3py0)) (= (Seq@sharp@Length T@@3py0 (Seq@sharp@Append T@@3py0 s0@@7py0 s1@@7py0)) (+ (Seq@sharp@Length T@@3py0 s0@@7py0) (Seq@sharp@Length T@@3py0 s1@@7py0)))) :pattern ((Seq@sharp@Length T@@3py0 (Seq@sharp@Append T@@3py0 s0@@7py0 s1@@7py0))) )) :named A34))
(assert (! (forall ((s0@@8py0 T@U)(s1@@8py0 T@U)(T@@4py0 T@T)) (! (and (or (not (= s0@@8py0 (Seq@sharp@Empty T@@4py0))) (= (Seq@sharp@Append T@@4py0 s0@@8py0 s1@@8py0) s1@@8py0)) (or (not (= s1@@8py0 (Seq@sharp@Empty T@@4py0))) (= (Seq@sharp@Append T@@4py0 s0@@8py0 s1@@8py0) s0@@8py0))) :pattern ((Seq@sharp@Append T@@4py0 s0@@8py0 s1@@8py0)) )) :named A35))
(assert (! (forall ((t@@0py0 T@U)(T@@5py0 T@T)) (! (= (Seq@sharp@Index T@@5py0 (Seq@sharp@Singleton T@@5py0 t@@0py0) 0) t@@0py0) :pattern ((Seq@sharp@Singleton T@@5py0 t@@0py0)) )) :named A36))
(assert (! (forall ((ipy0 Int)(jpy0 Int)) (! (= (Seq@sharp@Add ipy0 jpy0) (+ ipy0 jpy0)) :pattern ((Seq@sharp@Add ipy0 jpy0)) )) :named A37))
(assert (! (forall ((i@@0py0 Int)(j@@0py0 Int)) (! (= (Seq@sharp@Sub i@@0py0 j@@0py0) (+ i@@0py0 (* (- 1) j@@0py0))) :pattern ((Seq@sharp@Sub i@@0py0 j@@0py0)) )) :named A38))
(assert (! (forall ((s0@@9py0 T@U)(s1@@9py0 T@U)(npy0 Int)(T@@6py0 T@T)) (! (or (= s1@@9py0 (Seq@sharp@Empty T@@6py0)) (= s0@@9py0 (Seq@sharp@Empty T@@6py0)) (= (Seq@sharp@Index T@@6py0 (Seq@sharp@Append T@@6py0 s0@@9py0 s1@@9py0) npy0) (Seq@sharp@Index T@@6py0 s0@@9py0 npy0)) (not (<= 0 npy0)) (<= (Seq@sharp@Length T@@6py0 s0@@9py0) npy0)) :pattern ((Seq@sharp@Index T@@6py0 (Seq@sharp@Append T@@6py0 s0@@9py0 s1@@9py0) npy0)) :pattern ((Seq@sharp@Index T@@6py0 s0@@9py0 npy0) (Seq@sharp@Append T@@6py0 s0@@9py0 s1@@9py0)) )) :named A39))
(assert (! (forall ((s0@@10py0 T@U)(s1@@10py0 T@U)(n@@0py0 Int)(T@@7py0 T@T)) (! (or (= s1@@10py0 (Seq@sharp@Empty T@@7py0)) (= s0@@10py0 (Seq@sharp@Empty T@@7py0)) (and (= (Seq@sharp@Add (Seq@sharp@Sub n@@0py0 (Seq@sharp@Length T@@7py0 s0@@10py0)) (Seq@sharp@Length T@@7py0 s0@@10py0)) n@@0py0) (= (Seq@sharp@Index T@@7py0 (Seq@sharp@Append T@@7py0 s0@@10py0 s1@@10py0) n@@0py0) (Seq@sharp@Index T@@7py0 s1@@10py0 (Seq@sharp@Sub n@@0py0 (Seq@sharp@Length T@@7py0 s0@@10py0))))) (not (<= (Seq@sharp@Length T@@7py0 s0@@10py0) n@@0py0)) (<= (Seq@sharp@Length T@@7py0 (Seq@sharp@Append T@@7py0 s0@@10py0 s1@@10py0)) n@@0py0)) :pattern ((Seq@sharp@Index T@@7py0 (Seq@sharp@Append T@@7py0 s0@@10py0 s1@@10py0) n@@0py0)) )) :named A40))
(assert (! (forall ((s0@@11py0 T@U)(s1@@11py0 T@U)(m@@9py0 Int)(T@@8py0 T@T)) (! (or (= s1@@11py0 (Seq@sharp@Empty T@@8py0)) (= s0@@11py0 (Seq@sharp@Empty T@@8py0)) (and (= (Seq@sharp@Sub (Seq@sharp@Add m@@9py0 (Seq@sharp@Length T@@8py0 s0@@11py0)) (Seq@sharp@Length T@@8py0 s0@@11py0)) m@@9py0) (= (Seq@sharp@Index T@@8py0 (Seq@sharp@Append T@@8py0 s0@@11py0 s1@@11py0) (Seq@sharp@Add m@@9py0 (Seq@sharp@Length T@@8py0 s0@@11py0))) (Seq@sharp@Index T@@8py0 s1@@11py0 m@@9py0))) (not (<= 0 m@@9py0)) (<= (Seq@sharp@Length T@@8py0 s1@@11py0) m@@9py0)) :pattern ((Seq@sharp@Index T@@8py0 s1@@11py0 m@@9py0) (Seq@sharp@Append T@@8py0 s0@@11py0 s1@@11py0)) )) :named A41))
(assert (! (forall ((s@@1py0 T@U)(i@@1py0 Int)(v@@0py0 T@U)(T@@9py0 T@T)) (! (or (not (<= 0 i@@1py0)) (<= (Seq@sharp@Length T@@9py0 s@@1py0) i@@1py0) (= (Seq@sharp@Length T@@9py0 (Seq@sharp@Update T@@9py0 s@@1py0 i@@1py0 v@@0py0)) (Seq@sharp@Length T@@9py0 s@@1py0))) :pattern ((Seq@sharp@Length T@@9py0 (Seq@sharp@Update T@@9py0 s@@1py0 i@@1py0 v@@0py0))) :pattern ((Seq@sharp@Length T@@9py0 s@@1py0) (Seq@sharp@Update T@@9py0 s@@1py0 i@@1py0 v@@0py0)) )) :named A42))
(assert (! (forall ((s@@2py0 T@U)(i@@2py0 Int)(v@@1py0 T@U)(n@@1py0 Int)(T@@10py0 T@T)) (! (or (not (<= 0 n@@1py0)) (<= (Seq@sharp@Length T@@10py0 s@@2py0) n@@1py0) (and (or (not (= i@@2py0 n@@1py0)) (= (Seq@sharp@Index T@@10py0 (Seq@sharp@Update T@@10py0 s@@2py0 i@@2py0 v@@1py0) n@@1py0) v@@1py0)) (or (= i@@2py0 n@@1py0) (= (Seq@sharp@Index T@@10py0 (Seq@sharp@Update T@@10py0 s@@2py0 i@@2py0 v@@1py0) n@@1py0) (Seq@sharp@Index T@@10py0 s@@2py0 n@@1py0))))) :pattern ((Seq@sharp@Index T@@10py0 (Seq@sharp@Update T@@10py0 s@@2py0 i@@2py0 v@@1py0) n@@1py0)) :pattern ((Seq@sharp@Index T@@10py0 s@@2py0 n@@1py0) (Seq@sharp@Update T@@10py0 s@@2py0 i@@2py0 v@@1py0)) )) :named A43))
(assert (! (forall ((s@@3py0 T@U)(n@@2py0 Int)(T@@11py0 T@T)) (! (and (or (not (<= 0 n@@2py0)) (and (or (not (<= n@@2py0 (Seq@sharp@Length T@@11py0 s@@3py0))) (= (Seq@sharp@Length T@@11py0 (Seq@sharp@Take T@@11py0 s@@3py0 n@@2py0)) n@@2py0)) (or (<= n@@2py0 (Seq@sharp@Length T@@11py0 s@@3py0)) (= (Seq@sharp@Length T@@11py0 (Seq@sharp@Take T@@11py0 s@@3py0 n@@2py0)) (Seq@sharp@Length T@@11py0 s@@3py0))))) (or (<= 0 n@@2py0) (= (Seq@sharp@Length T@@11py0 (Seq@sharp@Take T@@11py0 s@@3py0 n@@2py0)) 0))) :pattern ((Seq@sharp@Length T@@11py0 (Seq@sharp@Take T@@11py0 s@@3py0 n@@2py0))) :pattern ((Seq@sharp@Take T@@11py0 s@@3py0 n@@2py0) (Seq@sharp@Length T@@11py0 s@@3py0)) )) :named A44))
(assert (! (forall ((s@@4py0 T@U)(n@@3py0 Int)(j@@1py0 Int)(T@@12py0 T@T)) (! (or (not (<= 0 j@@1py0)) (<= n@@3py0 j@@1py0) (<= (Seq@sharp@Length T@@12py0 s@@4py0) j@@1py0) (= (Seq@sharp@Index T@@12py0 (Seq@sharp@Take T@@12py0 s@@4py0 n@@3py0) j@@1py0) (Seq@sharp@Index T@@12py0 s@@4py0 j@@1py0))) :pattern ((Seq@sharp@Index T@@12py0 (Seq@sharp@Take T@@12py0 s@@4py0 n@@3py0) j@@1py0)) :pattern ((Seq@sharp@Index T@@12py0 s@@4py0 j@@1py0) (Seq@sharp@Take T@@12py0 s@@4py0 n@@3py0)) )) :named A45))
(assert (! (forall ((s@@5py0 T@U)(n@@4py0 Int)(T@@13py0 T@T)) (! (and (or (not (<= 0 n@@4py0)) (and (or (not (<= n@@4py0 (Seq@sharp@Length T@@13py0 s@@5py0))) (= (Seq@sharp@Length T@@13py0 (Seq@sharp@Drop T@@13py0 s@@5py0 n@@4py0)) (+ (Seq@sharp@Length T@@13py0 s@@5py0) (* (- 1) n@@4py0)))) (or (<= n@@4py0 (Seq@sharp@Length T@@13py0 s@@5py0)) (= (Seq@sharp@Length T@@13py0 (Seq@sharp@Drop T@@13py0 s@@5py0 n@@4py0)) 0)))) (or (<= 0 n@@4py0) (= (Seq@sharp@Length T@@13py0 (Seq@sharp@Drop T@@13py0 s@@5py0 n@@4py0)) (Seq@sharp@Length T@@13py0 s@@5py0)))) :pattern ((Seq@sharp@Length T@@13py0 (Seq@sharp@Drop T@@13py0 s@@5py0 n@@4py0))) :pattern ((Seq@sharp@Length T@@13py0 s@@5py0) (Seq@sharp@Drop T@@13py0 s@@5py0 n@@4py0)) )) :named A46))
(assert (! (forall ((s@@6py0 T@U)(n@@5py0 Int)(j@@2py0 Int)(T@@14py0 T@T)) (! (or (and (= (Seq@sharp@Sub (Seq@sharp@Add j@@2py0 n@@5py0) n@@5py0) j@@2py0) (= (Seq@sharp@Index T@@14py0 (Seq@sharp@Drop T@@14py0 s@@6py0 n@@5py0) j@@2py0) (Seq@sharp@Index T@@14py0 s@@6py0 (Seq@sharp@Add j@@2py0 n@@5py0)))) (<= n@@5py0 0) (not (<= 0 j@@2py0)) (<= (+ (Seq@sharp@Length T@@14py0 s@@6py0) (* (- 1) n@@5py0)) j@@2py0)) :pattern ((Seq@sharp@Index T@@14py0 (Seq@sharp@Drop T@@14py0 s@@6py0 n@@5py0) j@@2py0)) )) :named A47))
(assert (! (forall ((s@@7py0 T@U)(n@@6py0 Int)(i@@3py0 Int)(T@@15py0 T@T)) (! (or (<= (Seq@sharp@Length T@@15py0 s@@7py0) i@@3py0) (and (= (Seq@sharp@Add (Seq@sharp@Sub i@@3py0 n@@6py0) n@@6py0) i@@3py0) (= (Seq@sharp@Index T@@15py0 (Seq@sharp@Drop T@@15py0 s@@7py0 n@@6py0) (Seq@sharp@Sub i@@3py0 n@@6py0)) (Seq@sharp@Index T@@15py0 s@@7py0 i@@3py0))) (<= n@@6py0 0) (not (<= n@@6py0 i@@3py0))) :pattern ((Seq@sharp@Drop T@@15py0 s@@7py0 n@@6py0) (Seq@sharp@Index T@@15py0 s@@7py0 i@@3py0)) )) :named A48))
(assert (! (forall ((s@@8py0 T@U)(t@@1py0 T@U)(n@@7py0 Int)(T@@16py0 T@T)) (! (or (<= n@@7py0 0) (= (Seq@sharp@Take T@@16py0 (Seq@sharp@Append T@@16py0 s@@8py0 t@@1py0) n@@7py0) (Seq@sharp@Take T@@16py0 s@@8py0 n@@7py0)) (not (<= n@@7py0 (Seq@sharp@Length T@@16py0 s@@8py0)))) :pattern ((Seq@sharp@Take T@@16py0 (Seq@sharp@Append T@@16py0 s@@8py0 t@@1py0) n@@7py0)) )) :named A49))
(assert (! (forall ((s@@9py0 T@U)(t@@2py0 T@U)(n@@8py0 Int)(T@@17py0 T@T)) (! (or (<= n@@8py0 0) (<= n@@8py0 (Seq@sharp@Length T@@17py0 s@@9py0)) (and (= (Seq@sharp@Add (Seq@sharp@Sub n@@8py0 (Seq@sharp@Length T@@17py0 s@@9py0)) (Seq@sharp@Length T@@17py0 s@@9py0)) n@@8py0) (= (Seq@sharp@Take T@@17py0 (Seq@sharp@Append T@@17py0 s@@9py0 t@@2py0) n@@8py0) (Seq@sharp@Append T@@17py0 s@@9py0 (Seq@sharp@Take T@@17py0 t@@2py0 (Seq@sharp@Sub n@@8py0 (Seq@sharp@Length T@@17py0 s@@9py0))))))) :pattern ((Seq@sharp@Take T@@17py0 (Seq@sharp@Append T@@17py0 s@@9py0 t@@2py0) n@@8py0)) )) :named A50))
(assert (! (forall ((s@@10py0 T@U)(t@@3py0 T@U)(n@@9py0 Int)(T@@18py0 T@T)) (! (or (= (Seq@sharp@Drop T@@18py0 (Seq@sharp@Append T@@18py0 s@@10py0 t@@3py0) n@@9py0) (Seq@sharp@Append T@@18py0 (Seq@sharp@Drop T@@18py0 s@@10py0 n@@9py0) t@@3py0)) (<= n@@9py0 0) (not (<= n@@9py0 (Seq@sharp@Length T@@18py0 s@@10py0)))) :pattern ((Seq@sharp@Drop T@@18py0 (Seq@sharp@Append T@@18py0 s@@10py0 t@@3py0) n@@9py0)) )) :named A51))
(assert (! (forall ((s@@11py0 T@U)(t@@4py0 T@U)(n@@10py0 Int)(T@@19py0 T@T)) (! (or (<= n@@10py0 0) (<= n@@10py0 (Seq@sharp@Length T@@19py0 s@@11py0)) (and (= (Seq@sharp@Add (Seq@sharp@Sub n@@10py0 (Seq@sharp@Length T@@19py0 s@@11py0)) (Seq@sharp@Length T@@19py0 s@@11py0)) n@@10py0) (= (Seq@sharp@Drop T@@19py0 (Seq@sharp@Append T@@19py0 s@@11py0 t@@4py0) n@@10py0) (Seq@sharp@Drop T@@19py0 t@@4py0 (Seq@sharp@Sub n@@10py0 (Seq@sharp@Length T@@19py0 s@@11py0)))))) :pattern ((Seq@sharp@Drop T@@19py0 (Seq@sharp@Append T@@19py0 s@@11py0 t@@4py0) n@@10py0)) )) :named A52))
(assert (! (forall ((s@@12py0 T@U)(n@@11py0 Int)(T@@20py0 T@T)) (! (or (not (<= n@@11py0 0)) (= (Seq@sharp@Drop T@@20py0 s@@12py0 n@@11py0) s@@12py0)) :pattern ((Seq@sharp@Drop T@@20py0 s@@12py0 n@@11py0)) )) :named A53))
(assert (! (forall ((s@@13py0 T@U)(n@@12py0 Int)(T@@21py0 T@T)) (! (or (not (<= n@@12py0 0)) (= (Seq@sharp@Take T@@21py0 s@@13py0 n@@12py0) (Seq@sharp@Empty T@@21py0))) :pattern ((Seq@sharp@Take T@@21py0 s@@13py0 n@@12py0)) )) :named A54))
(assert (! (forall ((s@@14py0 T@U)(x@@8py0 T@U)(T@@22py0 T@T)) (! (or (not (Seq@sharp@Contains T@@22py0 s@@14py0 x@@8py0)) (and (<= 0 (Seq@sharp@Skolem T@@22py0 s@@14py0 x@@8py0)) (not (<= (Seq@sharp@Length T@@22py0 s@@14py0) (Seq@sharp@Skolem T@@22py0 s@@14py0 x@@8py0))) (= (Seq@sharp@Index T@@22py0 s@@14py0 (Seq@sharp@Skolem T@@22py0 s@@14py0 x@@8py0)) x@@8py0))) :pattern ((Seq@sharp@Contains T@@22py0 s@@14py0 x@@8py0)) )) :named A55))
(assert (! (forall ((s@@15py0 T@U)(x@@9py0 T@U)(i@@4py0 Int)(T@@23py0 T@T)) (! (or (<= (Seq@sharp@Length T@@23py0 s@@15py0) i@@4py0) (Seq@sharp@Contains T@@23py0 s@@15py0 x@@9py0) (not (<= 0 i@@4py0)) (not (= (Seq@sharp@Index T@@23py0 s@@15py0 i@@4py0) x@@9py0))) :pattern ((Seq@sharp@Contains T@@23py0 s@@15py0 x@@9py0) (Seq@sharp@Index T@@23py0 s@@15py0 i@@4py0)) )) :named A56))
(assert (! (forall ((s@@16py0 T@U)(i@@5py0 Int)(T@@24py0 T@T)) (! (or (not (<= 0 i@@5py0)) (<= (Seq@sharp@Length T@@24py0 s@@16py0) i@@5py0) (Seq@sharp@ContainsTrigger T@@24py0 s@@16py0 (Seq@sharp@Index T@@24py0 s@@16py0 i@@5py0))) :pattern ((Seq@sharp@Index T@@24py0 s@@16py0 i@@5py0)) )) :named A57))
(assert (! (forall ((s0@@12py0 T@U)(s1@@12py0 T@U)(T@@25py0 T@T)) (! (or (not (Seq@sharp@Equal T@@25py0 s0@@12py0 s1@@12py0)) (and (= (Seq@sharp@Length T@@25py0 s0@@12py0) (Seq@sharp@Length T@@25py0 s1@@12py0)) (forall ((j@@3py0 Int)) (! (or (not (<= 0 j@@3py0)) (<= (Seq@sharp@Length T@@25py0 s0@@12py0) j@@3py0) (= (Seq@sharp@Index T@@25py0 s0@@12py0 j@@3py0) (Seq@sharp@Index T@@25py0 s1@@12py0 j@@3py0))) :pattern ((Seq@sharp@Index T@@25py0 s0@@12py0 j@@3py0)) :pattern ((Seq@sharp@Index T@@25py0 s1@@12py0 j@@3py0)) )))) :pattern ((Seq@sharp@Equal T@@25py0 s0@@12py0 s1@@12py0)) )) :named A58))
(assert (! (forall ((s0@@13py0 T@U)(s1@@13py0 T@U)(T@@26py0 T@T)) (! (or (and (= s0@@13py0 s1@@13py0) (Seq@sharp@Equal T@@26py0 s0@@13py0 s1@@13py0)) (and (not (= s0@@13py0 s1@@13py0)) (not (Seq@sharp@Equal T@@26py0 s0@@13py0 s1@@13py0)) (not (= (Seq@sharp@Length T@@26py0 s0@@13py0) (Seq@sharp@Length T@@26py0 s1@@13py0)))) (and (not (= s0@@13py0 s1@@13py0)) (not (Seq@sharp@Equal T@@26py0 s0@@13py0 s1@@13py0)) (= (Seq@sharp@Length T@@26py0 s0@@13py0) (Seq@sharp@Length T@@26py0 s1@@13py0)) (= (Seq@sharp@SkolemDiff T@@26py0 s0@@13py0 s1@@13py0) (Seq@sharp@SkolemDiff T@@26py0 s1@@13py0 s0@@13py0)) (<= 0 (Seq@sharp@SkolemDiff T@@26py0 s0@@13py0 s1@@13py0)) (not (<= (Seq@sharp@Length T@@26py0 s0@@13py0) (Seq@sharp@SkolemDiff T@@26py0 s0@@13py0 s1@@13py0))) (not (= (Seq@sharp@Index T@@26py0 s0@@13py0 (Seq@sharp@SkolemDiff T@@26py0 s0@@13py0 s1@@13py0)) (Seq@sharp@Index T@@26py0 s1@@13py0 (Seq@sharp@SkolemDiff T@@26py0 s0@@13py0 s1@@13py0)))))) :pattern ((Seq@sharp@Equal T@@26py0 s0@@13py0 s1@@13py0)) )) :named A59))
(assert (! (forall ((apy0 T@U)(bpy0 T@U)(T@@27py0 T@T)) (! (or (not (Seq@sharp@Equal T@@27py0 apy0 bpy0)) (= apy0 bpy0)) :pattern ((Seq@sharp@Equal T@@27py0 apy0 bpy0)) )) :named A60))
(assert (! (forall ((x@@10py0 T@U)(y@@1py0 T@U)(T@@28py0 T@T)) (! (and (or (not (Seq@sharp@Contains T@@28py0 (Seq@sharp@Singleton T@@28py0 x@@10py0) y@@1py0)) (= x@@10py0 y@@1py0)) (or (not (= x@@10py0 y@@1py0)) (Seq@sharp@Contains T@@28py0 (Seq@sharp@Singleton T@@28py0 x@@10py0) y@@1py0))) :pattern ((Seq@sharp@Contains T@@28py0 (Seq@sharp@Singleton T@@28py0 x@@10py0) y@@1py0)) )) :named A61))
(assert (! (forall ((q@minpy0 Int)(q@maxpy0 Int)) (! (and (or (<= q@maxpy0 q@minpy0) (= (Seq@sharp@Length intType (Seq@sharp@Range q@minpy0 q@maxpy0)) (+ q@maxpy0 (* (- 1) q@minpy0)))) (or (not (<= q@maxpy0 q@minpy0)) (= (Seq@sharp@Length intType (Seq@sharp@Range q@minpy0 q@maxpy0)) 0))) :pattern ((Seq@sharp@Length intType (Seq@sharp@Range q@minpy0 q@maxpy0))) )) :named A62))
(assert (! (forall ((q@min@@0py0 Int)(q@max@@0py0 Int)(j@@4py0 Int)) (! (or (not (<= 0 j@@4py0)) (<= (+ q@max@@0py0 (* (- 1) q@min@@0py0)) j@@4py0) (= (U_2_int (Seq@sharp@Index intType (Seq@sharp@Range q@min@@0py0 q@max@@0py0) j@@4py0)) (+ q@min@@0py0 j@@4py0))) :pattern ((Seq@sharp@Index intType (Seq@sharp@Range q@min@@0py0 q@max@@0py0) j@@4py0)) )) :named A63))
(assert (! (forall ((q@min@@1py0 Int)(q@max@@1py0 Int)(v@@2py0 T@U)) (! (and (or (not (Seq@sharp@Contains intType (Seq@sharp@Range q@min@@1py0 q@max@@1py0) v@@2py0)) (and (<= q@min@@1py0 (U_2_int v@@2py0)) (not (<= q@max@@1py0 (U_2_int v@@2py0))))) (or (Seq@sharp@Contains intType (Seq@sharp@Range q@min@@1py0 q@max@@1py0) v@@2py0) (not (<= q@min@@1py0 (U_2_int v@@2py0))) (<= q@max@@1py0 (U_2_int v@@2py0)))) :pattern ((Seq@sharp@Contains intType (Seq@sharp@Range q@min@@1py0 q@max@@1py0) v@@2py0)) )) :named A64))
(assert (! (forall ((a_3py0 T@U)(i_2py0 Int)) (! (and (= (first (loc a_3py0 i_2py0)) a_3py0) (= (second (loc a_3py0 i_2py0)) i_2py0)) :pattern ((loc a_3py0 i_2py0)) )) :named A65))
(assert (! (forall ((a_3@@0py0 T@U)) (! (<= 0 (len a_3@@0py0)) :pattern ((len a_3@@0py0)) )) :named A66))
(assert (! (not (IsPredicateField NormalFieldType intType val)) :named A67))
(assert (! (not (IsWandField NormalFieldType intType val)) :named A68))
(assert (! (forall ((Heap@@9py0 T@U)(i_2@@0py0 Int)) (! (and (or (not (dummy Heap@@9py0 i_2@@0py0)) (dummy@quote@ Heap@@9py0 i_2@@0py0)) (or (dummy Heap@@9py0 i_2@@0py0) (not (dummy@quote@ Heap@@9py0 i_2@@0py0))) (dummyFunction boolType (bool_2_U (dummy@sharp@triggerStateless i_2@@0py0)))) :pattern ((dummy Heap@@9py0 i_2@@0py0)) )) :named A69))
(assert (! (forall ((Heap@@10py0 T@U)(i_2@@1py0 Int)) (! (dummyFunction boolType (bool_2_U (dummy@sharp@triggerStateless i_2@@1py0))) :pattern ((dummy@quote@ Heap@@10py0 i_2@@1py0)) )) :named A70))
(assert (! (forall ((Heap@@11py0 T@U)(Mask@@9py0 T@U)(i_2@@2py0 Int)) (! (or (not (state Heap@@11py0 Mask@@9py0)) (<= 0 AssumeFunctionsAbove) (dummy Heap@@11py0 i_2@@2py0)) :pattern ((state Heap@@11py0 Mask@@9py0) (dummy Heap@@11py0 i_2@@2py0)) )) :named A71))
(assert (! (forall ((Heap@@12py0 T@U)(Mask@@10py0 T@U)(i_2@@3py0 Int)) (! (or (not (state Heap@@12py0 Mask@@10py0)) (and (or (not (dummy@quote@ Heap@@12py0 i_2@@3py0)) (dummy@sharp@frame EmptyFrame i_2@@3py0)) (or (not (dummy@sharp@frame EmptyFrame i_2@@3py0)) (dummy@quote@ Heap@@12py0 i_2@@3py0)))) :pattern ((state Heap@@12py0 Mask@@10py0) (dummy@quote@ Heap@@12py0 i_2@@3py0)) )) :named A72))
(assert (! (forall ((arg0@@10py0 T@T)(arg1@@4py0 T@T)) (! (= (FieldTypeInv1 (FieldType arg0@@10py0 arg1@@4py0)) arg1@@4py0) :pattern ((FieldType arg0@@10py0 arg1@@4py0)) )) :named A73_0))
(assert (! (forall ((arg0@@8py0 T@T)(arg1@@2py0 T@T)) (! (= (Ctor (FieldType arg0@@8py0 arg1@@2py0)) 10) :pattern ((FieldType arg0@@8py0 arg1@@2py0)) )) :named A73_1))
(assert (! (forall ((arg0@@9py0 T@T)(arg1@@3py0 T@T)) (! (= (FieldTypeInv0 (FieldType arg0@@9py0 arg1@@3py0)) arg0@@9py0) :pattern ((FieldType arg0@@9py0 arg1@@3py0)) )) :named A73_2))
(assert (! (= (ControlFlow 0 0) 11347) :named A74_0))
(assert (! (= (ControlFlow 0 11347) 7477) :named A74_1))
(assert (! (= (ControlFlow 0 7477) 7481) :named A74_2))
(assert (! (= AssumeFunctionsAbove (- 1)) :named A74_3))
(assert (! (forall ((i_1py0 Int)) (! (or (and (qpRange4 (loc a_3@@1 i_1py0)) (= (invRecv4 (loc a_3@@1 i_1py0)) i_1py0)) (not (<= 0 i_1py0)) (<= FullPerm NoPerm) (<= (len a_3@@1) i_1py0)) :pattern ((loc a_3@@1 i_1py0)) )) :named A74_4))
(assert (! (forall ((i_1@@0py0 Int)) (! (or (not (= (loc a_3@@1 i_1@@0py0) null)) (not (<= 0 i_1@@0py0)) (<= (len a_3@@1) i_1@@0py0)) :pattern ((loc a_3@@1 i_1@@0py0)) )) :named A74_5))
(assert (! (forall ((o_2@@5py0 T@U)) (! (or (= (loc a_3@@1 (invRecv4 o_2@@5py0)) o_2@@5py0) (not (<= 0 (invRecv4 o_2@@5py0))) (not (qpRange4 o_2@@5py0)) (<= FullPerm NoPerm) (<= (len a_3@@1) (invRecv4 o_2@@5py0))) :pattern ((invRecv4 o_2@@5py0)) )) :named A74_6))
(assert (! (forall ((o_2@@6py0 T@U)) (! (and (or (not (<= 0 (invRecv4 o_2@@6py0))) (not (qpRange4 o_2@@6py0)) (<= FullPerm NoPerm) (<= (len a_3@@1) (invRecv4 o_2@@6py0)) (and (or (<= FullPerm NoPerm) (= (loc a_3@@1 (invRecv4 o_2@@6py0)) o_2@@6py0)) (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 o_2@@6py0 val)) (+ (U_2_real (MapType1Select NormalFieldType intType RefType realType ZeroMask o_2@@6py0 val)) FullPerm)))) (or (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 o_2@@6py0 val)) (U_2_real (MapType1Select NormalFieldType intType RefType realType ZeroMask o_2@@6py0 val))) (and (<= 0 (invRecv4 o_2@@6py0)) (not (<= (len a_3@@1) (invRecv4 o_2@@6py0))) (not (<= FullPerm NoPerm)) (qpRange4 o_2@@6py0)))) :pattern ((MapType1Select NormalFieldType intType RefType realType QPMask@0 o_2@@6py0 val)) )) :named A74_7))
(assert (! (forall ((o_2@@7py0 T@U)(f_4@@1py0 T@U)(A@@12py0 T@T)(B@@11py0 T@T)) (! (or (= (U_2_real (MapType1Select A@@12py0 B@@11py0 RefType realType ZeroMask o_2@@7py0 f_4@@1py0)) (U_2_real (MapType1Select A@@12py0 B@@11py0 RefType realType QPMask@0 o_2@@7py0 f_4@@1py0))) (and (= f_4@@1py0 val) (= (FieldType A@@12py0 B@@11py0) (FieldType NormalFieldType intType)))) :pattern ((MapType1Select A@@12py0 B@@11py0 RefType realType ZeroMask o_2@@7py0 f_4@@1py0)) :pattern ((MapType1Select A@@12py0 B@@11py0 RefType realType QPMask@0 o_2@@7py0 f_4@@1py0)) )) :named A74_8))
(assert (! (not (<= (len a_3@@1) 10)) :named A74_9))
(assert (! (or (and (= (ControlFlow 0 7481) 7498) (state Heap@@13 QPMask@0) (forall ((i_3py0 Int)) (! (or (= (U_2_int (MapType0Select NormalFieldType intType RefType Heap@@13 (loc a_3@@1 i_3py0) val)) i_3py0) (not (<= 0 i_3py0)) (not (<= i_3py0 10))) :pattern ((loc a_3@@1 i_3py0)) )) (= QPMask@0 Mask@@11) (state PostHeap@0 ZeroMask) (= (ControlFlow 0 7498) 7510) (or (and (= (ControlFlow 0 7510) (- 12035)) (<= (len a_3@@1) 10)) (and (not (<= (len a_3@@1) 10)) (or (and (= (ControlFlow 0 7510) (- 12427)) (not (= i_7!101!2 i_7_1!101!1)) (<= 0 i_7!101!2) (<= i_7!101!2 10) (<= 0 i_7_1!101!1) (<= i_7_1!101!1 10) (not (<= FullPerm NoPerm)) (= (loc a_3@@1 i_7!101!2) (loc a_3@@1 i_7_1!101!1))) (and (forall ((i_7@@0py0 Int)(i_7_1@@0py0 Int)) (! (or (= i_7@@0py0 i_7_1@@0py0) (not (= (loc a_3@@1 i_7@@0py0) (loc a_3@@1 i_7_1@@0py0))) (not (<= 0 i_7_1@@0py0)) (not (<= i_7_1@@0py0 10)) (<= FullPerm NoPerm) (not (<= 0 i_7@@0py0)) (not (<= i_7@@0py0 10))) :pattern ((neverTriggered7 i_7@@0py0) (neverTriggered7 i_7_1@@0py0)) )) (or (and (= (ControlFlow 0 7510) (- 12529)) (<= 0 i_7@@1!102!3) (<= i_7@@1!102!3 10) (not (<= FullPerm (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 (loc a_3@@1 i_7@@1!102!3) val))))) (and (forall ((i_7@@2py0 Int)) (! (or (<= FullPerm (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 (loc a_3@@1 i_7@@2py0) val))) (not (<= 0 i_7@@2py0)) (not (<= i_7@@2py0 10))) :pattern ((loc a_3@@1 i_7@@2py0)) )) (forall ((i_7@@3py0 Int)) (! (or (and (qpRange7 (loc a_3@@1 i_7@@3py0)) (= (invRecv7 (loc a_3@@1 i_7@@3py0)) i_7@@3py0)) (not (<= 0 i_7@@3py0)) (not (<= i_7@@3py0 10)) (<= FullPerm NoPerm)) :pattern ((loc a_3@@1 i_7@@3py0)) )) (forall ((o_2py0 T@U)) (! (or (= (loc a_3@@1 (invRecv7 o_2py0)) o_2py0) (<= FullPerm NoPerm) (not (<= 0 (invRecv7 o_2py0))) (not (<= (invRecv7 o_2py0) 10)) (not (qpRange7 o_2py0))) :pattern ((invRecv7 o_2py0)) )) (forall ((o_2@@0py0 T@U)) (! (and (or (<= FullPerm NoPerm) (not (<= 0 (invRecv7 o_2@@0py0))) (not (<= (invRecv7 o_2@@0py0) 10)) (not (qpRange7 o_2@@0py0)) (and (= (loc a_3@@1 (invRecv7 o_2@@0py0)) o_2@@0py0) (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@1 o_2@@0py0 val)) (+ (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 o_2@@0py0 val)) (* (- 1.0) FullPerm))))) (or (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@1 o_2@@0py0 val)) (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@0 o_2@@0py0 val))) (and (<= 0 (invRecv7 o_2@@0py0)) (<= (invRecv7 o_2@@0py0) 10) (not (<= FullPerm NoPerm)) (qpRange7 o_2@@0py0)))) :pattern ((MapType1Select NormalFieldType intType RefType realType QPMask@1 o_2@@0py0 val)) )) (forall ((o_2@@1py0 T@U)(f_4py0 T@U)(A@@10py0 T@T)(B@@9py0 T@T)) (! (or (= (U_2_real (MapType1Select A@@10py0 B@@9py0 RefType realType QPMask@0 o_2@@1py0 f_4py0)) (U_2_real (MapType1Select A@@10py0 B@@9py0 RefType realType QPMask@1 o_2@@1py0 f_4py0))) (and (= f_4py0 val) (= (FieldType A@@10py0 B@@9py0) (FieldType NormalFieldType intType)))) :pattern ((MapType1Select A@@10py0 B@@9py0 RefType realType QPMask@1 o_2@@1py0 f_4py0)) )) (IdenticalOnKnownLocations Heap@@13 ExhaleHeap@0 QPMask@1) (<= 0 storeIndex@0) (<= storeIndex@0 10) (forall ((i_8py0 Int)) (! (or (and (qpRange8 (loc a_3@@1 i_8py0)) (= (invRecv8 (loc a_3@@1 i_8py0)) i_8py0)) (not (<= 0 i_8py0)) (not (<= i_8py0 10)) (<= FullPerm NoPerm)) :pattern ((loc a_3@@1 i_8py0)) )) (forall ((o_2@@2py0 T@U)) (! (or (= (loc a_3@@1 (invRecv8 o_2@@2py0)) o_2@@2py0) (<= FullPerm NoPerm) (not (<= 0 (invRecv8 o_2@@2py0))) (not (<= (invRecv8 o_2@@2py0) 10)) (not (qpRange8 o_2@@2py0))) :pattern ((invRecv8 o_2@@2py0)) )) (forall ((i_8@@0py0 Int)) (! (or (not (= (loc a_3@@1 i_8@@0py0) null)) (not (<= 0 i_8@@0py0)) (not (<= i_8@@0py0 10))) :pattern ((loc a_3@@1 i_8@@0py0)) )) (forall ((o_2@@3py0 T@U)) (! (and (or (<= FullPerm NoPerm) (not (<= 0 (invRecv8 o_2@@3py0))) (not (<= (invRecv8 o_2@@3py0) 10)) (not (qpRange8 o_2@@3py0)) (and (or (<= FullPerm NoPerm) (= (loc a_3@@1 (invRecv8 o_2@@3py0)) o_2@@3py0)) (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@2 o_2@@3py0 val)) (+ (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@1 o_2@@3py0 val)) FullPerm)))) (or (= (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@2 o_2@@3py0 val)) (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@1 o_2@@3py0 val))) (and (<= 0 (invRecv8 o_2@@3py0)) (<= (invRecv8 o_2@@3py0) 10) (not (<= FullPerm NoPerm)) (qpRange8 o_2@@3py0)))) :pattern ((MapType1Select NormalFieldType intType RefType realType QPMask@2 o_2@@3py0 val)) )) (forall ((o_2@@4py0 T@U)(f_4@@0py0 T@U)(A@@11py0 T@T)(B@@10py0 T@T)) (! (or (= (U_2_real (MapType1Select A@@11py0 B@@10py0 RefType realType QPMask@1 o_2@@4py0 f_4@@0py0)) (U_2_real (MapType1Select A@@11py0 B@@10py0 RefType realType QPMask@2 o_2@@4py0 f_4@@0py0))) (and (= f_4@@0py0 val) (= (FieldType A@@11py0 B@@10py0) (FieldType NormalFieldType intType)))) :pattern ((MapType1Select A@@11py0 B@@10py0 RefType realType QPMask@1 o_2@@4py0 f_4@@0py0)) :pattern ((MapType1Select A@@11py0 B@@10py0 RefType realType QPMask@2 o_2@@4py0 f_4@@0py0)) )) (state ExhaleHeap@0 QPMask@2) (= storeIndex@0 3) (forall ((i_9_1py0 Int)) (! (or (not (<= 0 i_9_1py0)) (<= storeIndex@0 i_9_1py0) (<= (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 i_9_1py0) val)) (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 storeIndex@0) val)))) :pattern ((loc a_3@@1 i_9_1py0)) )) (forall ((i_10_1py0 Int)) (! (or (<= (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 storeIndex@0) val)) (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 i_10_1py0) val))) (not (<= i_10_1py0 10)) (<= i_10_1py0 storeIndex@0)) :pattern ((loc a_3@@1 i_10_1py0)) )) (= (Seq@sharp@Length intType pw@0) 11) (forall ((i_11_1py0 Int)) (! (or (and (<= 0 (U_2_int (Seq@sharp@Index intType pw@0 i_11_1py0))) (<= (U_2_int (Seq@sharp@Index intType pw@0 i_11_1py0)) 10)) (not (<= 0 i_11_1py0)) (not (<= i_11_1py0 10))) :pattern ((Seq@sharp@Index intType pw@0 i_11_1py0)) )) (forall ((i_12py0 Int)(j_3py0 Int)) (! (or (<= j_3py0 i_12py0) (not (= (U_2_int (Seq@sharp@Index intType pw@0 i_12py0)) (U_2_int (Seq@sharp@Index intType pw@0 j_3py0)))) (not (<= j_3py0 10)) (not (<= 0 i_12py0))) :pattern ((Seq@sharp@Index intType pw@0 i_12py0) (Seq@sharp@Index intType pw@0 j_3py0)) )) (forall ((i$0_3py0 Int)) (! (or (= (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 i$0_3py0) val)) (U_2_int (MapType0Select NormalFieldType intType RefType Heap@@13 (loc a_3@@1 (U_2_int (Seq@sharp@Index intType pw@0 i$0_3py0))) val))) (not (<= 0 i$0_3py0)) (not (<= i$0_3py0 10))) :pattern ((Seq@sharp@Index intType pw@0 i$0_3py0)) )) (or (and (= (ControlFlow 0 7510) (- 14196)) (not (HasDirectPerm NormalFieldType intType QPMask@2 (loc a_3@@1 storeIndex@0) val))) (and (HasDirectPerm NormalFieldType intType QPMask@2 (loc a_3@@1 storeIndex@0) val) (state ExhaleHeap@0 QPMask@2) (or (and (= (ControlFlow 0 7510) (- 14219)) (not (= (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 storeIndex@0) val)) 3))) (and (= (U_2_int (MapType0Select NormalFieldType intType RefType ExhaleHeap@0 (loc a_3@@1 storeIndex@0) val)) 3) (state ExhaleHeap@0 QPMask@2) (or (and (= (ControlFlow 0 7510) (- 14285)) (not (= i_6!117!5 i_6_1!117!4)) (<= 0 i_6!117!5) (not (<= (len a_3@@1) i_6!117!5)) (<= 0 i_6_1!117!4) (not (<= (len a_3@@1) i_6_1!117!4)) (not (<= FullPerm NoPerm)) (= (loc a_3@@1 i_6!117!5) (loc a_3@@1 i_6_1!117!4))) (and (forall ((i_6@@0py0 Int)(i_6_1@@0py0 Int)) (! (or (= i_6@@0py0 i_6_1@@0py0) (not (= (loc a_3@@1 i_6@@0py0) (loc a_3@@1 i_6_1@@0py0))) (not (<= 0 i_6_1@@0py0)) (<= FullPerm NoPerm) (not (<= 0 i_6@@0py0)) (<= (len a_3@@1) i_6_1@@0py0) (<= (len a_3@@1) i_6@@0py0)) :pattern ((neverTriggered6 i_6@@0py0) (neverTriggered6 i_6_1@@0py0)) )) (= (ControlFlow 0 7510) (- 14422)) (<= 0 i_6@@1!118!6) (not (<= (len a_3@@1) i_6@@1!118!6)) (not (<= FullPerm (U_2_real (MapType1Select NormalFieldType intType RefType realType QPMask@2 (loc a_3@@1 i_6@@1!118!6) val))))))))))))))))) (and (= (ControlFlow 0 7481) 7492) (<= 0 i_14) (<= i_14 10) (= (ControlFlow 0 7492) (- 15651)) (not (HasDirectPerm NormalFieldType intType QPMask@0 (loc a_3@@1 i_14) val)))) :named A74_10))
(assert (! (state Heap@@13 QPMask@0) :named A74_11))
(assert (! (state Heap@@13 ZeroMask) :named A74_12))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 smt-inputs/benchmarks/verifiers/viper/pattern_augmenter/ematching/tmp/b8_5.vpr-typeEncoding-a.2_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
