(set-info :smt-lib-version 2.6)
(set-info :category "industrial")
(set-info :boogie-vc-id test05)
(set-option :smt.auto-config false)
(set-option :smt.mbqi false)
(set-option :sat.random_seed 488)
(set-option :smt.random_seed 599)
(set-option :nlsat.seed 611)
(set-option :memory_max_size 6000)
(declare-sort |T@U| 0)
(declare-sort RegExStr 0)
(declare-sort RMode 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RMode) T@U)
(declare-fun U_2_rmode (T@U) RMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U (RegExStr) T@U)
(declare-fun U_2_regex (T@U) RegExStr)
(declare-fun $allocated () T@U)
(declare-fun f_6 () T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun HasDirectPerm (T@T T@T T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@T T@T T@U) Bool)
(declare-fun FrameTypeType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@T T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun IsWandField (T@T T@T T@U) Bool)
(declare-fun WandMaskField (T@T T@U) T@U)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun ZeroMask () T@U)
(declare-fun NoPerm () Real)
(declare-fun ZeroPMask () T@U)
(declare-fun FullPerm () Real)
(declare-fun state (T@U T@U) Bool)
(declare-fun GoodMask (T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun InsidePredicate (T@T T@T T@U T@U T@U T@U) Bool)
(declare-fun |Set@sharp@Card| (T@T T@U) Int)
(declare-fun MapType2Select (T@T T@T T@U T@U) T@U)
(declare-fun |Set@sharp@Empty| (T@T) T@U)
(declare-fun MapType2Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set@sharp@Singleton| (T@T T@U) T@U)
(declare-fun |Set@sharp@UnionOne| (T@T T@U T@U) T@U)
(declare-fun |Set@sharp@Union| (T@T T@U T@U) T@U)
(declare-fun |Set@sharp@Intersection| (T@T T@U T@U) T@U)
(declare-fun |Set@sharp@Difference| (T@T T@U T@U) T@U)
(declare-fun |Set@sharp@Subset| (T@T T@U T@U) Bool)
(declare-fun |Set@sharp@Equal| (T@T T@U T@U) Bool)
(declare-fun |Math@sharp@min| (Int Int) Int)
(declare-fun |Math@sharp@clip| (Int) Int)
(declare-fun |MultiSet@sharp@Select| (T@T T@U T@U) Int)
(declare-fun |MultiSet@sharp@Card| (T@T T@U) Int)
(declare-fun |MultiSet@sharp@Empty| (T@T) T@U)
(declare-fun |MultiSet@sharp@Singleton| (T@T T@U) T@U)
(declare-fun |MultiSet@sharp@UnionOne| (T@T T@U T@U) T@U)
(declare-fun |MultiSet@sharp@Union| (T@T T@U T@U) T@U)
(declare-fun |MultiSet@sharp@Intersection| (T@T T@U T@U) T@U)
(declare-fun |MultiSet@sharp@Difference| (T@T T@U T@U) T@U)
(declare-fun |MultiSet@sharp@Subset| (T@T T@U T@U) Bool)
(declare-fun |MultiSet@sharp@Equal| (T@T T@U T@U) Bool)
(declare-fun |MultiSet@sharp@Disjoint| (T@T T@U T@U) Bool)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Heap@@9 () T@U)
(declare-fun QPMask@0 () T@U)
(declare-fun xs () T@U)
(declare-fun ys () T@U)
(declare-fun qpRange1 (T@U) Bool)
(declare-fun invRecv1 (T@U) T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun x@@19 () T@U)
(declare-fun y@@6 () T@U)
(declare-fun Mask@@9 () T@U)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun z3name!0 (T@U Real) T@U)
(declare-fun x@@8!24!1 (T@T T@U) T@U)
(declare-fun o@@9!46!2 (T@T T@U T@U) T@U)
(declare-fun o@@10!48!3 (T@T T@U T@U) T@U)
(declare-fun x@@15!59!4 (T@T T@U) T@U)
(declare-fun z3name!5 (T@T T@U T@U T@U) Int)
(declare-fun o@@17!75!6 (T@T T@U T@U) T@U)
(declare-fun o@@18!77!7 (T@T T@U T@U) T@U)
(declare-fun o@@19!80!8 (T@T T@U T@U) T@U)
(assert (! (tickleBool false) :named A0_0))
(assert (! (tickleBool true) :named A0_1))
(assert (! (= (Ctor boolType) 2) :named A1_0))
(assert (! (= (Ctor intType) 0) :named A1_1))
(assert (! (= (Ctor realType) 1) :named A1_2))
(assert (! (= (Ctor regexType) 5) :named A1_3))
(assert (! (= (Ctor rmodeType) 3) :named A1_4))
(assert (! (= (Ctor stringType) 4) :named A1_5))
(assert (! (forall ((arg0py0 Int)) (! (= (U_2_int (int_2_U arg0py0)) arg0py0) :pattern ((int_2_U arg0py0)) )) :named A1_6))
(assert (! (forall ((arg0@@0py0 Real)) (! (= (U_2_real (real_2_U arg0@@0py0)) arg0@@0py0) :pattern ((real_2_U arg0@@0py0)) )) :named A1_7))
(assert (! (forall ((arg0@@1py0 Bool)) (! (and (or (not (U_2_bool (bool_2_U arg0@@1py0))) arg0@@1py0) (or (U_2_bool (bool_2_U arg0@@1py0)) (not arg0@@1py0))) :pattern ((bool_2_U arg0@@1py0)) )) :named A1_8))
(assert (! (forall ((arg0@@2py0 RMode)) (! (= (U_2_rmode (rmode_2_U arg0@@2py0)) arg0@@2py0) :pattern ((rmode_2_U arg0@@2py0)) )) :named A1_9))
(assert (! (forall ((arg0@@3py0 String)) (! (= (U_2_string (string_2_U arg0@@3py0)) arg0@@3py0) :pattern ((string_2_U arg0@@3py0)) )) :named A1_10))
(assert (! (forall ((arg0@@4py0 RegExStr)) (! (= (U_2_regex (regex_2_U arg0@@4py0)) arg0@@4py0) :pattern ((regex_2_U arg0@@4py0)) )) :named A1_11))
(assert (! (forall ((xpy0 T@U)) (! (= (int_2_U (U_2_int xpy0)) xpy0) :pattern ((U_2_int xpy0)) )) :named A1_12))
(assert (! (forall ((x@@0py0 T@U)) (! (= (real_2_U (U_2_real x@@0py0)) x@@0py0) :pattern ((U_2_real x@@0py0)) )) :named A1_13))
(assert (! (forall ((x@@1py0 T@U)) (! (= (bool_2_U (U_2_bool x@@1py0)) x@@1py0) :pattern ((U_2_bool x@@1py0)) )) :named A1_14))
(assert (! (forall ((x@@2py0 T@U)) (! (= (rmode_2_U (U_2_rmode x@@2py0)) x@@2py0) :pattern ((U_2_rmode x@@2py0)) )) :named A1_15))
(assert (! (forall ((x@@3py0 T@U)) (! (= (string_2_U (U_2_string x@@3py0)) x@@3py0) :pattern ((U_2_string x@@3py0)) )) :named A1_16))
(assert (! (forall ((x@@4py0 T@U)) (! (= (regex_2_U (U_2_regex x@@4py0)) x@@4py0) :pattern ((U_2_regex x@@4py0)) )) :named A1_17))
(assert (! (forall ((x@@5py0 T@U)(alphapy0 T@T)) (! (UOrdering3 alphapy0 x@@5py0 x@@5py0) :pattern ((UOrdering3 alphapy0 x@@5py0 x@@5py0)) )) :named A2))
(assert (! (forall ((x@@6py0 T@U)(ypy0 T@U)(zpy0 T@U)(alpha@@0py0 T@T)) (! (or (UOrdering3 alpha@@0py0 x@@6py0 zpy0) (not (UOrdering3 alpha@@0py0 x@@6py0 ypy0)) (not (UOrdering3 alpha@@0py0 ypy0 zpy0))) :pattern ((UOrdering3 alpha@@0py0 x@@6py0 ypy0) (UOrdering3 alpha@@0py0 ypy0 zpy0)) )) :named A3))
(assert (! (forall ((x@@7py0 T@U)(y@@0py0 T@U)(alpha@@1py0 T@T)) (! (or (= x@@7py0 y@@0py0) (not (UOrdering3 alpha@@1py0 x@@7py0 y@@0py0)) (not (UOrdering3 alpha@@1py0 y@@0py0 x@@7py0))) :pattern ((UOrdering3 alpha@@1py0 x@@7py0 y@@0py0) (UOrdering3 alpha@@1py0 y@@0py0 x@@7py0)) )) :named A4))
(assert (! (not (= $allocated f_6)) :named A5))
(assert (! (= (Ctor NormalFieldType) 6) :named A6_0))
(assert (! (= (Ctor RefType) 7) :named A6_1))
(assert (! (forall ((t0py0 T@T)(t1py0 T@T)(t2py0 T@T)(valpy0 T@U)(mpy0 T@U)(x0py0 T@U)(x1py0 T@U)) (! (= (MapType0Select t0py0 t1py0 t2py0 (MapType0Store t0py0 t1py0 t2py0 mpy0 x0py0 x1py0 valpy0) x0py0 x1py0) valpy0) :pattern ((MapType0Store t0py0 t1py0 t2py0 mpy0 x0py0 x1py0 valpy0)) )) :named A6_2))
(assert (! (forall ((u0py0 T@T)(s0py0 T@T)(s1py0 T@T)(t0@@0py0 T@T)(t1@@0py0 T@T)(val@@0py0 T@U)(m@@0py0 T@U)(x0@@0py0 T@U)(x1@@0py0 T@U)(y0py0 T@U)(y1py0 T@U)) (! (or (= s0py0 t0@@0py0) (= (MapType0Select t0@@0py0 t1@@0py0 u0py0 (MapType0Store s0py0 s1py0 u0py0 m@@0py0 x0@@0py0 x1@@0py0 val@@0py0) y0py0 y1py0) (MapType0Select t0@@0py0 t1@@0py0 u0py0 m@@0py0 y0py0 y1py0))) :pattern ((MapType0Select t0@@0py0 t1@@0py0 u0py0 (MapType0Store s0py0 s1py0 u0py0 m@@0py0 x0@@0py0 x1@@0py0 val@@0py0) y0py0 y1py0)) )) :named A6_3))
(assert (! (forall ((u0@@0py0 T@T)(s0@@0py0 T@T)(s1@@0py0 T@T)(t0@@1py0 T@T)(t1@@1py0 T@T)(val@@1py0 T@U)(m@@1py0 T@U)(x0@@1py0 T@U)(x1@@1py0 T@U)(y0@@0py0 T@U)(y1@@0py0 T@U)) (! (or (= s1@@0py0 t1@@1py0) (= (MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 (MapType0Store s0@@0py0 s1@@0py0 u0@@0py0 m@@1py0 x0@@1py0 x1@@1py0 val@@1py0) y0@@0py0 y1@@0py0) (MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 m@@1py0 y0@@0py0 y1@@0py0))) :pattern ((MapType0Select t0@@1py0 t1@@1py0 u0@@0py0 (MapType0Store s0@@0py0 s1@@0py0 u0@@0py0 m@@1py0 x0@@1py0 x1@@1py0 val@@1py0) y0@@0py0 y1@@0py0)) )) :named A6_4))
(assert (! (forall ((u0@@1py0 T@T)(s0@@1py0 T@T)(s1@@1py0 T@T)(t0@@2py0 T@T)(t1@@2py0 T@T)(val@@2py0 T@U)(m@@2py0 T@U)(x0@@2py0 T@U)(x1@@2py0 T@U)(y0@@1py0 T@U)(y1@@1py0 T@U)) (! (or (= x0@@2py0 y0@@1py0) (= (MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 (MapType0Store s0@@1py0 s1@@1py0 u0@@1py0 m@@2py0 x0@@2py0 x1@@2py0 val@@2py0) y0@@1py0 y1@@1py0) (MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 m@@2py0 y0@@1py0 y1@@1py0))) :pattern ((MapType0Select t0@@2py0 t1@@2py0 u0@@1py0 (MapType0Store s0@@1py0 s1@@1py0 u0@@1py0 m@@2py0 x0@@2py0 x1@@2py0 val@@2py0) y0@@1py0 y1@@1py0)) )) :named A6_5))
(assert (! (forall ((u0@@2py0 T@T)(s0@@2py0 T@T)(s1@@2py0 T@T)(t0@@3py0 T@T)(t1@@3py0 T@T)(val@@3py0 T@U)(m@@3py0 T@U)(x0@@3py0 T@U)(x1@@3py0 T@U)(y0@@2py0 T@U)(y1@@2py0 T@U)) (! (or (= x1@@3py0 y1@@2py0) (= (MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 (MapType0Store s0@@2py0 s1@@2py0 u0@@2py0 m@@3py0 x0@@3py0 x1@@3py0 val@@3py0) y0@@2py0 y1@@2py0) (MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 m@@3py0 y0@@2py0 y1@@2py0))) :pattern ((MapType0Select t0@@3py0 t1@@3py0 u0@@2py0 (MapType0Store s0@@2py0 s1@@2py0 u0@@2py0 m@@3py0 x0@@3py0 x1@@3py0 val@@3py0) y0@@2py0 y1@@2py0)) )) :named A6_6))
(assert (! (forall ((opy0 T@U)(fpy0 T@U)(Heappy0 T@U)) (! (or (U_2_bool (MapType0Select NormalFieldType boolType RefType Heappy0 (MapType0Select NormalFieldType RefType RefType Heappy0 opy0 fpy0) $allocated)) (not (U_2_bool (MapType0Select NormalFieldType boolType RefType Heappy0 opy0 $allocated)))) :pattern ((MapType0Select NormalFieldType RefType RefType Heappy0 opy0 fpy0)) )) :named A7))
(assert (! (forall ((Heap@@0py0 T@U)(ExhaleHeappy0 T@U)(Maskpy0 T@U)(o@@0py0 T@U)(f_2py0 T@U)(Apy0 T@T)(Bpy0 T@T)) (! (or (not (IdenticalOnKnownLocations Heap@@0py0 ExhaleHeappy0 Maskpy0)) (not (HasDirectPerm Apy0 Bpy0 Maskpy0 o@@0py0 f_2py0)) (= (MapType0Select Apy0 Bpy0 RefType Heap@@0py0 o@@0py0 f_2py0) (MapType0Select Apy0 Bpy0 RefType ExhaleHeappy0 o@@0py0 f_2py0))) :pattern ((IdenticalOnKnownLocations Heap@@0py0 ExhaleHeappy0 Maskpy0) (MapType0Select Apy0 Bpy0 RefType ExhaleHeappy0 o@@0py0 f_2py0)) )) :named A8))
(assert (! (= (Ctor FrameTypeType) 8) :named A9_0))
(assert (! (forall ((arg0@@5py0 T@T)(arg1py0 T@T)) (! (= (Ctor (MapType1Type arg0@@5py0 arg1py0)) 9) :pattern ((MapType1Type arg0@@5py0 arg1py0)) )) :named A9_1))
(assert (! (forall ((arg0@@6py0 T@T)(arg1@@0py0 T@T)) (! (= (MapType1TypeInv0 (MapType1Type arg0@@6py0 arg1@@0py0)) arg0@@6py0) :pattern ((MapType1Type arg0@@6py0 arg1@@0py0)) )) :named A9_2))
(assert (! (forall ((arg0@@7py0 T@T)(arg1@@1py0 T@T)) (! (= (MapType1TypeInv1 (MapType1Type arg0@@7py0 arg1@@1py0)) arg1@@1py0) :pattern ((MapType1Type arg0@@7py0 arg1@@1py0)) )) :named A9_3))
(assert (! (forall ((t0@@4py0 T@T)(t1@@4py0 T@T)(t2@@0py0 T@T)(t3py0 T@T)(val@@4py0 T@U)(m@@4py0 T@U)(x0@@4py0 T@U)(x1@@4py0 T@U)) (! (= (MapType1Select t0@@4py0 t1@@4py0 t2@@0py0 t3py0 (MapType1Store t0@@4py0 t1@@4py0 t2@@0py0 t3py0 m@@4py0 x0@@4py0 x1@@4py0 val@@4py0) x0@@4py0 x1@@4py0) val@@4py0) :pattern ((MapType1Store t0@@4py0 t1@@4py0 t2@@0py0 t3py0 m@@4py0 x0@@4py0 x1@@4py0 val@@4py0)) )) :named A9_4))
(assert (! (forall ((u0@@3py0 T@T)(u1py0 T@T)(s0@@3py0 T@T)(s1@@3py0 T@T)(t0@@5py0 T@T)(t1@@5py0 T@T)(val@@5py0 T@U)(m@@5py0 T@U)(x0@@5py0 T@U)(x1@@5py0 T@U)(y0@@3py0 T@U)(y1@@3py0 T@U)) (! (or (= s0@@3py0 t0@@5py0) (= (MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 (MapType1Store s0@@3py0 s1@@3py0 u0@@3py0 u1py0 m@@5py0 x0@@5py0 x1@@5py0 val@@5py0) y0@@3py0 y1@@3py0) (MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 m@@5py0 y0@@3py0 y1@@3py0))) :pattern ((MapType1Select t0@@5py0 t1@@5py0 u0@@3py0 u1py0 (MapType1Store s0@@3py0 s1@@3py0 u0@@3py0 u1py0 m@@5py0 x0@@5py0 x1@@5py0 val@@5py0) y0@@3py0 y1@@3py0)) )) :named A9_5))
(assert (! (forall ((u0@@4py0 T@T)(u1@@0py0 T@T)(s0@@4py0 T@T)(s1@@4py0 T@T)(t0@@6py0 T@T)(t1@@6py0 T@T)(val@@6py0 T@U)(m@@6py0 T@U)(x0@@6py0 T@U)(x1@@6py0 T@U)(y0@@4py0 T@U)(y1@@4py0 T@U)) (! (or (= s1@@4py0 t1@@6py0) (= (MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 (MapType1Store s0@@4py0 s1@@4py0 u0@@4py0 u1@@0py0 m@@6py0 x0@@6py0 x1@@6py0 val@@6py0) y0@@4py0 y1@@4py0) (MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 m@@6py0 y0@@4py0 y1@@4py0))) :pattern ((MapType1Select t0@@6py0 t1@@6py0 u0@@4py0 u1@@0py0 (MapType1Store s0@@4py0 s1@@4py0 u0@@4py0 u1@@0py0 m@@6py0 x0@@6py0 x1@@6py0 val@@6py0) y0@@4py0 y1@@4py0)) )) :named A9_6))
(assert (! (forall ((u0@@5py0 T@T)(u1@@1py0 T@T)(s0@@5py0 T@T)(s1@@5py0 T@T)(t0@@7py0 T@T)(t1@@7py0 T@T)(val@@7py0 T@U)(m@@7py0 T@U)(x0@@7py0 T@U)(x1@@7py0 T@U)(y0@@5py0 T@U)(y1@@5py0 T@U)) (! (or (= x0@@7py0 y0@@5py0) (= (MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 (MapType1Store s0@@5py0 s1@@5py0 u0@@5py0 u1@@1py0 m@@7py0 x0@@7py0 x1@@7py0 val@@7py0) y0@@5py0 y1@@5py0) (MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 m@@7py0 y0@@5py0 y1@@5py0))) :pattern ((MapType1Select t0@@7py0 t1@@7py0 u0@@5py0 u1@@1py0 (MapType1Store s0@@5py0 s1@@5py0 u0@@5py0 u1@@1py0 m@@7py0 x0@@7py0 x1@@7py0 val@@7py0) y0@@5py0 y1@@5py0)) )) :named A9_7))
(assert (! (forall ((u0@@6py0 T@T)(u1@@2py0 T@T)(s0@@6py0 T@T)(s1@@6py0 T@T)(t0@@8py0 T@T)(t1@@8py0 T@T)(val@@8py0 T@U)(m@@8py0 T@U)(x0@@8py0 T@U)(x1@@8py0 T@U)(y0@@6py0 T@U)(y1@@6py0 T@U)) (! (or (= x1@@8py0 y1@@6py0) (= (MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 (MapType1Store s0@@6py0 s1@@6py0 u0@@6py0 u1@@2py0 m@@8py0 x0@@8py0 x1@@8py0 val@@8py0) y0@@6py0 y1@@6py0) (MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 m@@8py0 y0@@6py0 y1@@6py0))) :pattern ((MapType1Select t0@@8py0 t1@@8py0 u0@@6py0 u1@@2py0 (MapType1Store s0@@6py0 s1@@6py0 u0@@6py0 u1@@2py0 m@@8py0 x0@@8py0 x1@@8py0 val@@8py0) y0@@6py0 y1@@6py0)) )) :named A9_8))
(assert (! (forall ((Heap@@1py0 T@U)(ExhaleHeap@@0py0 T@U)(Mask@@0py0 T@U)(pm_fpy0 T@U)(Cpy0 T@T)) (! (or (= (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType Heap@@1py0 null (PredicateMaskField Cpy0 pm_fpy0)) (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType ExhaleHeap@@0py0 null (PredicateMaskField Cpy0 pm_fpy0))) (not (IdenticalOnKnownLocations Heap@@1py0 ExhaleHeap@@0py0 Mask@@0py0)) (not (HasDirectPerm Cpy0 FrameTypeType Mask@@0py0 null pm_fpy0)) (not (IsPredicateField Cpy0 FrameTypeType pm_fpy0))) :pattern ((IdenticalOnKnownLocations Heap@@1py0 ExhaleHeap@@0py0 Mask@@0py0) (IsPredicateField Cpy0 FrameTypeType pm_fpy0) (MapType0Select Cpy0 (MapType1Type RefType boolType) RefType ExhaleHeap@@0py0 null (PredicateMaskField Cpy0 pm_fpy0))) )) :named A10))
(assert (! (forall ((Heap@@2py0 T@U)(ExhaleHeap@@1py0 T@U)(Mask@@1py0 T@U)(pm_f@@0py0 T@U)(C@@0py0 T@T)) (! (or (forall ((o2py0 T@U)(f_2@@0py0 T@U)(A@@0py0 T@T)(B@@0py0 T@T)) (! (or (not (U_2_bool (MapType1Select A@@0py0 B@@0py0 RefType boolType (MapType0Select C@@0py0 (MapType1Type RefType boolType) RefType Heap@@2py0 null (PredicateMaskField C@@0py0 pm_f@@0py0)) o2py0 f_2@@0py0))) (= (MapType0Select A@@0py0 B@@0py0 RefType Heap@@2py0 o2py0 f_2@@0py0) (MapType0Select A@@0py0 B@@0py0 RefType ExhaleHeap@@1py0 o2py0 f_2@@0py0))) :pattern ((MapType0Select A@@0py0 B@@0py0 RefType ExhaleHeap@@1py0 o2py0 f_2@@0py0)) )) (not (IdenticalOnKnownLocations Heap@@2py0 ExhaleHeap@@1py0 Mask@@1py0)) (not (HasDirectPerm C@@0py0 FrameTypeType Mask@@1py0 null pm_f@@0py0)) (not (IsPredicateField C@@0py0 FrameTypeType pm_f@@0py0))) :pattern ((IdenticalOnKnownLocations Heap@@2py0 ExhaleHeap@@1py0 Mask@@1py0) (MapType0Select C@@0py0 FrameTypeType RefType ExhaleHeap@@1py0 null pm_f@@0py0) (IsPredicateField C@@0py0 FrameTypeType pm_f@@0py0)) )) :named A11))
(assert (! (forall ((Heap@@3py0 T@U)(ExhaleHeap@@2py0 T@U)(Mask@@2py0 T@U)(pm_f@@1py0 T@U)(C@@1py0 T@T)) (! (or (= (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType Heap@@3py0 null (WandMaskField C@@1py0 pm_f@@1py0)) (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType ExhaleHeap@@2py0 null (WandMaskField C@@1py0 pm_f@@1py0))) (not (IdenticalOnKnownLocations Heap@@3py0 ExhaleHeap@@2py0 Mask@@2py0)) (not (HasDirectPerm C@@1py0 FrameTypeType Mask@@2py0 null pm_f@@1py0)) (not (IsWandField C@@1py0 FrameTypeType pm_f@@1py0))) :pattern ((IdenticalOnKnownLocations Heap@@3py0 ExhaleHeap@@2py0 Mask@@2py0) (IsWandField C@@1py0 FrameTypeType pm_f@@1py0) (MapType0Select C@@1py0 (MapType1Type RefType boolType) RefType ExhaleHeap@@2py0 null (WandMaskField C@@1py0 pm_f@@1py0))) )) :named A12))
(assert (! (forall ((Heap@@4py0 T@U)(ExhaleHeap@@3py0 T@U)(Mask@@3py0 T@U)(pm_f@@2py0 T@U)(C@@2py0 T@T)) (! (or (forall ((o2@@0py0 T@U)(f_2@@1py0 T@U)(A@@1py0 T@T)(B@@1py0 T@T)) (! (or (not (U_2_bool (MapType1Select A@@1py0 B@@1py0 RefType boolType (MapType0Select C@@2py0 (MapType1Type RefType boolType) RefType Heap@@4py0 null (WandMaskField C@@2py0 pm_f@@2py0)) o2@@0py0 f_2@@1py0))) (= (MapType0Select A@@1py0 B@@1py0 RefType Heap@@4py0 o2@@0py0 f_2@@1py0) (MapType0Select A@@1py0 B@@1py0 RefType ExhaleHeap@@3py0 o2@@0py0 f_2@@1py0))) :pattern ((MapType0Select A@@1py0 B@@1py0 RefType ExhaleHeap@@3py0 o2@@0py0 f_2@@1py0)) )) (not (IdenticalOnKnownLocations Heap@@4py0 ExhaleHeap@@3py0 Mask@@3py0)) (not (HasDirectPerm C@@2py0 FrameTypeType Mask@@3py0 null pm_f@@2py0)) (not (IsWandField C@@2py0 FrameTypeType pm_f@@2py0))) :pattern ((IdenticalOnKnownLocations Heap@@4py0 ExhaleHeap@@3py0 Mask@@3py0) (IsWandField C@@2py0 FrameTypeType pm_f@@2py0)) )) :named A13))
(assert (! (forall ((Heap@@5py0 T@U)(ExhaleHeap@@4py0 T@U)(Mask@@4py0 T@U)(o@@1py0 T@U)) (! (or (U_2_bool (MapType0Select NormalFieldType boolType RefType ExhaleHeap@@4py0 o@@1py0 $allocated)) (not (IdenticalOnKnownLocations Heap@@5py0 ExhaleHeap@@4py0 Mask@@4py0)) (not (U_2_bool (MapType0Select NormalFieldType boolType RefType Heap@@5py0 o@@1py0 $allocated)))) :pattern ((IdenticalOnKnownLocations Heap@@5py0 ExhaleHeap@@4py0 Mask@@4py0) (MapType0Select NormalFieldType boolType RefType ExhaleHeap@@4py0 o@@1py0 $allocated)) )) :named A14))
(assert (! (forall ((Heap@@6py0 T@U)(o@@2py0 T@U)(f_2@@2py0 T@U)(vpy0 T@U)(A@@2py0 T@T)(B@@2py0 T@T)) (! (succHeap Heap@@6py0 (MapType0Store A@@2py0 B@@2py0 RefType Heap@@6py0 o@@2py0 f_2@@2py0 vpy0)) :pattern ((MapType0Store A@@2py0 B@@2py0 RefType Heap@@6py0 o@@2py0 f_2@@2py0 vpy0)) )) :named A15))
(assert (! (forall ((Heap@@7py0 T@U)(ExhaleHeap@@5py0 T@U)(Mask@@5py0 T@U)) (! (or (not (IdenticalOnKnownLocations Heap@@7py0 ExhaleHeap@@5py0 Mask@@5py0)) (succHeap Heap@@7py0 ExhaleHeap@@5py0)) :pattern ((IdenticalOnKnownLocations Heap@@7py0 ExhaleHeap@@5py0 Mask@@5py0)) )) :named A16))
(assert (! (forall ((Heap0py0 T@U)(Heap1py0 T@U)) (! (or (not (succHeap Heap0py0 Heap1py0)) (succHeapTrans Heap0py0 Heap1py0)) :pattern ((succHeap Heap0py0 Heap1py0)) )) :named A17))
(assert (! (forall ((Heap0@@0py0 T@U)(Heap1@@0py0 T@U)(Heap2py0 T@U)) (! (or (succHeapTrans Heap0@@0py0 Heap2py0) (not (succHeapTrans Heap0@@0py0 Heap1@@0py0)) (not (succHeap Heap1@@0py0 Heap2py0))) :pattern ((succHeapTrans Heap0@@0py0 Heap1@@0py0) (succHeap Heap1@@0py0 Heap2py0)) )) :named A18))
(assert (! (forall ((o_1py0 T@U)(f_3py0 T@U)(A@@3py0 T@T)(B@@3py0 T@T)) (! (= (U_2_real (MapType1Select A@@3py0 B@@3py0 RefType realType ZeroMask o_1py0 f_3py0)) NoPerm) :pattern ((MapType1Select A@@3py0 B@@3py0 RefType realType ZeroMask o_1py0 f_3py0)) )) :named A19))
(assert (! (forall ((o_1@@0py0 T@U)(f_3@@0py0 T@U)(A@@4py0 T@T)(B@@4py0 T@T)) (! (not (U_2_bool (MapType1Select A@@4py0 B@@4py0 RefType boolType ZeroPMask o_1@@0py0 f_3@@0py0))) :pattern ((MapType1Select A@@4py0 B@@4py0 RefType boolType ZeroPMask o_1@@0py0 f_3@@0py0)) )) :named A20))
(assert (! (= NoPerm 0.0) :named A21))
(assert (! (= FullPerm 1.0) :named A22))
(assert (! (forall ((Heap@@8py0 T@U)(Mask@@6py0 T@U)) (! (or (GoodMask Mask@@6py0) (not (state Heap@@8py0 Mask@@6py0))) :pattern ((state Heap@@8py0 Mask@@6py0)) )) :named A23))
(assert (! (forall ((Mask@@7py0 T@U)(o_1@@1py0 T@U)(f_3@@1py0 T@U)(A@@5py0 T@T)(B@@5py0 T@T)) (! (or (not (GoodMask Mask@@7py0)) (and (<= NoPerm (U_2_real (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0))) (or (IsPredicateField A@@5py0 B@@5py0 f_3@@1py0) (IsWandField A@@5py0 B@@5py0 f_3@@1py0) (<= (U_2_real (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0)) FullPerm) (not (GoodMask Mask@@7py0))))) :pattern ((GoodMask Mask@@7py0) (MapType1Select A@@5py0 B@@5py0 RefType realType Mask@@7py0 o_1@@1py0 f_3@@1py0)) )) :named A24))
(assert (! (forall ((Mask@@8py0 T@U)(o_1@@2py0 T@U)(f_3@@2py0 T@U)(A@@6py0 T@T)(B@@6py0 T@T)) (! (and (or (not (HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0)) (not (<= (U_2_real (MapType1Select A@@6py0 B@@6py0 RefType realType Mask@@8py0 o_1@@2py0 f_3@@2py0)) NoPerm))) (or (HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0) (<= (U_2_real (MapType1Select A@@6py0 B@@6py0 RefType realType Mask@@8py0 o_1@@2py0 f_3@@2py0)) NoPerm))) :pattern ((HasDirectPerm A@@6py0 B@@6py0 Mask@@8py0 o_1@@2py0 f_3@@2py0)) )) :named A25))
(assert (! (forall ((ResultMaskpy0 T@U)(SummandMask1py0 T@U)(SummandMask2py0 T@U)(o_1@@3py0 T@U)(f_3@@3py0 T@U)(A@@7py0 T@T)(B@@7py0 T@T)) (! (or (not (sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0)) (= (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType ResultMaskpy0 o_1@@3py0 f_3@@3py0)) (+ (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask1py0 o_1@@3py0 f_3@@3py0)) (U_2_real (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask2py0 o_1@@3py0 f_3@@3py0))))) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType ResultMaskpy0 o_1@@3py0 f_3@@3py0)) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask1py0 o_1@@3py0 f_3@@3py0)) :pattern ((sumMask ResultMaskpy0 SummandMask1py0 SummandMask2py0) (MapType1Select A@@7py0 B@@7py0 RefType realType SummandMask2py0 o_1@@3py0 f_3@@3py0)) )) :named A26))
(assert (! (forall ((ppy0 Real)(f_5py0 T@U)) (! (= (ConditionalFrame ppy0 f_5py0) (z3name!0 f_5py0 ppy0)) :pattern ((ConditionalFrame ppy0 f_5py0)) )) :named A27_0))
(assert (! (forall ((x!1py0 Real)(x!2py0 T@U)) (! (or (<= x!1py0 0.0) (= (z3name!0 x!2py0 x!1py0) x!2py0)) :pattern ((z3name!0 x!2py0 x!1py0)) )) :named A27_1))
(assert (! (forall ((x!1py1 Real)(x!2py1 T@U)) (! (or (not (<= x!1py1 0.0)) (= (z3name!0 x!2py1 x!1py1) EmptyFrame)) :pattern ((z3name!0 x!2py1 x!1py1)) )) :named A27_2))
(assert (! (forall ((p@@0py0 T@U)(v_1py0 T@U)(qpy0 T@U)(wpy0 T@U)(rpy0 T@U)(upy0 T@U)(A@@8py0 T@T)(B@@8py0 T@T)(C@@3py0 T@T)) (! (or (InsidePredicate A@@8py0 C@@3py0 p@@0py0 v_1py0 rpy0 upy0) (not (InsidePredicate A@@8py0 B@@8py0 p@@0py0 v_1py0 qpy0 wpy0)) (not (InsidePredicate B@@8py0 C@@3py0 qpy0 wpy0 rpy0 upy0))) :pattern ((InsidePredicate A@@8py0 B@@8py0 p@@0py0 v_1py0 qpy0 wpy0) (InsidePredicate B@@8py0 C@@3py0 qpy0 wpy0 rpy0 upy0)) )) :named A28))
(assert (! (forall ((p@@1py0 T@U)(v_1@@0py0 T@U)(w@@0py0 T@U)(A@@9py0 T@T)) (! (not (InsidePredicate A@@9py0 A@@9py0 p@@1py0 v_1@@0py0 p@@1py0 w@@0py0)) :pattern ((InsidePredicate A@@9py0 A@@9py0 p@@1py0 v_1@@0py0 p@@1py0 w@@0py0)) )) :named A29))
(assert (! (forall ((spy0 T@U)(Tpy0 T@T)) (! (<= 0 (Set@sharp@Card Tpy0 spy0)) :pattern ((Set@sharp@Card Tpy0 spy0)) )) :named A30))
(assert (! (forall ((t0@@9py0 T@T)(t1@@9py0 T@T)(val@@9py0 T@U)(m@@9py0 T@U)(x0@@9py0 T@U)) (! (= (MapType2Select t0@@9py0 t1@@9py0 (MapType2Store t0@@9py0 t1@@9py0 m@@9py0 x0@@9py0 val@@9py0) x0@@9py0) val@@9py0) :pattern ((MapType2Store t0@@9py0 t1@@9py0 m@@9py0 x0@@9py0 val@@9py0)) )) :named A31_0))
(assert (! (forall ((u0@@7py0 T@T)(u1@@3py0 T@T)(val@@10py0 T@U)(m@@10py0 T@U)(x0@@10py0 T@U)(y0@@7py0 T@U)) (! (or (= x0@@10py0 y0@@7py0) (= (MapType2Select u0@@7py0 u1@@3py0 (MapType2Store u0@@7py0 u1@@3py0 m@@10py0 x0@@10py0 val@@10py0) y0@@7py0) (MapType2Select u0@@7py0 u1@@3py0 m@@10py0 y0@@7py0))) :pattern ((MapType2Select u0@@7py0 u1@@3py0 (MapType2Store u0@@7py0 u1@@3py0 m@@10py0 x0@@10py0 val@@10py0) y0@@7py0)) )) :named A31_1))
(assert (! (forall ((o@@3py0 T@U)(T@@0py0 T@T)) (! (not (U_2_bool (MapType2Select T@@0py0 boolType (Set@sharp@Empty T@@0py0) o@@3py0))) :pattern ((MapType2Select T@@0py0 boolType (Set@sharp@Empty T@@0py0) o@@3py0)) )) :named A32))
(assert (! (forall ((s@@0py0 T@U)(T@@1py0 T@T)) (! (and (or (not (= (Set@sharp@Card T@@1py0 s@@0py0) 0)) (= s@@0py0 (Set@sharp@Empty T@@1py0))) (or (= (Set@sharp@Card T@@1py0 s@@0py0) 0) (not (= s@@0py0 (Set@sharp@Empty T@@1py0)))) (or (= (Set@sharp@Card T@@1py0 s@@0py0) 0) (U_2_bool (MapType2Select T@@1py0 boolType s@@0py0 (x@@8!24!1 T@@1py0 s@@0py0))))) :pattern ((Set@sharp@Card T@@1py0 s@@0py0)) )) :named A33))
(assert (! (forall ((r@@0py0 T@U)(T@@2py0 T@T)) (! (U_2_bool (MapType2Select T@@2py0 boolType (Set@sharp@Singleton T@@2py0 r@@0py0) r@@0py0)) :pattern ((Set@sharp@Singleton T@@2py0 r@@0py0)) )) :named A34))
(assert (! (forall ((r@@1py0 T@U)(o@@4py0 T@U)(T@@3py0 T@T)) (! (and (or (not (U_2_bool (MapType2Select T@@3py0 boolType (Set@sharp@Singleton T@@3py0 r@@1py0) o@@4py0))) (= r@@1py0 o@@4py0)) (or (not (= r@@1py0 o@@4py0)) (U_2_bool (MapType2Select T@@3py0 boolType (Set@sharp@Singleton T@@3py0 r@@1py0) o@@4py0)))) :pattern ((MapType2Select T@@3py0 boolType (Set@sharp@Singleton T@@3py0 r@@1py0) o@@4py0)) )) :named A35))
(assert (! (forall ((r@@2py0 T@U)(T@@4py0 T@T)) (! (= (Set@sharp@Card T@@4py0 (Set@sharp@Singleton T@@4py0 r@@2py0)) 1) :pattern ((Set@sharp@Card T@@4py0 (Set@sharp@Singleton T@@4py0 r@@2py0))) )) :named A36))
(assert (! (forall ((apy0 T@U)(x@@9py0 T@U)(o@@5py0 T@U)(T@@5py0 T@T)) (! (and (or (= o@@5py0 x@@9py0) (U_2_bool (MapType2Select T@@5py0 boolType apy0 o@@5py0)) (not (U_2_bool (MapType2Select T@@5py0 boolType (Set@sharp@UnionOne T@@5py0 apy0 x@@9py0) o@@5py0)))) (or (U_2_bool (MapType2Select T@@5py0 boolType (Set@sharp@UnionOne T@@5py0 apy0 x@@9py0) o@@5py0)) (and (not (= o@@5py0 x@@9py0)) (not (U_2_bool (MapType2Select T@@5py0 boolType apy0 o@@5py0)))))) :pattern ((MapType2Select T@@5py0 boolType (Set@sharp@UnionOne T@@5py0 apy0 x@@9py0) o@@5py0)) )) :named A37))
(assert (! (forall ((a@@0py0 T@U)(x@@10py0 T@U)(T@@6py0 T@T)) (! (U_2_bool (MapType2Select T@@6py0 boolType (Set@sharp@UnionOne T@@6py0 a@@0py0 x@@10py0) x@@10py0)) :pattern ((Set@sharp@UnionOne T@@6py0 a@@0py0 x@@10py0)) )) :named A38))
(assert (! (forall ((a@@1py0 T@U)(x@@11py0 T@U)(y@@1py0 T@U)(T@@7py0 T@T)) (! (or (U_2_bool (MapType2Select T@@7py0 boolType (Set@sharp@UnionOne T@@7py0 a@@1py0 x@@11py0) y@@1py0)) (not (U_2_bool (MapType2Select T@@7py0 boolType a@@1py0 y@@1py0)))) :pattern ((Set@sharp@UnionOne T@@7py0 a@@1py0 x@@11py0) (MapType2Select T@@7py0 boolType a@@1py0 y@@1py0)) )) :named A39))
(assert (! (forall ((a@@2py0 T@U)(x@@12py0 T@U)(T@@8py0 T@T)) (! (or (not (U_2_bool (MapType2Select T@@8py0 boolType a@@2py0 x@@12py0))) (= (Set@sharp@Card T@@8py0 (Set@sharp@UnionOne T@@8py0 a@@2py0 x@@12py0)) (Set@sharp@Card T@@8py0 a@@2py0))) :pattern ((Set@sharp@Card T@@8py0 (Set@sharp@UnionOne T@@8py0 a@@2py0 x@@12py0))) )) :named A40))
(assert (! (forall ((a@@3py0 T@U)(x@@13py0 T@U)(T@@9py0 T@T)) (! (or (U_2_bool (MapType2Select T@@9py0 boolType a@@3py0 x@@13py0)) (= (Set@sharp@Card T@@9py0 (Set@sharp@UnionOne T@@9py0 a@@3py0 x@@13py0)) (+ 1 (Set@sharp@Card T@@9py0 a@@3py0)))) :pattern ((Set@sharp@Card T@@9py0 (Set@sharp@UnionOne T@@9py0 a@@3py0 x@@13py0))) )) :named A41))
(assert (! (forall ((a@@4py0 T@U)(bpy0 T@U)(o@@6py0 T@U)(T@@10py0 T@T)) (! (and (or (U_2_bool (MapType2Select T@@10py0 boolType a@@4py0 o@@6py0)) (U_2_bool (MapType2Select T@@10py0 boolType bpy0 o@@6py0)) (not (U_2_bool (MapType2Select T@@10py0 boolType (Set@sharp@Union T@@10py0 a@@4py0 bpy0) o@@6py0)))) (or (U_2_bool (MapType2Select T@@10py0 boolType (Set@sharp@Union T@@10py0 a@@4py0 bpy0) o@@6py0)) (and (not (U_2_bool (MapType2Select T@@10py0 boolType a@@4py0 o@@6py0))) (not (U_2_bool (MapType2Select T@@10py0 boolType bpy0 o@@6py0)))))) :pattern ((MapType2Select T@@10py0 boolType (Set@sharp@Union T@@10py0 a@@4py0 bpy0) o@@6py0)) )) :named A42))
(assert (! (forall ((a@@5py0 T@U)(b@@0py0 T@U)(y@@2py0 T@U)(T@@11py0 T@T)) (! (or (U_2_bool (MapType2Select T@@11py0 boolType (Set@sharp@Union T@@11py0 a@@5py0 b@@0py0) y@@2py0)) (not (U_2_bool (MapType2Select T@@11py0 boolType a@@5py0 y@@2py0)))) :pattern ((Set@sharp@Union T@@11py0 a@@5py0 b@@0py0) (MapType2Select T@@11py0 boolType a@@5py0 y@@2py0)) )) :named A43))
(assert (! (forall ((a@@6py0 T@U)(b@@1py0 T@U)(y@@3py0 T@U)(T@@12py0 T@T)) (! (or (not (U_2_bool (MapType2Select T@@12py0 boolType b@@1py0 y@@3py0))) (U_2_bool (MapType2Select T@@12py0 boolType (Set@sharp@Union T@@12py0 a@@6py0 b@@1py0) y@@3py0))) :pattern ((Set@sharp@Union T@@12py0 a@@6py0 b@@1py0) (MapType2Select T@@12py0 boolType b@@1py0 y@@3py0)) )) :named A44))
(assert (! (forall ((a@@7py0 T@U)(b@@2py0 T@U)(o@@7py0 T@U)(T@@13py0 T@T)) (! (and (or (not (U_2_bool (MapType2Select T@@13py0 boolType (Set@sharp@Intersection T@@13py0 a@@7py0 b@@2py0) o@@7py0))) (and (U_2_bool (MapType2Select T@@13py0 boolType a@@7py0 o@@7py0)) (U_2_bool (MapType2Select T@@13py0 boolType b@@2py0 o@@7py0)))) (or (not (U_2_bool (MapType2Select T@@13py0 boolType b@@2py0 o@@7py0))) (U_2_bool (MapType2Select T@@13py0 boolType (Set@sharp@Intersection T@@13py0 a@@7py0 b@@2py0) o@@7py0)) (not (U_2_bool (MapType2Select T@@13py0 boolType a@@7py0 o@@7py0))))) :pattern ((MapType2Select T@@13py0 boolType (Set@sharp@Intersection T@@13py0 a@@7py0 b@@2py0) o@@7py0)) :pattern ((Set@sharp@Intersection T@@13py0 a@@7py0 b@@2py0) (MapType2Select T@@13py0 boolType a@@7py0 o@@7py0)) :pattern ((Set@sharp@Intersection T@@13py0 a@@7py0 b@@2py0) (MapType2Select T@@13py0 boolType b@@2py0 o@@7py0)) )) :named A45))
(assert (! (forall ((a@@8py0 T@U)(b@@3py0 T@U)(T@@14py0 T@T)) (! (= (Set@sharp@Union T@@14py0 (Set@sharp@Union T@@14py0 a@@8py0 b@@3py0) b@@3py0) (Set@sharp@Union T@@14py0 a@@8py0 b@@3py0)) :pattern ((Set@sharp@Union T@@14py0 (Set@sharp@Union T@@14py0 a@@8py0 b@@3py0) b@@3py0)) )) :named A46))
(assert (! (forall ((a@@9py0 T@U)(b@@4py0 T@U)(T@@15py0 T@T)) (! (= (Set@sharp@Union T@@15py0 a@@9py0 (Set@sharp@Union T@@15py0 a@@9py0 b@@4py0)) (Set@sharp@Union T@@15py0 a@@9py0 b@@4py0)) :pattern ((Set@sharp@Union T@@15py0 a@@9py0 (Set@sharp@Union T@@15py0 a@@9py0 b@@4py0))) )) :named A47))
(assert (! (forall ((a@@10py0 T@U)(b@@5py0 T@U)(T@@16py0 T@T)) (! (= (Set@sharp@Intersection T@@16py0 (Set@sharp@Intersection T@@16py0 a@@10py0 b@@5py0) b@@5py0) (Set@sharp@Intersection T@@16py0 a@@10py0 b@@5py0)) :pattern ((Set@sharp@Intersection T@@16py0 (Set@sharp@Intersection T@@16py0 a@@10py0 b@@5py0) b@@5py0)) )) :named A48))
(assert (! (forall ((a@@11py0 T@U)(b@@6py0 T@U)(T@@17py0 T@T)) (! (= (Set@sharp@Intersection T@@17py0 a@@11py0 (Set@sharp@Intersection T@@17py0 a@@11py0 b@@6py0)) (Set@sharp@Intersection T@@17py0 a@@11py0 b@@6py0)) :pattern ((Set@sharp@Intersection T@@17py0 a@@11py0 (Set@sharp@Intersection T@@17py0 a@@11py0 b@@6py0))) )) :named A49))
(assert (! (forall ((a@@12py0 T@U)(b@@7py0 T@U)(T@@18py0 T@T)) (! (= (+ (Set@sharp@Card T@@18py0 (Set@sharp@Union T@@18py0 a@@12py0 b@@7py0)) (Set@sharp@Card T@@18py0 (Set@sharp@Intersection T@@18py0 a@@12py0 b@@7py0))) (+ (Set@sharp@Card T@@18py0 a@@12py0) (Set@sharp@Card T@@18py0 b@@7py0))) :pattern ((Set@sharp@Card T@@18py0 (Set@sharp@Union T@@18py0 a@@12py0 b@@7py0))) :pattern ((Set@sharp@Card T@@18py0 (Set@sharp@Intersection T@@18py0 a@@12py0 b@@7py0))) )) :named A50))
(assert (! (forall ((a@@13py0 T@U)(b@@8py0 T@U)(o@@8py0 T@U)(T@@19py0 T@T)) (! (and (or (not (U_2_bool (MapType2Select T@@19py0 boolType (Set@sharp@Difference T@@19py0 a@@13py0 b@@8py0) o@@8py0))) (and (U_2_bool (MapType2Select T@@19py0 boolType a@@13py0 o@@8py0)) (not (U_2_bool (MapType2Select T@@19py0 boolType b@@8py0 o@@8py0))))) (or (U_2_bool (MapType2Select T@@19py0 boolType b@@8py0 o@@8py0)) (U_2_bool (MapType2Select T@@19py0 boolType (Set@sharp@Difference T@@19py0 a@@13py0 b@@8py0) o@@8py0)) (not (U_2_bool (MapType2Select T@@19py0 boolType a@@13py0 o@@8py0))))) :pattern ((MapType2Select T@@19py0 boolType (Set@sharp@Difference T@@19py0 a@@13py0 b@@8py0) o@@8py0)) :pattern ((Set@sharp@Difference T@@19py0 a@@13py0 b@@8py0) (MapType2Select T@@19py0 boolType a@@13py0 o@@8py0)) )) :named A51))
(assert (! (forall ((a@@14py0 T@U)(b@@9py0 T@U)(y@@4py0 T@U)(T@@20py0 T@T)) (! (or (not (U_2_bool (MapType2Select T@@20py0 boolType b@@9py0 y@@4py0))) (not (U_2_bool (MapType2Select T@@20py0 boolType (Set@sharp@Difference T@@20py0 a@@14py0 b@@9py0) y@@4py0)))) :pattern ((Set@sharp@Difference T@@20py0 a@@14py0 b@@9py0) (MapType2Select T@@20py0 boolType b@@9py0 y@@4py0)) )) :named A52))
(assert (! (forall ((a@@15py0 T@U)(b@@10py0 T@U)(T@@21py0 T@T)) (! (and (= (+ (Set@sharp@Card T@@21py0 (Set@sharp@Difference T@@21py0 a@@15py0 b@@10py0)) (Set@sharp@Card T@@21py0 (Set@sharp@Difference T@@21py0 b@@10py0 a@@15py0)) (Set@sharp@Card T@@21py0 (Set@sharp@Intersection T@@21py0 a@@15py0 b@@10py0))) (Set@sharp@Card T@@21py0 (Set@sharp@Union T@@21py0 a@@15py0 b@@10py0))) (= (Set@sharp@Card T@@21py0 (Set@sharp@Difference T@@21py0 a@@15py0 b@@10py0)) (+ (Set@sharp@Card T@@21py0 a@@15py0) (* (- 1) (Set@sharp@Card T@@21py0 (Set@sharp@Intersection T@@21py0 a@@15py0 b@@10py0)))))) :pattern ((Set@sharp@Card T@@21py0 (Set@sharp@Difference T@@21py0 a@@15py0 b@@10py0))) )) :named A53))
(assert (! (forall ((a@@16py0 T@U)(b@@11py0 T@U)(T@@22py0 T@T)) (! (and (or (not (Set@sharp@Subset T@@22py0 a@@16py0 b@@11py0)) (forall ((o@@9py0 T@U)) (! (or (U_2_bool (MapType2Select T@@22py0 boolType b@@11py0 o@@9py0)) (not (U_2_bool (MapType2Select T@@22py0 boolType a@@16py0 o@@9py0)))) :pattern ((MapType2Select T@@22py0 boolType a@@16py0 o@@9py0)) :pattern ((MapType2Select T@@22py0 boolType b@@11py0 o@@9py0)) ))) (or (Set@sharp@Subset T@@22py0 a@@16py0 b@@11py0) (and (U_2_bool (MapType2Select T@@22py0 boolType a@@16py0 (o@@9!46!2 T@@22py0 b@@11py0 a@@16py0))) (not (U_2_bool (MapType2Select T@@22py0 boolType b@@11py0 (o@@9!46!2 T@@22py0 b@@11py0 a@@16py0))))))) :pattern ((Set@sharp@Subset T@@22py0 a@@16py0 b@@11py0)) )) :named A54))
(assert (! (forall ((a@@17py0 T@U)(b@@12py0 T@U)(T@@23py0 T@T)) (! (and (or (not (Set@sharp@Equal T@@23py0 a@@17py0 b@@12py0)) (forall ((o@@10py0 T@U)) (! (and (or (U_2_bool (MapType2Select T@@23py0 boolType b@@12py0 o@@10py0)) (not (U_2_bool (MapType2Select T@@23py0 boolType a@@17py0 o@@10py0)))) (or (U_2_bool (MapType2Select T@@23py0 boolType a@@17py0 o@@10py0)) (not (U_2_bool (MapType2Select T@@23py0 boolType b@@12py0 o@@10py0))))) :pattern ((MapType2Select T@@23py0 boolType a@@17py0 o@@10py0)) :pattern ((MapType2Select T@@23py0 boolType b@@12py0 o@@10py0)) ))) (or (Set@sharp@Equal T@@23py0 a@@17py0 b@@12py0) (and (or (U_2_bool (MapType2Select T@@23py0 boolType b@@12py0 (o@@10!48!3 T@@23py0 b@@12py0 a@@17py0))) (U_2_bool (MapType2Select T@@23py0 boolType a@@17py0 (o@@10!48!3 T@@23py0 b@@12py0 a@@17py0)))) (or (not (U_2_bool (MapType2Select T@@23py0 boolType a@@17py0 (o@@10!48!3 T@@23py0 b@@12py0 a@@17py0)))) (not (U_2_bool (MapType2Select T@@23py0 boolType b@@12py0 (o@@10!48!3 T@@23py0 b@@12py0 a@@17py0)))))))) :pattern ((Set@sharp@Equal T@@23py0 a@@17py0 b@@12py0)) )) :named A55))
(assert (! (forall ((a@@18py0 T@U)(b@@13py0 T@U)(T@@24py0 T@T)) (! (or (not (Set@sharp@Equal T@@24py0 a@@18py0 b@@13py0)) (= a@@18py0 b@@13py0)) :pattern ((Set@sharp@Equal T@@24py0 a@@18py0 b@@13py0)) )) :named A56))
(assert (! (forall ((a@@19py0 Int)(b@@14py0 Int)) (! (and (or (not (<= a@@19py0 b@@14py0)) (= (Math@sharp@min a@@19py0 b@@14py0) a@@19py0)) (or (<= a@@19py0 b@@14py0) (not (= (Math@sharp@min a@@19py0 b@@14py0) a@@19py0)))) :pattern ((Math@sharp@min a@@19py0 b@@14py0)) )) :named A57))
(assert (! (forall ((a@@20py0 Int)(b@@15py0 Int)) (! (and (or (not (<= b@@15py0 a@@20py0)) (= (Math@sharp@min a@@20py0 b@@15py0) b@@15py0)) (or (<= b@@15py0 a@@20py0) (not (= (Math@sharp@min a@@20py0 b@@15py0) b@@15py0)))) :pattern ((Math@sharp@min a@@20py0 b@@15py0)) )) :named A58))
(assert (! (forall ((a@@21py0 Int)(b@@16py0 Int)) (! (or (= (Math@sharp@min a@@21py0 b@@16py0) b@@16py0) (= (Math@sharp@min a@@21py0 b@@16py0) a@@21py0)) :pattern ((Math@sharp@min a@@21py0 b@@16py0)) )) :named A59))
(assert (! (forall ((a@@22py0 Int)) (! (or (not (<= 0 a@@22py0)) (= (Math@sharp@clip a@@22py0) a@@22py0)) :pattern ((Math@sharp@clip a@@22py0)) )) :named A60))
(assert (! (forall ((a@@23py0 Int)) (! (or (<= 0 a@@23py0) (= (Math@sharp@clip a@@23py0) 0)) :pattern ((Math@sharp@clip a@@23py0)) )) :named A61))
(assert (! (forall ((mspy0 T@U)(x@@14py0 T@U)(T@@25py0 T@T)) (! (<= 0 (MultiSet@sharp@Select T@@25py0 mspy0 x@@14py0)) :pattern ((MultiSet@sharp@Select T@@25py0 mspy0 x@@14py0)) )) :named A62))
(assert (! (forall ((s@@1py0 T@U)(T@@26py0 T@T)) (! (<= 0 (MultiSet@sharp@Card T@@26py0 s@@1py0)) :pattern ((MultiSet@sharp@Card T@@26py0 s@@1py0)) )) :named A63))
(assert (! (forall ((o@@11py0 T@U)(T@@27py0 T@T)) (! (= (MultiSet@sharp@Select T@@27py0 (MultiSet@sharp@Empty T@@27py0) o@@11py0) 0) :pattern ((MultiSet@sharp@Select T@@27py0 (MultiSet@sharp@Empty T@@27py0) o@@11py0)) )) :named A64))
(assert (! (forall ((s@@2py0 T@U)(T@@28py0 T@T)) (! (and (or (not (= (MultiSet@sharp@Card T@@28py0 s@@2py0) 0)) (= s@@2py0 (MultiSet@sharp@Empty T@@28py0))) (or (= (MultiSet@sharp@Card T@@28py0 s@@2py0) 0) (not (= s@@2py0 (MultiSet@sharp@Empty T@@28py0)))) (or (= (MultiSet@sharp@Card T@@28py0 s@@2py0) 0) (not (<= (MultiSet@sharp@Select T@@28py0 s@@2py0 (x@@15!59!4 T@@28py0 s@@2py0)) 0)))) :pattern ((MultiSet@sharp@Card T@@28py0 s@@2py0)) )) :named A65))
(assert (! (forall ((r@@3py0 T@U)(o@@12py0 T@U)(T@@29py0 T@T)) (! (and (or (not (= (MultiSet@sharp@Select T@@29py0 (MultiSet@sharp@Singleton T@@29py0 r@@3py0) o@@12py0) 1)) (= r@@3py0 o@@12py0)) (or (= (MultiSet@sharp@Select T@@29py0 (MultiSet@sharp@Singleton T@@29py0 r@@3py0) o@@12py0) 1) (not (= r@@3py0 o@@12py0))) (or (not (= r@@3py0 o@@12py0)) (not (= (MultiSet@sharp@Select T@@29py0 (MultiSet@sharp@Singleton T@@29py0 r@@3py0) o@@12py0) 0))) (or (= r@@3py0 o@@12py0) (= (MultiSet@sharp@Select T@@29py0 (MultiSet@sharp@Singleton T@@29py0 r@@3py0) o@@12py0) 0))) :pattern ((MultiSet@sharp@Select T@@29py0 (MultiSet@sharp@Singleton T@@29py0 r@@3py0) o@@12py0)) )) :named A66))
(assert (! (forall ((r@@4py0 T@U)(T@@30py0 T@T)) (! (and (= (MultiSet@sharp@Card T@@30py0 (MultiSet@sharp@Singleton T@@30py0 r@@4py0)) 1) (= (MultiSet@sharp@Select T@@30py0 (MultiSet@sharp@Singleton T@@30py0 r@@4py0) r@@4py0) 1)) :pattern ((MultiSet@sharp@Singleton T@@30py0 r@@4py0)) )) :named A67))
(assert (! (forall ((r@@5py0 T@U)(T@@31py0 T@T)) (! (= (MultiSet@sharp@Singleton T@@31py0 r@@5py0) (MultiSet@sharp@UnionOne T@@31py0 (MultiSet@sharp@Empty T@@31py0) r@@5py0)) :pattern ((MultiSet@sharp@Singleton T@@31py0 r@@5py0)) )) :named A68))
(assert (! (forall ((a@@24py0 T@U)(x@@16py0 T@U)(o@@13py0 T@U)(T@@32py0 T@T)) (! (= (MultiSet@sharp@Select T@@32py0 (MultiSet@sharp@UnionOne T@@32py0 a@@24py0 x@@16py0) o@@13py0) (z3name!5 T@@32py0 o@@13py0 x@@16py0 a@@24py0)) :pattern ((MultiSet@sharp@Select T@@32py0 (MultiSet@sharp@UnionOne T@@32py0 a@@24py0 x@@16py0) o@@13py0)) :pattern ((MultiSet@sharp@UnionOne T@@32py0 a@@24py0 x@@16py0) (MultiSet@sharp@Select T@@32py0 a@@24py0 o@@13py0)) )) :named A69_0))
(assert (! (forall ((x!1py2 T@U)(x!2py2 T@U)(x!3py0 T@U)(x!4py0 T@T)) (! (or (= x!2py2 x!3py0) (= (z3name!5 x!4py0 x!3py0 x!2py2 x!1py2) (MultiSet@sharp@Select x!4py0 x!1py2 x!3py0))) :pattern ((z3name!5 x!4py0 x!3py0 x!2py2 x!1py2)) )) :named A69_1))
(assert (! (forall ((x!1py3 T@U)(x!2py3 T@U)(x!3py1 T@U)(x!4py1 T@T)) (! (or (not (= x!2py3 x!3py1)) (= (z3name!5 x!4py1 x!3py1 x!2py3 x!1py3) (+ 1 (MultiSet@sharp@Select x!4py1 x!1py3 x!3py1)))) :pattern ((z3name!5 x!4py1 x!3py1 x!2py3 x!1py3)) )) :named A69_2))
(assert (! (forall ((a@@25py0 T@U)(x@@17py0 T@U)(T@@33py0 T@T)) (! (= (MultiSet@sharp@Card T@@33py0 (MultiSet@sharp@UnionOne T@@33py0 a@@25py0 x@@17py0)) (+ 1 (MultiSet@sharp@Card T@@33py0 a@@25py0))) :pattern ((MultiSet@sharp@Card T@@33py0 (MultiSet@sharp@UnionOne T@@33py0 a@@25py0 x@@17py0))) :pattern ((MultiSet@sharp@UnionOne T@@33py0 a@@25py0 x@@17py0) (MultiSet@sharp@Card T@@33py0 a@@25py0)) )) :named A70))
(assert (! (forall ((a@@26py0 T@U)(x@@18py0 T@U)(T@@34py0 T@T)) (! (and (not (<= (MultiSet@sharp@Select T@@34py0 (MultiSet@sharp@UnionOne T@@34py0 a@@26py0 x@@18py0) x@@18py0) 0)) (not (<= (MultiSet@sharp@Card T@@34py0 (MultiSet@sharp@UnionOne T@@34py0 a@@26py0 x@@18py0)) 0))) :pattern ((MultiSet@sharp@UnionOne T@@34py0 a@@26py0 x@@18py0)) )) :named A71))
(assert (! (forall ((a@@27py0 T@U)(b@@17py0 T@U)(o@@14py0 T@U)(T@@35py0 T@T)) (! (= (MultiSet@sharp@Select T@@35py0 (MultiSet@sharp@Union T@@35py0 a@@27py0 b@@17py0) o@@14py0) (+ (MultiSet@sharp@Select T@@35py0 a@@27py0 o@@14py0) (MultiSet@sharp@Select T@@35py0 b@@17py0 o@@14py0))) :pattern ((MultiSet@sharp@Select T@@35py0 (MultiSet@sharp@Union T@@35py0 a@@27py0 b@@17py0) o@@14py0)) :pattern ((MultiSet@sharp@Union T@@35py0 a@@27py0 b@@17py0) (MultiSet@sharp@Select T@@35py0 a@@27py0 o@@14py0) (MultiSet@sharp@Select T@@35py0 b@@17py0 o@@14py0)) )) :named A72))
(assert (! (forall ((a@@28py0 T@U)(b@@18py0 T@U)(T@@36py0 T@T)) (! (= (MultiSet@sharp@Card T@@36py0 (MultiSet@sharp@Union T@@36py0 a@@28py0 b@@18py0)) (+ (MultiSet@sharp@Card T@@36py0 a@@28py0) (MultiSet@sharp@Card T@@36py0 b@@18py0))) :pattern ((MultiSet@sharp@Card T@@36py0 (MultiSet@sharp@Union T@@36py0 a@@28py0 b@@18py0))) :pattern ((MultiSet@sharp@Card T@@36py0 a@@28py0) (MultiSet@sharp@Union T@@36py0 a@@28py0 b@@18py0)) :pattern ((MultiSet@sharp@Card T@@36py0 b@@18py0) (MultiSet@sharp@Union T@@36py0 a@@28py0 b@@18py0)) )) :named A73))
(assert (! (forall ((a@@29py0 T@U)(b@@19py0 T@U)(o@@15py0 T@U)(T@@37py0 T@T)) (! (= (MultiSet@sharp@Select T@@37py0 (MultiSet@sharp@Intersection T@@37py0 a@@29py0 b@@19py0) o@@15py0) (Math@sharp@min (MultiSet@sharp@Select T@@37py0 a@@29py0 o@@15py0) (MultiSet@sharp@Select T@@37py0 b@@19py0 o@@15py0))) :pattern ((MultiSet@sharp@Select T@@37py0 (MultiSet@sharp@Intersection T@@37py0 a@@29py0 b@@19py0) o@@15py0)) )) :named A74))
(assert (! (forall ((a@@30py0 T@U)(b@@20py0 T@U)(T@@38py0 T@T)) (! (= (MultiSet@sharp@Intersection T@@38py0 (MultiSet@sharp@Intersection T@@38py0 a@@30py0 b@@20py0) b@@20py0) (MultiSet@sharp@Intersection T@@38py0 a@@30py0 b@@20py0)) :pattern ((MultiSet@sharp@Intersection T@@38py0 (MultiSet@sharp@Intersection T@@38py0 a@@30py0 b@@20py0) b@@20py0)) )) :named A75))
(assert (! (forall ((a@@31py0 T@U)(b@@21py0 T@U)(T@@39py0 T@T)) (! (= (MultiSet@sharp@Intersection T@@39py0 a@@31py0 (MultiSet@sharp@Intersection T@@39py0 a@@31py0 b@@21py0)) (MultiSet@sharp@Intersection T@@39py0 a@@31py0 b@@21py0)) :pattern ((MultiSet@sharp@Intersection T@@39py0 a@@31py0 (MultiSet@sharp@Intersection T@@39py0 a@@31py0 b@@21py0))) )) :named A76))
(assert (! (forall ((a@@32py0 T@U)(b@@22py0 T@U)(o@@16py0 T@U)(T@@40py0 T@T)) (! (= (MultiSet@sharp@Select T@@40py0 (MultiSet@sharp@Difference T@@40py0 a@@32py0 b@@22py0) o@@16py0) (Math@sharp@clip (+ (MultiSet@sharp@Select T@@40py0 a@@32py0 o@@16py0) (* (- 1) (MultiSet@sharp@Select T@@40py0 b@@22py0 o@@16py0))))) :pattern ((MultiSet@sharp@Select T@@40py0 (MultiSet@sharp@Difference T@@40py0 a@@32py0 b@@22py0) o@@16py0)) )) :named A77))
(assert (! (forall ((a@@33py0 T@U)(b@@23py0 T@U)(y@@5py0 T@U)(T@@41py0 T@T)) (! (or (not (<= (MultiSet@sharp@Select T@@41py0 a@@33py0 y@@5py0) (MultiSet@sharp@Select T@@41py0 b@@23py0 y@@5py0))) (= (MultiSet@sharp@Select T@@41py0 (MultiSet@sharp@Difference T@@41py0 a@@33py0 b@@23py0) y@@5py0) 0)) :pattern ((MultiSet@sharp@Difference T@@41py0 a@@33py0 b@@23py0) (MultiSet@sharp@Select T@@41py0 b@@23py0 y@@5py0) (MultiSet@sharp@Select T@@41py0 a@@33py0 y@@5py0)) )) :named A78))
(assert (! (forall ((a@@34py0 T@U)(b@@24py0 T@U)(T@@42py0 T@T)) (! (and (= (+ (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Difference T@@42py0 a@@34py0 b@@24py0)) (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Difference T@@42py0 b@@24py0 a@@34py0)) (* 2 (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Intersection T@@42py0 a@@34py0 b@@24py0)))) (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Union T@@42py0 a@@34py0 b@@24py0))) (= (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Difference T@@42py0 a@@34py0 b@@24py0)) (+ (MultiSet@sharp@Card T@@42py0 a@@34py0) (* (- 1) (MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Intersection T@@42py0 a@@34py0 b@@24py0)))))) :pattern ((MultiSet@sharp@Card T@@42py0 (MultiSet@sharp@Difference T@@42py0 a@@34py0 b@@24py0))) )) :named A79))
(assert (! (forall ((a@@35py0 T@U)(b@@25py0 T@U)(T@@43py0 T@T)) (! (and (or (not (MultiSet@sharp@Subset T@@43py0 a@@35py0 b@@25py0)) (forall ((o@@17py0 T@U)) (! (<= (MultiSet@sharp@Select T@@43py0 a@@35py0 o@@17py0) (MultiSet@sharp@Select T@@43py0 b@@25py0 o@@17py0)) :pattern ((MultiSet@sharp@Select T@@43py0 a@@35py0 o@@17py0)) :pattern ((MultiSet@sharp@Select T@@43py0 b@@25py0 o@@17py0)) ))) (or (MultiSet@sharp@Subset T@@43py0 a@@35py0 b@@25py0) (not (<= (MultiSet@sharp@Select T@@43py0 a@@35py0 (o@@17!75!6 T@@43py0 b@@25py0 a@@35py0)) (MultiSet@sharp@Select T@@43py0 b@@25py0 (o@@17!75!6 T@@43py0 b@@25py0 a@@35py0)))))) :pattern ((MultiSet@sharp@Subset T@@43py0 a@@35py0 b@@25py0)) )) :named A80))
(assert (! (forall ((a@@36py0 T@U)(b@@26py0 T@U)(T@@44py0 T@T)) (! (and (or (not (MultiSet@sharp@Equal T@@44py0 a@@36py0 b@@26py0)) (forall ((o@@18py0 T@U)) (! (= (MultiSet@sharp@Select T@@44py0 a@@36py0 o@@18py0) (MultiSet@sharp@Select T@@44py0 b@@26py0 o@@18py0)) :pattern ((MultiSet@sharp@Select T@@44py0 a@@36py0 o@@18py0)) :pattern ((MultiSet@sharp@Select T@@44py0 b@@26py0 o@@18py0)) ))) (or (MultiSet@sharp@Equal T@@44py0 a@@36py0 b@@26py0) (not (= (MultiSet@sharp@Select T@@44py0 a@@36py0 (o@@18!77!7 T@@44py0 b@@26py0 a@@36py0)) (MultiSet@sharp@Select T@@44py0 b@@26py0 (o@@18!77!7 T@@44py0 b@@26py0 a@@36py0)))))) :pattern ((MultiSet@sharp@Equal T@@44py0 a@@36py0 b@@26py0)) )) :named A81))
(assert (! (forall ((a@@37py0 T@U)(b@@27py0 T@U)(T@@45py0 T@T)) (! (or (not (MultiSet@sharp@Equal T@@45py0 a@@37py0 b@@27py0)) (= a@@37py0 b@@27py0)) :pattern ((MultiSet@sharp@Equal T@@45py0 a@@37py0 b@@27py0)) )) :named A82))
(assert (! (forall ((a@@38py0 T@U)(b@@28py0 T@U)(T@@46py0 T@T)) (! (and (or (not (MultiSet@sharp@Disjoint T@@46py0 a@@38py0 b@@28py0)) (forall ((o@@19py0 T@U)) (! (or (= (MultiSet@sharp@Select T@@46py0 b@@28py0 o@@19py0) 0) (= (MultiSet@sharp@Select T@@46py0 a@@38py0 o@@19py0) 0)) :pattern ((MultiSet@sharp@Select T@@46py0 a@@38py0 o@@19py0)) :pattern ((MultiSet@sharp@Select T@@46py0 b@@28py0 o@@19py0)) ))) (or (MultiSet@sharp@Disjoint T@@46py0 a@@38py0 b@@28py0) (and (not (= (MultiSet@sharp@Select T@@46py0 a@@38py0 (o@@19!80!8 T@@46py0 b@@28py0 a@@38py0)) 0)) (not (= (MultiSet@sharp@Select T@@46py0 b@@28py0 (o@@19!80!8 T@@46py0 b@@28py0 a@@38py0)) 0))))) :pattern ((MultiSet@sharp@Disjoint T@@46py0 a@@38py0 b@@28py0)) )) :named A83))
(assert (! (not (IsPredicateField NormalFieldType RefType f_6)) :named A84))
(assert (! (not (IsWandField NormalFieldType RefType f_6)) :named A85))
(assert (! (forall ((arg0@@10py0 T@T)(arg1@@4py0 T@T)) (! (= (FieldTypeInv1 (FieldType arg0@@10py0 arg1@@4py0)) arg1@@4py0) :pattern ((FieldType arg0@@10py0 arg1@@4py0)) )) :named A86_0))
(assert (! (forall ((arg0@@8py0 T@T)(arg1@@2py0 T@T)) (! (= (Ctor (FieldType arg0@@8py0 arg1@@2py0)) 10) :pattern ((FieldType arg0@@8py0 arg1@@2py0)) )) :named A86_1))
(assert (! (forall ((arg0@@9py0 T@T)(arg1@@3py0 T@T)) (! (= (FieldTypeInv0 (FieldType arg0@@9py0 arg1@@3py0)) arg0@@9py0) :pattern ((FieldType arg0@@9py0 arg1@@3py0)) )) :named A86_2))
(assert (! (= (ControlFlow 0 0) 6135) :named A87_0))
(assert (! (= (ControlFlow 0 3546) 3550) :named A87_1))
(assert (! (= (ControlFlow 0 3550) (- 6548)) :named A87_2))
(assert (! (= (ControlFlow 0 6135) 3546) :named A87_3))
(assert (! (= QPMask@0 Mask@@9) :named A87_4))
(assert (! (= x@@19 null) :named A87_5))
(assert (! (U_2_bool (MapType0Select NormalFieldType boolType RefType Heap@@9 x@@19 $allocated)) :named A87_6))
(assert (! (U_2_bool (MapType0Select NormalFieldType boolType RefType Heap@@9 y@@6 $allocated)) :named A87_7))
(assert (! (U_2_bool (MapType2Select RefType boolType xs x@@19)) :named A87_8))
(assert (! (U_2_bool (MapType2Select RefType boolType ys y@@6)) :named A87_9))
(assert (! (forall ((o_2py0 T@U)) (! (or (= (invRecv1 o_2py0) o_2py0) (not (U_2_bool (MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) (invRecv1 o_2py0)))) (not (qpRange1 o_2py0)) (<= FullPerm NoPerm)) :pattern ((invRecv1 o_2py0)) )) :named A87_10))
(assert (! (forall ((o_2@@0py0 T@U)) (! (and (or (not (U_2_bool (MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) (invRecv1 o_2@@0py0)))) (not (qpRange1 o_2@@0py0)) (<= FullPerm NoPerm) (and (or (<= FullPerm NoPerm) (= (invRecv1 o_2@@0py0) o_2@@0py0)) (= (U_2_real (MapType1Select NormalFieldType RefType RefType realType QPMask@0 o_2@@0py0 f_6)) (+ (U_2_real (MapType1Select NormalFieldType RefType RefType realType ZeroMask o_2@@0py0 f_6)) FullPerm)))) (or (= (U_2_real (MapType1Select NormalFieldType RefType RefType realType QPMask@0 o_2@@0py0 f_6)) (U_2_real (MapType1Select NormalFieldType RefType RefType realType ZeroMask o_2@@0py0 f_6))) (and (U_2_bool (MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) (invRecv1 o_2@@0py0))) (not (<= FullPerm NoPerm)) (qpRange1 o_2@@0py0)))) :pattern ((MapType1Select NormalFieldType RefType RefType realType QPMask@0 o_2@@0py0 f_6)) )) :named A87_11))
(assert (! (forall ((o_2@@1py0 T@U)(f_4py0 T@U)(A@@10py0 T@T)(B@@9py0 T@T)) (! (or (= (U_2_real (MapType1Select A@@10py0 B@@9py0 RefType realType ZeroMask o_2@@1py0 f_4py0)) (U_2_real (MapType1Select A@@10py0 B@@9py0 RefType realType QPMask@0 o_2@@1py0 f_4py0))) (and (= f_4py0 f_6) (= (FieldType A@@10py0 B@@9py0) (FieldType NormalFieldType RefType)))) :pattern ((MapType1Select A@@10py0 B@@9py0 RefType realType ZeroMask o_2@@1py0 f_4py0)) :pattern ((MapType1Select A@@10py0 B@@9py0 RefType realType QPMask@0 o_2@@1py0 f_4py0)) )) :named A87_12))
(assert (! (forall ((z_1py0 T@U)) (! (or (not (U_2_bool (MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) z_1py0))) (<= FullPerm NoPerm) (and (qpRange1 z_1py0) (= (invRecv1 z_1py0) z_1py0))) :pattern ((MapType0Select NormalFieldType RefType RefType Heap@@9 z_1py0 f_6)) :pattern ((MapType1Select NormalFieldType RefType RefType realType QPMask@0 z_1py0 f_6)) :pattern ((MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) z_1py0)) )) :named A87_13))
(assert (! (forall ((z_1@@0py0 T@U)) (! (or (not (= z_1@@0py0 null)) (not (U_2_bool (MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) z_1@@0py0)))) :pattern ((MapType0Select NormalFieldType RefType RefType Heap@@9 z_1@@0py0 f_6)) :pattern ((MapType1Select NormalFieldType RefType RefType realType QPMask@0 z_1@@0py0 f_6)) :pattern ((MapType2Select RefType boolType (Set@sharp@Union RefType xs ys) z_1@@0py0)) )) :named A87_14))
(assert (! (state Heap@@9 QPMask@0) :named A87_15))
(assert (! (state Heap@@9 ZeroMask) :named A87_16))
(check-sat)
(get-info :reason-unknown)
;z3 -T:600 smt-inputs/benchmarks/verifiers/viper/pattern_augmenter/ematching/tmp/b0.vpr-typeEncoding-a_std_unique_aug-gt_unsat-full.smt2
;unknown
;((:reason-unknown "smt tactic failed to show goal to be sat/unsat (incomplete quantifiers)"))
